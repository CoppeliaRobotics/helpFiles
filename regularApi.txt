************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
loadPlugin
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Loads a CoppeliaSim <a href="../plugins.htm">plugin</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
unloadPlugin
==================== apiSeeAlso ====================>

==================== apiSynopsisLua ====================<
map namespace = loadPlugin(string pluginName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pluginName</strong>: the name of the plugin, including version number, e.g. simIK, simIK-2-0, etc.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>namespace</strong>: a map containing the variables and functions offered by the plugin</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
unloadPlugin
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Unloads a CoppeliaSim plugin
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
loadPlugin
==================== apiSeeAlso ====================>

==================== apiSynopsisLua ====================<
unloadPlugin(map namespace, map options = {})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>namespace</strong>: the map returned by <a href="loadPlugin.htm">loadPlugin</a></li>
<li><strong>options</strong>: an optional map. If options.force is set, then the plugin will be forceably unloaded, even if other scripts still depend on it</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.acquireLock
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Allows to have CoppeliaSim wait for a threaded code section to be executed without
interruption. Locking is cumulative
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.releaseLock
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.acquireLock()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.acquireLock()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addDrawingObject
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds a drawing object that will be displayed in the scene. Drawing objects are containers
that hold several items of a given type. This can be used for several different applications
(simulation of paint, simulation of welding seam, display of 3D objects, etc.). Drawing objects
created in a <a href="../simulationScripts.htm">simulation script</a> will be automatically
removed at simulation end
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addDrawingObjectItem
sim.removeDrawingObject
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAddDrawingObject(int objectType, double size, double duplicateTolerance,
                        int parentObjectHandle, int maxItemCount, const float* color,
                        const float* setToNULL, const float* setToNULL, const float* setToNULL)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectType</strong>: a <a href="../apiConstants.htm#customDrawingObjects">drawing object type combined with attributes</a></li>
<li><strong>size</strong>: size of the item (width of lines or size of points are in pixels, other sizes are in meters</li>
<li><strong>duplicateTolerance</strong>: if different from 0.0, then a call to <a href="simAddDrawingObjectItem.htm">simAddDrawingObjectItem</a> will only add the item if there is no other item within duplicateTolerance distance. Useful to avoid adding a too high density of points, is however not appropriate when using a large number of points (slower operation). Applicable only for single vertex items.</li>
<li><strong>parentObjectHandle</strong>: handle of the scene object where the drawing items should keep attached to (if the scene object moves, the drawing items will also move), or -1 if the drawing items are relative to the world (fixed)</li>
<li><strong>maxItemCount</strong>: maximum number of items this object can hold. 0 uses a default size of 1000.</li>
<li><strong>color</strong>: default  color (pointer to 3 rgb values). Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>handle of the drawing object if successful, -1 otherwise</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int drawingObjectHandle = sim.addDrawingObject(int objectType, float size, float duplicateTolerance,
                                               int parentObjectHandle, int maxItemCount,
                                               list color = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int drawingObjectHandle = sim.addDrawingObject(int objectType, float size, float duplicateTolerance,
                                               int parentObjectHandle, int maxItemCount,
                                               float[3] color = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectType</strong>: a <a href="../apiConstants.htm#customDrawingObjects">drawing object type combined with attributes</a></li>
<li><strong>size</strong>: size of the item (width of lines or size of points are in pixels, other sizes are in meters</li>
<li><strong>duplicateTolerance</strong>: if different from 0.0, then a call to <a href="simAddDrawingObjectItem.htm">simAddDrawingObjectItem</a> will only add the item if there is no other item within duplicateTolerance distance. Useful to avoid adding a too high density of points, is however not appropriate when using a large number of points (slower operation). Applicable only for single vertex items.</li>
<li><strong>parentObjectHandle</strong>: handle of the scene object where the drawing items should keep attached to (if the scene object moves, the drawing items will also move), or -1 if the drawing items are relative to the world (fixed)</li>
<li><strong>maxItemCount</strong>: maximum number of items this object can hold. 0 uses a default size of 1000.</li>
<li><strong>color</strong>: default color (3 rgb values). Can be None/nil</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li>handle of the drawing object</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addDrawingObjectItem
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds an item (or clears all items) to a previously inserted drawing object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addDrawingObject
sim.removeDrawingObject
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAddDrawingObjectItem(int objectHandle, const double* itemData)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a previously added drawing object</li>
<li><strong>itemData</strong>: data relative to an item. If the item is a point item, 3 values are required (x;y;z). If the item is a line item, 6 values are required, etc. Specifying nullptr will empty the drawing object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. If the point was added, then the return value is &gt;0, if it was not added (e.g. drawing object is saturated or the item was merged with an existing item), then the return value will be 0.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.addDrawingObjectItem(int drawingObjectHandle, list itemData)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.addDrawingObjectItem(int drawingObjectHandle, float[] itemData)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a previously added drawing object. Can be combined with sim.handleflag_addmultiple to add several drawing items at once, or with sim.handleflag_codedstring, when one wishes to provide data as a float buffer</li>
<li><strong>itemData</strong>: data relative to an item. If the item is a point item, 3 values are required [x y z]. If the item is a line item, 6 values are required, etc. None/nil to empty the drawing object</li>
</ul
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: If the point was added, the return value is &gt;0, if it was not added the return value is 0</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addForce
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds a non-central force to a shape object that is dynamically enabled. Added forces are cumulative,
applied relative to the center of mass, and are reset to zero after <a href="simHandleDynamics.htm">sim.handleDynamics</a>
was called (or by using the following flag: sim.handleflag_resetforcetorque)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addForceAndTorque
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAddForce (int shapeHandle, const double* position, const double* force)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of a dynamically enabled shape. Can be combined with sim.handleflag_resetforcetorque in order to clear the accumulated force and torque.</li>
<li><strong>position</strong>: pointer to 3 values that represent the relative position where the force should be applied.</li>
<li><strong>force</strong>: pointer to 3 values that represent the force (in relative coordinates) to add.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.addForce(int shapeHandle, list position, list force)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.addForce(int shapeHandle, float[3] position, float[3] force)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of a dynamically enabled shape. Can be combined with sim.handleflag_resetforcetorque in order to clear the accumulated force and torque.</li>
<li><strong>position</strong>: array of 3 values that represent the relative position where the force should be applied.</li>
<li><strong>force</strong>: array of 3 values that represent the force (in relative coordinates) to add.</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addForceAndTorque
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds a force and/or torque to a shape object that is dynamically enabled. 
Forces are applied at the center of mass. Added forces and torques are cumulative, and are reset to zero
after <a href="simHandleDynamics.htm">sim.handleDynamics</a> was called (or by using the following
flags: sim.handleflag_resetforce and/or sim.handleflag_resettorque)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addForce
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAddForceAndTorque(int shapeHandle, const double* force, const double* torque)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of a dynamically enabled shape. Can be combined with sim.handleflag_resetforce and/or sim.handleflag_resettorque in order to clear the accumulated force or torque.</li>
<li><strong>force</strong>: pointer to 3 values that represent the force (in absolute coordinates) to add. Can be nullptr.</li>
<li><strong>torque</strong>: pointer to 3 values that represent the torque (in absolute coordinates) to add. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.addForceAndTorque(int shapeHandle, list force, list torque)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.addForceAndTorque(int shapeHandle, float[3] force, float[3] torque)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of a dynamically enabled shape. Can be combined with sim.handleflag_resetforce and/or sim.handleflag_resettorque in order to clear the accumulated force or torque.</li>
<li><strong>force</strong>: array of 3 values that represent the force (in absolute coordinates) to add. Can be None/nil</li>
<li><strong>torque</strong>: array of 3 values that represent the torque (in absolute coordinates) to add. Can be None/nil</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addGraphCurve
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds or updates a graph curve. A graph curve is persistent, but can be removed with
<a href="simDestroyGraphCurve.htm">sim.destroyGraphCurve</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#graphs">functions related to graphs</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAddGraphCurve(int graphHandle, const char* curveName, int dim, const int* streamIds,
                     const double* defaultValues, const char* unitStr, int int options,
                     const float* color, int curveWidth)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>curveName</strong>: name of the curve</li>
<li><strong>dim</strong>: dimension of the curve. Valid values are 2 or 3</li>
<li><strong>streamIds</strong>: a pointer to 2 or 3 graph streams (x/y curves require 2 stream IDs, xyz curves require 3 stream IDs). Indicate -1 for a missing stream, in which case a default value will be used instead</li>
<li><strong>defaultValues</strong>: a pointer to 2 or 3 default values</li>
<li><strong>unitStr</strong>: string describing the unit of the curve. Can be nullptr</li>
<li><strong>options</strong>: bit-coded: bit0 is not used. If bit1 is set (2), the label is not visible. If bit2 is set (4), the points are not linked.</li>
<li><strong>color</strong>: rgb-triplet, with values in [0.0-1.0], indicating the color of the stream. Can be nullptr</li>
<li><strong>curveWidth</strong>: the width of an xyz curve</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the id of the created/updated curve</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int curveId = sim.addGraphCurve(int graphHandle, string curveName, int dim, list streamIds,
                                list defaultValues, string unitStr, int options = 0,
                                list color = [0 1, 0], int curveWidth = 2)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int curveId = sim.addGraphCurve(int graphHandle, string curveName, int dim, int[] streamIds,
                                float[] defaultValues, string unitStr, int options = 0,
                                float[3] color = {0, 1, 0}, int curveWidth = 2)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>curveName</strong>: name of the curve</li>
<li><strong>dim</strong>: dimension of the curve. Valid values are 2 or 3</li>
<li><strong>streamIds</strong>: array of 2 or 3 graph streams (x/y curves require 2 stream IDs, xyz curves require 3 stream IDs). Indicate -1 for a missing stream, in which case a default value will be used instead</li>
<li><strong>defaultValues</strong>: array of 2 or 3 default values</li>
<li><strong>unitStr</strong>: string describing the unit of the curve. Can be None/nil</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 is not used.</li>
<li>If bit1 is set (2), the label is not visible</li>
<li>If bit2 is set (4), the points are not linked</li>
</ul>
</li>
<li><strong>color</strong>: rgb-triplet, with values between 0.0 and 1.0, indicating the color of the stream. Can be None/nil</li>
<li><strong>curveWidth</strong>: the width of an xyz curve</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>curveId</strong>: id of the created/updated curve</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addGraphStream
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds or updates a graph stream. A graph stream is persistent, but can be removed
with <a href="simDestroyGraphCurve.htm">sim.destroyGraphCurve</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#graphs">functions related to graphs</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAddGraphStream(int graphHandle, const char* streamName, const char* unitStr, int options,
                      const float* color, double cyclicRange)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>streamName</strong>: name of the stream</li>
<li><strong>unitStr</strong>: string describing the unit of the stream. Can be nullptr</li>
<li><strong>options</strong>: bit-coded: if bit0 is set (1), the stream is not visible. If bit1 is set (2), the label is not visible. If bit2 is set (4), the points are not linked.</li>
<li><strong>color</strong>: rgb-triplet, with values in [0.0-1.0], indicating the color of the stream. Can be nullptr</li>
<li><strong>cyclicRange</strong>: can be used with cyclic values (e.g. angles) for correct data interpretation during <a href="simSetGraphStreamTransformation.htm">stream data transformation</a>. Set to 0 if not used</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the id of the created/updated stream</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int streamId = sim.addGraphStream(int graphHandle, string streamName, string unitStr = '',
                                  int options = 0, list color = [1, 0, 0], cyclicRange = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int streamId = sim.addGraphStream(int graphHandle, string streamName, string unitStr = '',
                                  int options = 0, float[3] color = {1, 0, 0}, cyclicRange = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>streamName</strong>: name of the stream</li>
<li><strong>unitStr</strong>: string describing the unit of the stream. Can be None/nil</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>if bit0 is set (1), the stream is not visible</li>
<li>if bit1 is set (2), the label is not visible</li>
<li>if bit2 is set (4), the points are not linked</li>
</ul>
</li>
<li><strong>color</strong>: rgb-triplet, with values between 0.0 and 1.0, indicating the color of the stream. Can be None/nil</li>
<li><strong>cyclicRange</strong>: can be used with cyclic values (e.g. angles) for correct data interpretation during <a href="simSetGraphStreamTransformation.htm">stream data transformation</a>. Set to 0 if not used</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>streamId</strong>: id of the created/updated stream</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addItemToCollection
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds an item to a <a href="../collections.htm">collection</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#collections">functions related to collections</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAddItemToCollection(int collectionHandle, int what, int objectHandle, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>collectionHandle</strong>: the handle of a collection.</li>
<li><strong>what</strong>: the type of object (or group of objects) to add. Following are allowed values: <em>sim.handle_single</em> (for a single object), <em>sim.handle_all</em> (for all objects in the scene), <em>sim.handle_tree</em> (for a tree of objects), or <em>sim.handle_chain</em> (for a chain of objects (i.e. an inverted tree)).</li>
<li><strong>objectHandle</strong>: the handle of an object.</li>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit 0 set (1): the specified object (or group of objects) is removed from the collection. Otherwise it is added.</li>
<li>bit 1 set (2): the specified object is not included in the group of objects, if sim.handle_tree or sim.handle_chain is specified (i.e. the tree base or tip is excluded).</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.addItemToCollection(int collectionHandle, int what, int objectHandle, int options)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.addItemToCollection(int collectionHandle, int what, int objectHandle, int options)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>collectionHandle</strong>: handle of a collection.</li>
<li><strong>what</strong>: type of object (or group of objects) to add. Following are allowed values:
<ul>
<li><em>sim.handle_single</em> (for a single object)</li>
<li><em>sim.handle_all</em> (for all objects in the scene)</li>
<li><em>sim.handle_tree</em> (for a tree of objects)</li>
<li><em>sim.handle_chain</em> (for a chain of objects (i.e. an inverted tree)).</li>
</ul>
</il>
<li><strong>objectHandle</strong>: handle of an object</li>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit 0 set (1): the specified object (or group of objects) is removed from the collection. Otherwise it is added.</li>
<li>bit 1 set (2): the specified object is not included in the group of objects, if sim.handle_tree or sim.handle_chain is specified (i.e. the tree base or tip is excluded).</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addLog
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds a log message that will be output in the console or status bar
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simAddLog(const char* pluginName, int verbosity, const char* message)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pluginName</strong>: the name of the plugin that outputs the message. e.g. <em>simIK</em><em></em></li>
<li><strong>verbosity</strong>: the <a href="../apiConstants.htm#verbosity">verbosity level</a>. Most appropriate values are sim.verbosity_errors (for errors), sim.verbosity_warnings (for warning) and sim.verbosity_infos.</li>
<li><strong>message</strong>: the message. Set to nullptr to clear the status bar</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.addLog(int verbosity, string message)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.addLog(int verbosity, string message)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>verbosity</strong>: the <a href="../apiConstants.htm#verbosity">verbosity level</a>. Most appropriate values are sim.verbosity_scripterrors (for errors), sim.verbosity_scriptwarnings (for warning) and sim.verbosity_scriptinfos. Combine with sim.verbosity_undecorated if you wish to output the naked message. sim.verbosity_scripterrors will additionaly raise an error.</li>
<li><strong>message</strong>: the message. None/nil clears the status bar</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addParticleObject
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds a particle object that will be simulated and displayed in the scene. Particle objects
are containers that hold several items (particles) of a given type. This can be used for
several different applications (e.g. simulation of air/water jets)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addParticleObjectItem
sim.removeParticleObject
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
int particleObjectHandle = sim.addParticleObject(int objectType, float size, float density,
                                                 list parameters, float lifeTime, int maxItemCount,
                                                 list color = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int particleObjectHandle = sim.addParticleObject(int objectType, float size, float density,
                                                 float[] parameters, float lifeTime,
                                                 int maxItemCount, float[3] color = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectType</strong>: a <a href="../apiConstants.htm#particleObjects">particle object type combined with attributes</a></li>
<li><strong>size</strong>: diameter of the particles (spheres)</li>
<li><strong>density</strong>: density of the particles</li>
<li><strong>parameters</strong>: an array of values, allowing to specify additional parameters. Can be None/nil. Values come in pair (an integer indicating what parameter, and a float indicating the parameter value. Following indicates the parameters:
<ul>
<li>0: Bullet friction coefficient (default: 0.0)</li>
<li>1: Bullet restitution coefficient (default: 0.0)</li>
<li>2: ODE friction coefficient (default: 0.0)</li>
<li>3: ODE soft ERP value (default: 0.2)</li>
<li>4: ODE soft CFM values (default: 0.0)</li>
<li>5: Bullet, ODE, Newton and Vortex linear drag parameter (default: 0.0). Adds a force opposite to the particle velocity (f=v*parameter)</li>
<li>6: Bullet, ODE, Newton and Vortex quadratic drag parameter (default: 0.0). Adds a force opposite to the particle velocity (f=v*v*parameter)</li>
<li>7: Bullet, ODE, Newton and Vortex linear drag parameter in air (z>0) if sim.particle_water was specified (default: 0.0). Adds a force opposite to the particle velocity (f=v*parameter)</li>
<li>8: Bullet, ODE, Newton and Vortex quadratic drag parameter in air (z>0) if sim.particle_water was specified (default: 0.0). Adds a force opposite to the particle velocity (f=v*v*parameter)</li>
<li>9: Vortex friction (default: 0.0)</li>
<li>10: Vortex restitution (default: 0.0)</li>
<li>11: Vortex restitution threshold (default: 0.001)</li>
<li>12: Vortex compliance (default: 0.0)</li>
<li>13: Vortex damping (default: 0.0)</li>
<li>14: Vortex adhesive force (default: 0.0)</li>
<li>15: Newton static friction (default: 0.0)</li>
<li>16: Newton kinetic friction (default: 0.0)</li>
<li>17: Newton restitution (default: 0.0)</li>
<li>If a parameter is not set, then its default value is used</li>
</ul>
</li>
<li><strong>lifeTime</strong>: simulation time after which the particles are destroyed. Set to 0.0 for an unlimited lifetime.</li>
<li><strong>maxItemCount</strong>: the maximum number of particles that this object can hold</li>
<li><strong>color</strong>: default ambient/diffuse color (pointer to 3 rgb values). Can be None/nil</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li>handle of the particle object</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addParticleObjectItem
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds an item (or clears all items) to a previously inserted particle object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addParticleObject
sim.removeParticleObject
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.addParticleObjectItem(int particleObjectHandle, list itemData)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.addParticleObjectItem(int particleObjectHandle, float[] itemData)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a previously added particle object</li>
<li><strong>itemData</strong>: data relative to an item. All items (particles) require at least 6 values: p1x, p1y, p1z, p2x, p2y, p2z with p1 is the particle start position, p2-p1 is the particle initial velocity vector. Auxiliary values might be required depending on the particle object attributes. See the <a href="../apiConstants.htm#particleObjects">particle object type combined with attributes</a> for more information. If None/nil, the particle object is emptied of all its items</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.addScript
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inserts a new script. Use with care when simulation is running
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.associateScriptWithObject
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAddScript(int scriptType)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptType</strong>: <a href="../apiConstants.htm#scriptTypes">type of the script</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>handle of the new script, or -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int scriptHandle = sim.addScript(int scriptType)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int scriptHandle = sim.addScript(int scriptType)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptType</strong>: <a href="../apiConstants.htm#scriptTypes">type of the script</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the new script</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.adjustView
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adjusts parameters of a view
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.floatingViewAdd
sim.cameraFitToView
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAdjustView(int viewHandleOrIndex, int associatedViewableObjectHandle, int options,
                  const char* viewLabel)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>viewHandleOrIndex</strong>: the handle of the view (can also be a floating view), or the index of the view.</li>
<li><strong>associatedViewableObjectHandle</strong>: handle of the object that you wish to associate with the view. Must be a viewable object. Can also be -1, in which case the view is emptied</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li><strong>bit0-bit5</strong>= 0</li>
<li><strong>bit6 (64)</strong> set=floating view is removed at simulation end</li>
<li><strong>bit7 (128)</strong> set=floating view is ignored during a scene save operation</li>
<li><strong>bit8 (256)</strong> set=the view is not modified. The return value of the function indicates if the view still exists (2), or does not exist anymore (1). No error is generated.</li>
<li><strong>bit9 (512)</strong> set=the view is not modified. The return value of the function represents the object associated with the view.</li>
</ul>
</li>
<li><strong>viewLabel</strong>: a label that will be displayed at the top of a floating view. If nullptr is specified, then the name of the associated viewable object is taken as label.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>A value &gt;0 in case of success</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.adjustView(int viewHandleOrIndex, int associatedViewableObjectHandle, int options,
               string viewLabel = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.adjustView(int viewHandleOrIndex, int associatedViewableObjectHandle, int options,
               string viewLabel = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>viewHandleOrIndex</strong>: handle of the view (can also be a floating view), or the index of the view.</li>
<li><strong>associatedViewableObjectHandle</strong>: handle of the object that you wish to associate with the view. Must be a viewable object. Can also be -1, in which case the view is emptied</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li><strong>bit0-bit5</strong>= 0</li>
<li><strong>bit6 (64)</strong> set=floating view is removed at simulation end</li>
<li><strong>bit7 (128)</strong> set=floating view is ignored during a scene save operation</li>
<li><strong>bit8 (256)</strong> set=the view is not modified. The return value of the function indicates if the view still exists (2), or does not exist anymore (1). No error is generated.</li>
<li><strong>bit9 (512)</strong> set=the view is not modified. The return value of the function represents the object associated with the view.</li>
</ul>
</li>
<li><strong>viewLabel</strong>: a label that will be displayed at the top of a floating view. If None/nil is specified, then the name of the associated viewable object is taken as label.</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.alignShapeBB
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reorients the bounding box of a shape, while keeping the shape frame in place.
The shape's inertia properties are unaffected
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.relocateShapeFrame
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAlignShapeBB(int shapeHandle, const double* pose)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>pose</strong>: pose describing the new orientation of the shape's bounding box. The pose is expressed as [x y z qx qy qz qw]. A nullptr pose, or a pose containing only zeros will align the bounding box with the mesh's natural bounding box</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if the bounding box could not be reoriented (the bounding box of primitive shapes cannot be reoriented), otherwise 1.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bool result = sim.alignShapeBB(int shapeHandle, list pose)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool result = sim.alignShapeBB(int shapeHandle, float[7] pose)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>pose</strong>: pose describing the new orientation of the shape's bounding box. The pose is expressed as [x y z qx qy qz qw]. A pose containing only zeros aligns the bounding box with the mesh's natural bounding box</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the bounding box could not be reoriented (the bounding box of primitive shapes cannot be reoriented), otherwise 1.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.alphaBetaGammaToYawPitchRoll
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Converts CoppeliaSim's alpha-beta-gamma angles to Yaw-Pitch-Roll angles
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.yawPitchRollToAlphaBetaGamma
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
float yaw, float pitch, float roll = sim.alphaBetaGammaToYawPitchRoll(float alpha,
                                                                      float beta, float gamma)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float yaw, float pitch, float roll = sim.alphaBetaGammaToYawPitchRoll(float alpha,
                                                                      float beta, float gamma)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>alpha</strong>: the alpha angle</li>
<li><strong>beta</strong>: the beta angle</li>
<li><strong>gamma</strong>: the gamma angle</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>yaw</strong>: the yaw angle</li>
<li><strong>pitch</strong>: the pitch angle</li>
<li><strong>roll</strong>: the roll angle</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.announceSceneContentChange
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Announces a change in the scene. This is required for the undo/redo function to operate properly
when performing changes via the API. Only call this function directly after a change was made through
a dialog element (e.g. a checkbox was checked/unchecked) and that change was reported to the scene.
What this call will do is following: the whole scene will be serialized (saved) to memory as a
&quot;scene image&quot; and compared to a previously memorized &quot;scene image&quot;. If both images
are same, then the last image is discarded, otherwise only the changes between the two images are memorized.
A call to this function has no effect (and doesn't generate any error) when called during simulation or when in edit mode.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simAnnounceSceneContentChange()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, 0 if nothing was memorized, or 1 if changes were memorized.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.announceSceneContentChange()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.announceSceneContentChange()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if nothing was memorized, or 1 if changes were memorized.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simApplyTexture
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Applies a texture via texture coordinates to a shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setShapeTexture
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simApplyTexture(int shapeHandle, const double* textureCoordinates, int textCoordSize,
                    const unsigned char* texture, const int* textureResolution, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>textureCoordinates</strong>: UV texture coordinates. For each of the shape's triangle, there should be exactly 3 UV texture coordinate pairs</li>
<li><strong>textCoordSize</strong>: size of the textureCoordinate array</li>
<li><strong>texture</strong>: RGB or RGBA texture</li>
<li><strong>textureResolution</strong>: X/Y resolution of the texture</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0: if set (1), then adjacent texture pixels are not interpolated</li>
<li>bit1: if set (2), then the texture is applied as a decal (its appearance won't be influenced by light conditions)</li>
<li>bit2: unused, keep unset</li>
<li>bit3: unused, keep unset</li>
<li>bit4: if set (16), then the texture is RGBA, otherwise it is RGB</li>
<li>bit5: if set (32), then the texture is horizontally flipped</li>
<li>bit6: if set (64), then the texture is vertically flipped</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>The ID of the texture, or -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.associateScriptWithObject
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the associated object of a child script. Use with care when simulation is running
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addScript
sim.setScriptStringParam
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAssociateScriptWithObject(int scriptHandle, int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the child script</li>
<li><strong>objectHandle</strong>: handle of the associated object, or -1 to remove the association</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.associateScriptWithObject(int scriptHandle, int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.associateScriptWithObject(int scriptHandle, int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the child script</li>
<li><strong>objectHandle</strong>: handle of the associated object, or -1 to remove the association</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.auxiliaryConsoleClose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Closes an auxiliary console window
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.auxiliaryConsoleOpen
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAuxiliaryConsoleClose(int consoleHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>consoleHandle</strong>: handle of the console window, previously returned by simAuxiliaryConsoleOpen</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if the console doesn't exist (anymore), in which case no error is generated. 1 if the console window was closed.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.auxiliaryConsoleClose(int consoleHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.auxiliaryConsoleClose(int consoleHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>consoleHandle</strong>: handle of the console window, previously returned by sim.auxiliaryConsoleOpen</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the console doesn't exist (anymore), in which case no error is generated. 1 if the console window was closed</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.auxiliaryConsoleOpen
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Opens an auxiliary console window for text display. This console window is different from
the application main console window. Console window handles are shared across all simulator scenes
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.auxiliaryConsolePrint
sim.auxiliaryConsoleClose
sim.addLog
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAuxiliaryConsoleOpen(const char* title, int maxLines, int mode, const int* position,
                            const int* size, const float* textColor, const float* backgroundColor)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>title</strong>: title of the console window</li>
<li><strong>maxLines</strong>: number of text lines that can be displayed and buffered</li>
<li><strong>mode</strong>: bit-coded value:
<ul>
<li>bit0 (1) set indicates that the console window automatically closes at simulation end</li>
<li>bit1 (2) set indicates that lines will be wrapped</li>
<li>bit2 (4) set indicates that the user can close the console window</li>
<li>bit3 (8) is not used</li>
<li>bit4 (16) set indicates that the console will not automatically hide when the user switches to another scene</li>
</ul>
</li>
<li><strong>position</strong>: initial position of the console window (x and y value). Can be nullptr</li>
<li><strong>size</strong>: initial size of the console window (x and y value). Can be nullptr</li>
<li><strong>textColor</strong>: color of the text (rgb values, 0.0 - 1.0). Can be nullptr</li>
<li><strong>backgroundColor</strong>: background color of the console window (rgb values, 0.0 - 1.0). Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. Otherwise a console window handle</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int consoleHandle = sim.auxiliaryConsoleOpen(string title, int maxLines, int mode,
                                             list position = None, list size = None,
                                             list textColor = None, list backgroundColor = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int consoleHandle = sim.auxiliaryConsoleOpen(string title, int maxLines, int mode,
                                             int[2] position = nil, int[2] size = nil,
                                             float[3] textColor = nil,
                                             float[3] backgroundColor = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>title</strong>: title of the console window</li>
<li><strong>maxLines</strong>: number of text lines that can be displayed and buffered</li>
<li><strong>mode</strong>: bit-coded value:
<ul>
<li>bit0 (1) set indicates that the console window automatically closes at simulation end</li>
<li>bit1 (2) set indicates that lines will be wrapped</li>
<li>bit2 (4) set indicates that the user can close the console window</li>
<li>bit3 (8) is not used</li>
<li>bit4 (16) set indicates that the console will not automatically hide when the user switches to another scene</li>
</ul>
</li>
<li><strong>position</strong>: initial position of the console window (x and y value). Can be None/nil</li>
<li><strong>size</strong>: initial size of the console window (x and y value). Can be None/nil</li>
<li><strong>textColor</strong>: color of the text (rgb values, 0.0 - 1.0). Can be None/nil</li>
<li><strong>backgroundColor</strong>: background color of the console window (rgb values, 0.0 - 1.0 ). Can be None/nil</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>consoleHandle</strong>: console window handle</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.auxiliaryConsolePrint
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Prints to an auxiliary console window
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.auxiliaryConsoleOpen
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAuxiliaryConsolePrint(int consoleHandle, const char* text)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>consoleHandle</strong>: handle of the console window, previously returned by the <a href="simAuxiliaryConsoleOpen.htm">simAuxiliaryConsoleOpen</a></li>
<li><strong>text</strong>: text to append, or nullptr to clear the console window</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if the console doesn't exist (anymore), in which case no error is generated. 1 if the operation was successful.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.auxiliaryConsolePrint(int consoleHandle, string text)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.auxiliaryConsolePrint(int consoleHandle, string text)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>consoleHandle</strong>: handle of the console window, previously returned by the <a href="simAuxiliaryConsoleOpen.htm">sim.auxiliaryConsoleOpen</a></li>
<li><strong>text</strong>: text to append, or None/nil to clear the console window</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the console doesn't exist (anymore), in which case no error is generated. 1 if the operation was successful</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.auxiliaryConsoleShow
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Shows or hides an auxiliary console window
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.auxiliaryConsoleOpen
sim.auxiliaryConsoleClose
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simAuxiliaryConsoleShow(int consoleHandle, bool showState)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>consoleHandle</strong>: handle of the console window, previously returned by <a href="simAuxiliaryConsoleOpen.htm">simAuxiliaryConsoleOpen</a>. When combined with <em>sim.handleflag_extended</em>, then the function will simply query the visibility state of the console.</li>
<li><strong>showState</strong>: indicates whether the console should be hidden (0) or shown (!=0)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if the console doesn't exist (anymore), in which case no error is generated. 1 if the console window's show state was changed.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.auxiliaryConsoleShow(int consoleHandle, bool showState)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.auxiliaryConsoleShow(int consoleHandle, bool showState)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>consoleHandle</strong>: handle of the console window, previously returned by <a href="simAuxiliaryConsoleOpen.htm">sim.auxiliaryConsoleOpen</a>. When combined with <em>sim.handleflag_extended</em>, then the function will simply query the visibility state of the console.</li>
<li><strong>showState</strong>: indicates whether the console should be hidden (0) or shown (!=0)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the console doesn't exist (anymore), in which case no error is generated. 1 if the console window's show state was changed.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.broadcastMsg
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Broadcasts a message to all scripts, except for the emitting script. Messages are received
synchronously via the sysCall_msg <a href="../callbackFunctions.htm">callback function</a>
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
sim.broadcastMsg(dict message, int options = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.broadcastMsg(map message, int options = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>message</strong>: message to broadcast. Best is to use following skeleton message: message = {'id': 'msgIdentifyingString', 'data': [...]}</li>
<li><strong>options</strong>: not used, keep at 0</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.buildIdentityMatrix
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Builds an identity transformation matrix
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#coordinatesAndTransformations">matrix/transformation functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simBuildIdentityMatrix(double* matrix)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrix</strong>: matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list matrix = sim.buildIdentityMatrix()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[12] matrix = sim.buildIdentityMatrix()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>matrix</strong>: array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.buildMatrix
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Builds a transformation matrix based on a position vector and
<a href="../positionOrientationTransformation.htm#euler">Euler angles</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simBuildMatrix(const double* position, const double* eulerAngles, double* matrix)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>position</strong>: pointer to 3 values</li>
<li><strong>eulerAngles</strong>: pointer to 3 values</li>
<li><strong>matrix</strong>: matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list matrix = sim.buildMatrix(list position, list eulerAngles)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[12] matrix = sim.buildMatrix(float[3] position, float[3] eulerAngles)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>position</strong>: array of 3 values</li>
<li><strong>eulerAngles</strong>: array of 3 values</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>matrix</strong>: array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.buildPose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Builds a pose based on a position vector and <a href="../positionOrientationTransformation.htm#euler">Euler angles</a> or
axes
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simBuildPose(const double* position, const double* eulerAngles, double* pose)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>position</strong>: pointer to 3 values</li>
<li><strong>eulerAngles</strong>: pointer to 3 values</li>
<li><strong>pose</strong>: pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list pose = sim.buildPose(list position, list eulerAnglesOrAxis, int mode = 0, list axis2 = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7] pose = sim.buildPose(float[3] position, float[3] eulerAnglesOrAxis1, int mode = 0,
                              float[3] axis2 = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>position</strong>: pointer to 3 values representing the position component</li>
<li><strong>eulerAnglesOrAxis1</strong>: pointer to 3 values representing Euler angles or a reference frame axis (see mode below)</li>
<li><strong>mode</strong>: describes how the orientation is specified:
<ul>
<li>0: eulerAnglesOrAxis1 represents Euler angles and axis2 is ignored</li>
<li>1: eulerAnglesOrAxis1 represents the x-axis of the new pose's reference frame, axis2 is ignored</li>
<li>2: eulerAnglesOrAxis1 represents the y-axis of the new pose's reference frame, axis2 is ignored</li>
<li>3: eulerAnglesOrAxis1 represents the z-axis of the new pose's reference frame, axis2 is ignored</li>
<li>4: eulerAnglesOrAxis1 represents the x-axis and axis2 represents the y-axis of the new pose's reference frame</li>
<li>5: eulerAnglesOrAxis1 represents the y-axis and axis2 represents the z-axis of the new pose's reference frame</li>
<li>6: eulerAnglesOrAxis1 represents the z-axis and axis2 represents the x-axis of the new pose's reference frame</li>
<li>7: eulerAnglesOrAxis1 represents the x-axis and axis2 represents the z-axis of the new pose's reference frame</li>
<li>8: eulerAnglesOrAxis1 represents the y-axis and axis2 represents the x-axis of the new pose's reference frame</li>
<li>9: eulerAnglesOrAxis1 represents the z-axis and axis2 represents the y-axis of the new pose's reference frame</li>
</ul>
</li>
<li><strong>axis2</strong>: pointer to 3 values representing a reference frame axis (see mode above)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pose</strong>: the pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.callScriptFunction
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Calls a script function (from a <a href="../plugins.htm">plugin</a>, <a href="../mainClientApplication.htm">the main client application</a>,
or from another script). This represents a <a href="../callbackFunctions.htm">user callback</a> inside of a script. The
target script must be initialized for this call to succeed, e.g. when calling <a href="../simulationScripts.htm">simulation scripts</a>,
then simulation must be running
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getScriptFunctions
sim.executeScriptString
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
... = sim.callScriptFunction(string functionName, int scriptHandle, ...)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
... = sim.callScriptFunction(string functionName, int scriptHandle, ...)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>functionName</strong>: the function to call.</li>
<li><strong>scriptHandle</strong>: the handle of the script, or sim.handle_self to target the current script. See <a href="simGetScript.htm">sim.getScript</a></li>
<li><strong>...</strong>: any number of arguments that will be handed over to the called function.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>...</strong>: any number of return values from the called function.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simCallScriptFunctionEx
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Calls a script function (from a <a href="../plugins.htm">plugin</a>, 
<a href="../mainClientApplication.htm">the main client application</a>, or from another script). This
represents a <a href="../callbackFunctions.htm">user callback</a> inside of a script. The target script
must be initialized for this call to succeed, e.g. when calling <a href="../simulationScripts.htm">simulation scripts</a>,
then simulation must be running
<br><br>
Data exchange between a plugin and a script happens via a <a href="../apiFunctions.htm#stacks">stack</a>. Reading and writing arguments from/to the stack gives you a maximum of flexibility, and you wil be able to exchange also complex data structures. But it can also be tedious and error prone. Use instead the helper classes located in <em>programming/</em><em>include/simStack</em>: they will greatly simplify the task. Have a look at the example plugins <a href="https://github.com/CoppeliaRobotics/simSkeleton" target="_blank">simSkeleton</a> and <a href="https://github.com/CoppeliaRobotics/simSkel" target="_blank">simSkel</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.executeScriptString
simGetScriptHandleEx
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCallScriptFunctionEx(int scriptHandleOrType, const char* functionNameAtScriptName,
                            int stackId)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: the handle of the script</li>
<li><strong>functionName</strong>: the function to call.</li>
<li><strong>stackId</strong>: a <a href="simCreateStack_cpp.htm">stack handle</a>. The stack represents the function's in/out values. See also the <a href="../apiFunctions.htm#stacks">available stack functions</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.cameraFitToView
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Shifts and adjusts a camera associated with a view to fill the view entirely with
the specified objects or models
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.adjustView
sim.floatingViewAdd
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCameraFitToView(int viewHandleOrIndex, int objectCount, const int* objectHandles, int options,
                       double scaling)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>viewHandleOrIndex</strong>: the handle of the view (can also be a floating view), or the index of the view. If the camera is not associated with any view, then you can specify the handle of the camera, together with the <em>sim.handleflag_camera</em> flag.</li>
<li><strong>objectCount</strong>: number of intems in the objectHandles pointer. Can be 0, in which case the whole visible scene will be filling the view.</li>
<li><strong>objectHandles</strong>: pointer to objectHandles. Only visible objects will be taken into account. Can be nullptr, in which case the whole visible scene will be filling the view.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 (1): if set, then individual objects will be filling the view. If not set, then models associated with model base objects will also be included</li>
<li>bit1 (2): if set, then the view proportions will be 1 by 1, independently on what the view size is</li>
</ul>
</li>
<li><strong>scaling</strong>: scaling factor. Use 1.0 for normal behaviour.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 for a silent error (e.g. when the indicated view doesn't exist anymore), 1 for success</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.cameraFitToView(int viewHandleOrIndex, list objectHandles = None, int options = 0,
                                 float scaling = 1)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.cameraFitToView(int viewHandleOrIndex, int[] objectHandles = nil, int options = 0,
                                 float scaling = 1)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>viewHandleOrIndex</strong>: handle of the view (can also be a floating view), or the index of the view. If the camera is not associated with any view, then you can specify the handle of the camera, together with the <em>sim.handleflag_camera</em> flag.</li>
<li><strong>objectHandles</strong>: object handles. Only visible objects will be taken into account. Can be None/nil, in which case the whole visible scene will be filling the view.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 (1): if set, then individual objects will be filling the view. If not set, then models associated with model base objects will also be included</li>
<li>bit1 (2): if set, then the view proportions will be 1 by 1, independently on what the view size is</li>
</ul>
</li>
<li><strong>scaling</strong>: scaling factor. Use 1.0 for normal behaviour.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 for a silent error (e.g. when the indicated view doesn't exist anymore), 1 for success</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.changeEntityColor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Changes the color of an <a href="../entities.htm">entity</a>, and returns its original
color. Currently only takes into account <a href="../collections.htm">collections</a>
and <a href="../shapes.htm">shapes</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.restoreEntityColor
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list originalColorData = sim.changeEntityColor(int entityHandle, list newColor,
                                               int colorComponent = sim.colorcomponent_ambient_diffuse)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
map[] originalColorData = sim.changeEntityColor(int entityHandle, float[3] newColor,
                                                int colorComponent = sim.colorcomponent_ambient_diffuse)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>entityHandle</strong>: handle of a entity</li>
<li><strong>newColor</strong>: array of 3 rgb values, each between 0.0 and 1.0</li>
<li><strong>colorComponent</strong>: a <a href="../apiConstants.htm#colorComponents">color component</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>originalColorData</strong>: original color data, to be used as argument with <a href="simRestoreEntityColor.htm">sim.restoreEntityColor</a></li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkCollision
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether two entities are colliding. The collidable flags of the entities
are overridden if the entities are objects. If the entities are both the same collection
(i.e. with the same collection handle), then same objects will not be checked against themselve
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simCheckCollision(int entity1Handle, int entity2Handle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>entity1Handle</strong>: handle of entity 1 (can be an object handle or a collection handle)</li>
<li><strong>entity2Handle</strong>: handle of entity 2 (can be an object handle or a collection handle), or sim.handle_all to check entity1 against all other collidable objects</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 or 1 to indicate a collision state</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, list collidingObjectHandles = sim.checkCollision(int entity1Handle, int entity2Handle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, int[2] collidingObjectHandles = sim.checkCollision(int entity1Handle, int entity2Handle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>entity1Handle</strong>: handle of entity 1 (can be an object handle or a collection handle)</li>
<li><strong>entity2Handle</strong>: handle of entity 2 (can be an object handle or a collection handle), or sim.handle_all to check entity1 against all other collidable objects</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 or 1 to indicate a collision state</li>
<li><strong>collidingObjectHandles</strong>: array containing the colliding pair</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkCollisionEx
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether two entities are colliding, and will return all intersections between
the two entities. The collidable flags of the entities are overridden if the entities
are objects
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.checkCollision
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCheckCollisionEx(int entity1Handle, int entity2Handle, double** intersectionSegments)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>entity1Handle</strong>: handle of entity 1 (can be an object handle or a collection handle)</li>
<li><strong>entity2Handle</strong>: handle of entity 2 (can be an object handle or a collection handle), or sim.handle_all to check entity1 against all other collidable objects</li>
<li><strong>intersectionSegments</strong>: pointer to an array of double values that represent the intersections (segments) between the two entities (pt1(x,y,z), pt2(x,y,z), pt1(x,y,z), etc). This can be nullptr. The user should use <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a> to delete the returned data. That data is only valid if return value is &gt;0</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise the number of segments returned</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, list intersections = sim.checkCollisionEx(int entity1Handle, int entity2Handle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, float[] intersections = sim.checkCollisionEx(int entity1Handle, int entity2Handle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>entity1Handle</strong>: handle of entity 1 (can be an object handle or a collection handle)</li>
<li><strong>entity2Handle</strong>: handle of entity 2 (can be an object handle or a collection handle), or sim.handle_all to check entity1 against all other collidable objects</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: number of segments returned</li>
<li><strong>intersections</strong>: array containing the intersection segments between the two entities</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkDistance
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks the minimum distance between two entities. The measurable flags of the
entities are overridden if the entities are objects. If the entities are both
the same collection (i.e. with the same collection handle), then same objects
will not be checked against themselve
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simCheckDistance(int entity1Handle, int entity2Handle, double threshold, double* distanceData)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>entity1Handle</strong>: handle of entity 1 (can be an object handle or a collection handle)</li>
<li><strong>entity2Handle</strong>: handle of entity 2 (can be an object handle or a collection handle), or sim.handle_all to check entity1 against all other measurable objects</li>
<li><strong>threshold</strong>: if distance is bigger than the threshold, the distance is not calculated and return value is 0. If threshold is 0 or negative, then no threshold is used.</li>
<li><strong>distanceData</strong>: distanceData[0]-distanceData[5] represents the distance segment, distanceData[6] is the distance between the entities. This data is valid only if return value is 1</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>0 or 1 if operation was successful (1 if distance is smaller than threshold), -1 otherwise</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, list distanceData, list objectHandlePair = sim.checkDistance(int entity1Handle,
                                                                         int entity2Handle,
                                                                         float threshold = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, float[7] distanceData, int[2] objectHandlePair = sim.checkDistance(int entity1Handle,
                                                                               int entity2Handle,
                                                                               float threshold = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>entity1Handle</strong>: handle of entity 1 (can be an object handle or a collection handle)</li>
<li><strong>entity2Handle</strong>: handle of entity 2 (can be an object handle or a collection handle), or sim.handle_all to check entity1 against all other measurable objects</li>
<li><strong>threshold</strong>: if distance is bigger than the threshold, the distance is not calculated and result is 0. If threshold is 0 or negative, then no threshold is used.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 1 if distance is smaller than the threshold</li>
<li><strong>distanceData</strong>: array of 7 values: [obj1X obj1Y obj1Z obj2X obj2Y obj2Z dist]</li>
<li><strong>objectHandlePair</strong>: array of 2 object handles representing the two objects that hold the minimum distance segment</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkOctreePointOccupancy
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether the provided points collide with the <a href="../octrees.htm">OC tree</a> voxels
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#octree">OC tree related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int checkOctreePointOccupancy(int octreeHandle, int options, const double* pts, int ptCnt,
                              unsigned int* tag, unsigned long long int* location, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the OC tree reference frame, otherwise they are relative to the world reference frame</li>
</ul>
</li>
<li><strong>pts</strong>: pointer to the points specified as x/y/z coordinates</li>
<li><strong>ptCnt</strong>: number of points contained in pts</li>
<li><strong>tag</strong>: pointer to a tag value, receiving the tag value of the voxel that collides with a single point. If several points are tested, then this pointer is ignored. Can be nullptr.</li>
<li><strong>location</strong>: pointer to a uint64 value, which specifies the location of the voxel that collides with a single point. If several points are tested, then this pointer is ignored. Can be nullptr. The location value is coded in following way:
<ul>
<li>bit0 - bit5: the depth level of the voxel in the OC tree structure (1-63).</li>
<li>bit6 - bit63: a triple bit-value for each depth level. triple bit-values represent the node location relative to the parent node:
<ul>
<li>0: (-1,-1,-1)</li>
<li>1: (+1,-1,-1)</li>
<li>2: (-1,+1,-1)</li>
<li>3: (+1,+1,-1)</li>
<li>4: (-1,-1,+1)</li>
<li>5: (+1,-1,+1)</li>
<li>6: (-1,+1,+1)</li>
<li>7: (+1,+1,+1)</li>
</ul>
</li>
</ul>
</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, 0 if the points do not collide with the voxels, 1 if the points collide with the voxels</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int res, int tag, int locLow, int locHigh = sim.checkOctreePointOccupancy(int octreeHandle,
                                                                          int options, list points)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int res, int tag, int locLow, int locHigh = sim.checkOctreePointOccupancy(int octreeHandle,
                                                                          int options, float[] points)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the OC tree reference frame, otherwise they are relative to the world reference frame</li>
</ul>
</li>
<li><strong>points</strong>: points specified as x/y/z coordinates</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>res</strong>: 0 if the points do not collide with the voxels, 1 if the points collide with the voxels</li>
<li><strong>tag</strong>: tag value of the voxel that collides with a single point. If several points are tested, this return value should be ignored</li>
<li><strong>loc</strong>: value specifying the location of the voxel that collides with a single point. If several points are tested, then this return value should be ignored</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkProximitySensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether the proximity sensor detects the indicated entity. Detection is silent (no visual
feedback) compared to <a href="simHandleProximitySensor.htm">sim.handleProximitySensor</a>.
Also, the detectable flags of the entity are overridden if the entity is an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readProximitySensor
sim.checkProximitySensorEx
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCheckProximitySensor(int sensorHandle, int entityHandle, double* detectedPoint)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the proximity sensor object</li>
<li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
<li><strong>detectedPoint</strong>: coordinates of detected point relative to the sensor origin (detectedPoint[0]-detectedPoint[2]), and distance of detected point to the sensor origin (detectedPoint[3]). Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise 0 (no detection) or 1 (detection)</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int res, float dist, list point, int obj, list n = sim.checkProximitySensor(int sensorHandle, 
                                                                            int entityHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int res, float dist, float[3] point, int obj, float[3] n = sim.checkProximitySensor(int sensorHandle,
                                                                                    int entityHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the proximity sensor object</li>
<li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>res</strong>:  0 (not detected) or 1 (detected)</li>
<li><strong>dist</strong>: distance from the sensor origin to the detected point. None/nil if result is different from 1</li>
<li><strong>point</strong>: position of the detected point relative to the sensor origin. None/nil if result is different from 1</li>
<li><strong>obj</strong>: handle of detected object. None/nil if result is different from 1</li>
<li><strong>n</strong>: normal vector of the surface where the point was detected. Normalized. Relative to the sensor reference frame. None/nil if result is different from 1</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkProximitySensorEx
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether the proximity sensor detects the indicated entity. Detection is silent (no visual feedback)
compared to <a href="simHandleProximitySensor.htm">sim.handleProximitySensor</a>. Also, the detectable flags
of the entity are overridden if the entity is an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readProximitySensor
sim.checkProximitySensorEx2
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCheckProximitySensorEx(int sensorHandle, int entityHandle, int detectionMode,
                              double detectionThreshold, double maxAngle, double* detectedPoint,
                              int* detectedObjectHandle, double* surfaceNormalVector)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the proximity sensor object</li>
<li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
<li><strong>detectionMode</strong>: bit coded: bit0 (1) for front face detection, bit1 (2) for back face detection (bit0|bit1 needs to be true), bit2 (4) for fast detection (doesn't search for the closest point, just any point in the detection volume), bit3 (8) for limited angle detection (if set, maxAngle is taken into account).</li>
<li><strong>detectionThreshold</strong>: doesn't detect objects farther than detectionThreshold distance from sensor origin</li>
<li><strong>maxAngle</strong>: maximum detection angle (angle between detection ray and normal vector of the surface). Can be (0;pi/2). Only if bit3 of detectionMode is set will this parameter have an effect. Use this to realistically simulate ultrasonic sensors.</li>
<li><strong>detectedPoint</strong>: coordinates of detected point relative to the sensor origin (detectedPoint[0]-detectedPoint[2]), and distance of detected point to the sensor origin (detectedPoint[3]). Can be nullptr</li>
<li><strong>detectedObjectHandle</strong>: handle of detected object (useful when entity to be detected is a collection or sim.handle_all). Can be nullptr</li>
<li><strong>surfaceNormalVector</strong>: normal vector of the surface where the point was detected. Normalized. Relative to the sensor reference frame. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise 0 (no detection) or 1 (detection)</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int res, float dist, list point, int object, list n = sim.checkProximitySensorEx(int handle, int entityHandle,
                                                                                 int detectionMode, 
                                                                                 float detectionthreshold,
                                                                                 float maxAngle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int res, float dist, float[3] point, int object, float[3] n = sim.checkProximitySensorEx(int handle, int entityHandle,
                                                                                         int detectionMode,
                                                                                         float detectionthreshold,
                                                                                         float maxAngle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the proximity sensor object</li>
<li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
<li><strong>detectionMode</strong>: bit coded: bit0 (1) for front face detection, bit1 (2) for back face detection (bit0|bit1 needs to be true), bit2 (4) for fast detection (doesn't search for the closest point, just any point in the detection volume), bit3 (8) for limited angle detection (if set, maxAngle is taken into account).</li>
<li><strong>detectionThreshold</strong>: doesn't detect objects farther than detectionThreshold distance from sensor origin</li>
<li><strong>maxAngle</strong>: maximum detection angle (angle between detection ray and normal vector of the surface). Can be (0;pi/2). Only if bit3 of detectionMode is set will this parameter have an effect. Use this to realistically simulate ultrasonic sensors.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>res</strong>:  0 (not detected) or 1 (detected)</li>
<li><strong>dist</strong>: distance from the sensor origin to the detected point. None/nil if result is different from 1</li>
<li><strong>point</strong>: position of the detected point relative to the sensor origin. None/nil if result is different from 1</li>
<li><strong>object</strong>: handle of detected object. None/nil if result is different from 1</li>
<li><strong>n</strong>: normal vector of the surface where the point was detected. Normalized. Relative to the sensor reference frame. None/nil if result is different from 1</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkProximitySensorEx2
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether the proximity sensor detects the indicated points, segments or triangles.
Detection is silent (no visual feedback)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readProximitySensor
sim.checkProximitySensorEx
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCheckProximitySensorEx2(int sensorHandle, double* vertexPointer, int itemType, int itemCount,
                               int detectionMode, double detectionThreshold, double maxAngle,
                               double* detectedPoint, double* normalVector)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the proximity sensor object</li>
<li><strong>vertexPointer</strong>: a pointer to vertices</li>
<li><strong>itemType</strong>: 0 for points, 1 for segments and 2 for triangles</li>
<li><strong>itemCount</strong>: the number of items that vertexPointer points at</li>
<li><strong>detectionMode</strong>: bit coded: bit0 (1) for front face detection, bit1 (2) for back face detection (bit0|bit1 needs to be true), bit2 (4) for fast detection (doesn't search for the closest point, just any point in the detection volume), bit3 (8) for limited angle detection (if set, maxAngle is taken into account).</li>
<li><strong>detectionThreshold</strong>: doesn't detect objects farther than detectionThreshold distance from sensor origin</li>
<li><strong>maxAngle</strong>: maximum detection angle (angle between detection ray and normal vector of the surface). Can be (0;pi/2). Only if bit3 of detectionMode is set will this parameter have an effect. Use this to realistically simulate ultrasonic sensors.</li>
<li><strong>detectedPoint</strong>: coordinates of detected point relative to the sensor origin (detectedPoint[0]-detectedPoint[2]), and distance of detected point to the sensor origin (detectedPoint[3]). Can be nullptr</li>
<li><strong>normalVector</strong>: normal vector of the surface where the point was detected. Normalized. Relative to the sensor reference frame. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise 0 (no detection) or 1 (detection)</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int res, float dist, list point, list n = sim.checkProximitySensorEx2(int sensorHandle, list vertices,
                                                                         int itemType, int itemCount,
                                                                         int mode, float threshold,
                                                                         float maxAngle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int res, float dist, float[3] point, float[3] n = sim.checkProximitySensorEx2(int sensorHandle, float[] vertices,
                                                                                 int itemType, int itemCount,
                                                                                 int mode, float threshold,
                                                                                 float maxAngle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the proximity sensor object</li>
<li><strong>vertices</strong>: an array containing vertices</li>
<li><strong>itemType</strong>: 0 for points, 1 for segments and 2 for triangles</li>
<li><strong>itemCount</strong>: the number of items that the 'vertices' array contains</li>
<li>For the other parameters, see the description in <a href="simCheckProximitySensorEx.htm">sim.checkProximitySensorEx</a>. (sim.checkProximitySensorEx2 doesn't support occlusion checking)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>res</strong>:  0 (not detected) or 1 (detected)</li>
<li><strong>dist</strong>: distance from the sensor origin to the detected point. None/nil if res is different from 1</li>
<li><strong>point</strong>: position of the detected point relative to the sensor origin. None/nil if res is different from 1</li>
<li><strong>n</strong>: normal vector of the surface where the point was detected. Normalized. Relative to the sensor reference frame. None/nil if res is different from 1</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkVisionSensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether the vision sensor detects the indicated entity. Detection is silent
(no visual feedback) compared to <a href="simHandleVisionSensor.htm">sim.handleVisionSensor</a>.
The <a href="../visionCallbackFunctions.htm">vision callback functions</a> will be called on the
acquired image. Also, the visibility state of the entity is overridden if the entity is an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readVisionSensor
sim.checkVisionSensorEx
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCheckVisionSensor(int sensorHandle, int entityHandle, double** auxValues,
                         int** auxValuesCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor object</li>
<li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
<li><strong>auxValues</strong>: by default CoppeliaSim returns one packet of 15 auxiliary values: the minimum of intensity, red, green, blue, depth value, the maximum of intensity, red, green, blue, depth value, and the average of intensity, red, green, blue, depth value. Additional packets can be appended in the <a href="../visionCallbackFunctions.htm">vision callback functions</a>. AuxValues can be nullptr. The user is in charge of releasing the auxValues buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>(*auxValues).</li>
<li><strong>auxValuesCount</strong>: contains information about the number of auxiliary value packets and packet sizes returned in auxValues. The first value is the number of packets, the second is the size of packet1, the third is the size of packet2, etc. Can be nullptr if auxValues is also nullptr. The user is in charge of releasing the auxValuesCount buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>(*auxValuesCount)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiMoreCpp ====================<
<h3>Example</h3>
<code class="hljs language-c++ coppelia-coppeliasim-plugin">double* auxValues = nullptr;
int* auxValuesCount = nullptr;
double averageColor[3] = {0.0, 0.0, 0.0};
if (simCheckVisionSensor(sensorHandle, entityHandle, &auxValues, &auxValuesCount) &gt;=0 )
{
    if ((auxValuesCount[0] &gt; 0) || (auxValuesCount[1] &gt;= 15))
    {
        averageColor[0] = auxValues[11];
        averageColor[1] = auxValues[12];
        averageColor[2] = auxValues[13];
    }
    simReleaseBuffer((char*)auxValues);
    simReleaseBuffer((char*)auxValuesCount);
}</code>
==================== apiMoreCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise 0 (no detection) or 1 (detection)</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, list auxPacket1, list auxPacket2, etc. = sim.checkVisionSensor(int sensorHandle, int entityHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, float[] auxPacket1, float[] auxPacket2, etc. = sim.checkVisionSensor(int sensorHandle, int entityHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor object</li>
<li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 (no detection) or 1 (detection)</li>
<li><strong>auxPacket1</strong>: packet of 15 auxiliary values: the minimum of intensity, red, green, blue, depth value, the maximum of intensity, red, green, blue, depth value, and the average of intensity, red, green, blue, depth value</li>
<li><strong>auxPacket2</strong>: additional auxiliary value packet (e.g. from an image processing component)</li>
<li><strong>auxPacket3</strong>: etc. (the function returns as many tables as there are auxiliary value packets)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.checkVisionSensorEx
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether the vision sensor detects the indicated entity. Detection is silent (no visual feedback) compared
to <a href="simHandleVisionSensor.htm">sim.handleVisionSensor</a>. The <a href="../visionCallbackFunctions.htm">vision callback functions</a>
will be called on the acquired image. Also, the visibility state of the entity is overridden if the entity is an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readVisionSensor
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
double* simCheckVisionSensorEx(int sensorHandle, int entityHandle, bool returnImage)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor object</li>
<li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
<li><strong>returnImage</strong>: specifies what should be returned. If true, the sensor's image buffer is returned, otherwise its depth buffer is returned</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>image or depth buffer, or nullptr in case of an error. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list buff = sim.checkVisionSensorEx(int sensorHandle, int entityHandle, bool returnImage)
bytes buff = sim.checkVisionSensorEx(int sensorHandle, int entityHandle, bool returnImage)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] buff = sim.checkVisionSensorEx(int sensorHandle, int entityHandle, bool returnImage)
buffer buff = sim.checkVisionSensorEx(int sensorHandle, int entityHandle, bool returnImage)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>                                                                                                                                                               
<li><strong>sensorHandle</strong>: handle of the vision sensor object. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_codedstring</a> if you wish to retrieve the image or depth map coded in a string (much faster)</li>
<li><strong>entityHandle</strong>: handle of entity to detect (object or collection), or sim.handle_all to detect all detectable objects</li>
<li><strong>returnImage</strong>: specifies what should be returned. If true, the sensor's image buffer is returned, otherwise its depth buffer is returned</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li>image or depth buffer</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.clearFloatSignal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Clears a double signal (removes it)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simClearFloatSignal(const char* signalName)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.clearFloatSignal(string signalName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.clearFloatSignal(string signalName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.clearInt32Signal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Clears an integer signal (removes it)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simClearInt32Signal(const char* signalName)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.clearInt32Signal(string signalName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.clearInt32Signal(string signalName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.clearStringSignal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Clears a string signal (removes it)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simClearStringSignal(const char* signalName)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.clearStringSignal(string signalName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.clearStringSignal(string signalName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.closeScene
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Closes current scene, and switches to another open scene. If there is no other open scene,
a new scene is then created. Can only be called from an <a href="../addOns.htm">add-on</a>,
or from the sanbox script, when called from within CoppeliaSim
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.loadScene
sim.saveScene
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCloseScene()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the current scene index.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.closeScene()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.closeScene()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: the current scene index.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.combineRgbImages
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Combines two RGB images
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.transformImage
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
bytes outImg = sim.combineRgbImages(bytes img1, list img1Res, bytes img2, list img2Res,
                                    int operation)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer outImg = sim.combineRgbImages(buffer img1, int[2] img1Res, buffer img2, int[2] img2Res,
                                     int operation)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>img1</strong>: input image 1, as succession of rgb values.</li>
<li><strong>img1Res</strong>: x/y resolution of image 1.</li>
<li><strong>img2</strong>: input image 2, as succession of rgb values.</li>
<li><strong>img2Res</strong>: x/y resolution of image 2.</li>
<li><strong>operation</strong>: <a href="../apiConstants.htm#imageCombination">operation</a> to be performed with the two input images.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li>output image as succession of rgb values.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.computeMassAndInertia
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Computes and applies the mass and inertia matrix for a shape, based on its convex  representation.
When calling this function while the simulation is running, one should then call
<a href="simResetDynamicObject.htm">sim.resetDynamicObject</a>, for the changes to take effect
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getShapeMass
sim.getShapeInertia
sim.convexDecompose
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simComputeMassAndInertia(int shapeHandle, double density))
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of shape</li>
<li><strong>density</strong>: the density expressed in kg/m^3</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the shape is not convex, otherwise 1.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.computeMassAndInertia(int shapeHandle, float density)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.computeMassAndInertia(int shapeHandle, float density)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of shape</li>
<li><strong>density</strong>: density expressed in kg/m^3</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the shape is not convex, otherwise 1</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.convexDecompose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Calculates the <a href="../convexDecomposition.htm">convex decomposition</a> of a
<a href="../shapes.htm">shape</a> using the HACD or V-HACD algorithms
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getQHull
sim.getDecimatedMesh
sim.ungroupShape
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simConvexDecompose(int shapeHandle, int options, const int* intParams, const double* floatParams)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape to operate on</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): the specified shape will be morphed into its convex decomposition. Otherwise, the convex decomposition will smply be added to the scene</li>
<li>bit1 set (2): specified convex decomposition parameters will be displayed in a dialog, allowing the user to modify them.</li>
<li>bit2 set (4): same convex decomposition parameters will be used as a previous call to this function. Only when this bit is set can the convex decomposition parameters be omitted.</li>
<li>bit3 set (8): HACD: extra points will be added when computing the concavity</li>
<li>bit4 set (16): HACD: faces points will be added when computing the concavity</li>
<li>bit5 (32): reserved. Do not set</li>
<li>bit6 (64): reserved. Do not set</li>
<li>bit7 set (128): the V-HACD algorithm ○will be used. If not set, the HACD algorithm will be used.</li>
<li>bit8 set (256): V-HACD: pca is enabled (default is disabled).</li>
<li>bit9 set (512): V-HACD: tetrahedron-based approximate convex decomposition. If not set, then the voxel-based approximate convex decomposition will be used (default).</li>
</ul>
</li>
<li><strong>intParams</strong>: 10 int values:
<ul>
<li>intParams[0]: HACD: the minimum number of clusters to be generated (e.g. 1)</li>
<li>intParams[1]: HACD: the targeted number of triangles of the decimated mesh (e.g. 500)</li>
<li>intParams[2]: HACD: the maximum number of vertices for each generated convex hull (e.g. 100)</li>
<li>intParams[3]: reserved. Set to 0</li>
<li>intParams[4]: reserved. Set to 0</li>
<li>intParams[5]: V-HACD: resolution (10000-64000000, 100000 is default).</li>
<li>intParams[6]: V-HACD: depth (1-32, 20 is default).</li>
<li>intParams[7]: V-HACD: plane downsampling (1-16, 4 is default).</li>
<li>intParams[8]: V-HACD: convex hull downsampling (1-16, 4 is default).</li>
<li>intParams[9]: V-HACD: max. number of vertices per convex hull (4-1024, 64 is default).</li>
</ul>
</li>
<li><strong>floatParams</strong>: 10 double values:
<ul>
<li>floatParams[0]: HACD: the maximum allowed concavity (e.g. 100.0)</li>
<li>floatParams[1]: HACD: the maximum allowed distance to get convex clusters connected (e.g. 30)</li>
<li>floatParams[2]: HACD: the threshold to detect small clusters. The threshold is expressed as a percentage of the total mesh surface (e.g. 0.25)</li>
<li>floatParams[3]: reserved. Set to 0.0</li>
<li>floatParams[4]: reserved. Set to 0.0</li>
<li>floatParams[5]: V-HACD: concavity (0.0-1.0, 0.0025 is default).</li>
<li>floatParams[6]: V-HACD: alpha (0.0-1.0, 0.05 is default).</li>
<li>floatParams[7]: V-HACD: beta (0.0-1.0, 0.05 is default).</li>
<li>floatParams[8]: V-HACD: gamma (0.0-1.0, 0.00125 is default).</li>
<li>floatParams[9]: V-HACD: min. volume per convex hull (0.0-0.01, 0.0001 is default).</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. Otherwise the handle of the new shape, or the handle of the original shape when morphing.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int shapeHandle = sim.convexDecompose(int shapeHandle, int options, list intParams, list floatParams)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int shapeHandle = sim.convexDecompose(int shapeHandle, int options, int[4] intParams,
                                      float[3] floatParams)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape to operate on</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): the specified shape will be morphed into its convex decomposition. Otherwise, the convex decomposition will smply be added to the scene</li>
<li>bit1 set (2): specified convex decomposition parameters will be displayed in a dialog, allowing the user to modify them.</li>
<li>bit2 set (4): same convex decomposition parameters will be used as a previous call to this function. Only when this bit is set can the convex decomposition parameters be omitted.</li>
<li>bit3 set (8): HACD: extra points will be added when computing the concavity</li>
<li>bit4 set (16): HACD: faces points will be added when computing the concavity</li>
<li>bit5 (32): reserved. Do not set</li>
<li>bit6 (64): reserved. Do not set</li>
<li>bit7 set (128): the V-HACD algorithm ○will be used. If not set, the HACD algorithm will be used.</li>
<li>bit8 set (256): V-HACD: pca is enabled (default is disabled).</li>
<li>bit9 set (512): V-HACD: tetrahedron-based approximate convex decomposition. If not set, then the voxel-based approximate convex decomposition will be used (default).</li>
</ul>
</li>
<li><strong>intParams</strong>: 10 int values:
<ul>
<li>intParams[0]: HACD: the minimum number of clusters to be generated (e.g. 1)</li>
<li>intParams[1]: HACD: the targeted number of triangles of the decimated mesh (e.g. 500)</li>
<li>intParams[2]: HACD: the maximum number of vertices for each generated convex hull (e.g. 100)</li>
<li>intParams[3]: reserved. Set to 0</li>
<li>intParams[4]: reserved. Set to 0</li>
<li>intParams[5]: V-HACD: resolution (10000-64000000, 100000 is default).</li>
<li>intParams[6]: V-HACD: depth (1-32, 20 is default).</li>
<li>intParams[7]: V-HACD: plane downsampling (1-16, 4 is default).</li>
<li>intParams[8]: V-HACD: convex hull downsampling (1-16, 4 is default).</li>
<li>intParams[9]: V-HACD: max. number of vertices per convex hull (4-1024, 64 is default).</li>
</ul>
</li>
<li><strong>floatParams</strong>: 10 double values:
<ul>
<li>floatParams[0]: HACD: the maximum allowed concavity (e.g. 100.0)</li>
<li>floatParams[1]: HACD: the maximum allowed distance to get convex clusters connected (e.g. 30)</li>
<li>floatParams[2]: HACD: the threshold to detect small clusters. The threshold is expressed as a percentage of the total mesh surface (e.g. 0.25)</li>
<li>floatParams[3]: reserved. Set to 0.0</li>
<li>floatParams[4]: reserved. Set to 0.0</li>
<li>floatParams[5]: V-HACD: concavity (0.0-1.0, 0.0025 is default).</li>
<li>floatParams[6]: V-HACD: alpha (0.0-1.0, 0.05 is default).</li>
<li>floatParams[7]: V-HACD: beta (0.0-1.0, 0.05 is default).</li>
<li>floatParams[8]: V-HACD: gamma (0.0-1.0, 0.00125 is default).</li>
<li>floatParams[9]: V-HACD: min. volume per convex hull (0.0-0.01, 0.0001 is default).</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the new shape, or the handle of the original shape when morphing</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.copyPasteObjects
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Copies and pastes objects
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.removeObjects
sim.removeModel
sim.saveModel
sim.loadModel
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCopyPasteObjects(int* objectHandles, int objectCount, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandles</strong>: array containing the handles of the objects to copy and paste. The same array will receive the copied object handles, with the same correspondency.</li>
<li><strong>objectCount</strong>: the number of handles contained in the objectHandles array.</li>
<li><strong>options</strong>: bit-coded. If bit0 is set (i.e. 1), then whole models will be copied. In that case, all specified objects should be flagged as <em>model base</em>. If bit1 is set (i.e. 2), then all child and customization scripts are stripped away. If bit2 is set (i.e. 4), then all object custom data is stripped away. If bit3 is set (i.e. 8), then all object references are stripped away. If bit4 is set (i.e. 16), then all textures are stripped away. If bit5 is set (i.e. 32), then model tags and DNA information is stripped away.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list copiedObjectHandles = sim.copyPasteObjects(list objectHandles, int options)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] copiedObjectHandles = sim.copyPasteObjects(int[] objectHandles, int options)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandles</strong>: array of object handles to copy and paste</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 is set (i.e. 1): whole models are copied. In that case, all specified objects should be flagged as <em>model base</em></li>
<li>bit1 is set (i.e. 2): all child and customization scripts are stripped away</li>
<li>bit2 is set (i.e. 4): all object custom data is stripped away</li>
<li>bit3 is set (i.e. 8): all object references are stripped away</li>
<li>bit4 is set (i.e. 16): all textures are stripped away</li>
<li>bit5 is set (i.e. 32): model tags and DNA information is stripped away</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>copiedObjectHandles</strong>: the duplicate object handles, where original and copy have the same location in their respective arrays</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simCopyStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Duplicates a stack object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCopyStack(int stackHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise the handle of the duplicated stack.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.copyTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Duplicates a table, i.e. makes a deep copy
<a href="../apiFunctions.htm#packing">packing/unpacking related functions</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#packing">packing/unpacking related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisLua ====================<
any[]/map copy = sim.copyTable(any[]/map original)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>original</strong>: the original table</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>copy</strong>: the duplicated table</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simCreateBuffer
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a buffer. The buffer needs to be released with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a> except otherwise explicitly specified.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
void* simCreateBuffer(int size)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>size</strong>: size of the buffer</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>buffer if operation was successful, nullptr otherwise</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createCollection
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a new <a href="../collections.htm">collection</a>. A collection created in a
<a href="../childScripts.htm">child script</a>, a <a href="../customizationScripts.htm">customization script</a> or in
the <a href="../mainScript.htm">main script</a> are automatically destroyed when the script ends
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#collections">functions related to collections</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreateCollectionEx(int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit 0 set (1): collection overrides collidable, measurable, detectable properties, and also the visibility state of its objects.</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the new collection.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int collectionHandle = sim.createCollection(int options)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int collectionHandle = sim.createCollection(int options = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit 0 set (1): collection overrides collidable, measurable, detectable properties, and also the visibility state of its objects.</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>collectionHandle</strong>: handle of the new collection</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createDummy
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a <a href="../dummies.htm">dummy</a>.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simCreateDummy(double size, const float* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>size</strong>: the dummy size</li>
<li><strong>reserved</strong>: set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the dummy</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int dummyHandle = sim.createDummy(float size)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int dummyHandle = sim.createDummy(float size)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>size</strong>: dummy size</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>dummyHandle</strong>: handle of the dummy</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createForceSensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a <a href="../forceSensors.htm">force sensor</a>.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simCreateForceSensor(int options, const int* intParams, const double* floatParams,
                         const double* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit 0 set (1): force threshold enabled</li>
<li>bit 1 set (2): torque threshold enabled</li>
</ul>
</li>
<li><strong>intParams (input)</strong>: 5 integer parameters:
<ul>
<li>intParams[0]: filter type (0=average, 1=median)</li>
<li>intParams[1]: value count the filter operates on</li>
<li>intParams[2]: number of consecutive threshold violation for the sensor to break</li>
<li>intParams[3]: reserved. Set to 0</li>
<li>intParams[4]: reserved. Set to 0</li>
</ul>
</li>
<li><strong>floatParams (input)</strong>: 5 floating point parameters:
<ul>
<li>floatParams[0]: sensor size</li>
<li>floatParams[1]: force threshold value</li>
<li>floatParams[2]: torque threshold value</li>
<li>floatParams[3]: reserved. Set to 0.0</li>
<li>floatParams[4]: reserved. Set to 0.0</li>
</ul>
</li>
<li><strong>reserved</strong>: set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the force sensor</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int sensorHandle = sim.createForceSensor(int options, list intParams, list floatParams)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int sensorHandle = sim.createForceSensor(int options, int[5] intParams, float[5] floatParams)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit 0 set (1): force threshold enabled</li>
<li>bit 1 set (2): torque threshold enabled</li>
</ul>
</li>
<li><strong>intParams</strong>: 5 integer parameters (indexing (i) starts from 0 for Python and 1 for Lua):
<ul>
<li>intParams[i+0]: filter type (0=average, 1=median)</li>
<li>intParams[i+1]: value count the filter operates on</li>
<li>intParams[i+2]: number of consecutive threshold violation for the sensor to break</li>
<li>intParams[i+3]: reserved. Set to 0</li>
<li>intParams[i+4]: reserved. Set to 0</li>
</ul>
</li>
<li><strong>floatParams</strong>: 5 floating point parameters (indexing (i) starts from 0 for Python and 1 for Lua):
<ul>
<li>floatParams[i+0]: sensor size</li>
<li>floatParams[i+1]: force threshold value</li>
<li>floatParams[i+2]: torque threshold value</li>
<li>floatParams[i+3]: reserved. Set to 0.0</li>
<li>floatParams[i+4]: reserved. Set to 0.0</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the force sensor</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createHeightfieldShape
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a heightfield <a href="../shapes.htm">shape</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.createPrimitiveShape
sim.createShape
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreateHeightfieldShape(int options, double shadingAngle, int xPointCount, int yPointCount,
                              double xSize, const double* heights)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit0 set (1): back faces are culled</li>
<li>bit1 set (2): overlay mesh is visible</li>
<li>bit2 set (4): a simple shape is generated instead of a heightfield</li>
<li>bit3 set (8): the heightfield is not respondable</li>
</ul>
</li>
<li><strong>shadingAngle</strong>: the shading angle</li>
<li><strong>xPointCount/yPointCount</strong>: the number of rows and lines of the heightfield.</li>
<li><strong>xSize</strong>: the length of the x side of the heightfield</li>
<li><strong>heights</strong>: a pointer to xPointCount*yPointCount height values.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the newly created shape</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int objectHandle = sim.createHeightfieldShape(int options, float shadingAngle, int xPointCount,
                                              int yPointCount, float xSize, list heights)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int objectHandle = sim.createHeightfieldShape(int options, float shadingAngle, int xPointCount,
                                              int yPointCount, float xSize, float[] heights)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit0 set (1): back faces are culled</li>
<li>bit1 set (2): overlay mesh is visible</li>
<li>bit2 set (4): a simple shape is generated instead of a heightfield</li>
<li>bit3 set (8): the heightfield is not respondable</li>
</ul>
</li>
<li><strong>shadingAngle</strong>: shading angle</li>
<li><strong>xPointCount/yPointCount</strong>: number of rows and lines of the heightfield.</li>
<li><strong>xSize</strong>: length of the x side of the heightfield</li>
<li><strong>heights</strong>: array of xPointCount*yPointCount height values</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the newly created shape</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createJoint
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a <a href="../joints.htm">joint</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointInterval
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreateJoint(int jointType, int jointMode, int options, const double* sizes,
                   const double* reservedA, const double* reservedB)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>jointType</strong>:
<ul>
<li>sim.joint_revolute_subtype</li>
<li>sim.joint_prismatic_subtype</li>
<li>sim.joint_spherical_subtype</li>
</ul>
</li>
<li><strong>jointMode</strong>: a <a href="../apiConstants.htm#jointModes">joint mode</a></li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>sizes</strong>: pointer to 2 values indicating the joint length and diameter. Can be nullptr for default values</li>
<li><strong>reservedA </strong>+<strong> reservedB</strong>: set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the joint</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int jointHandle = sim.createJoint(int jointType, int jointMode, int options, list sizes = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int jointHandle = sim.createJoint(int jointType, int jointMode, int options, float[2] sizes = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointType</strong>:
<ul>
<li>sim.joint_revolute_subtype</li>
<li>sim.joint_prismatic_subtype</li>
<li>sim.joint_spherical_subtype</li>
</ul>
</li>
<li><strong>jointMode</strong>: a <a href="../apiConstants.htm#jointModes">joint mode</a></li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>sizes</strong>: array of 2 values indicating the joint length and diameter. Can be None/nil for default values</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createOctree
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates an empty <a href="../octrees.htm">OC tree</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.removeObjects
<a href="../apiFunctions.htm#octree">OC tree related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreateOctree(double voxelSize, int options, double pointSize, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>voxelSize</strong>: size of the voxels</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): voxels have random colors</li>
<li>bit1 set (2): show OC tree structure</li>
<li>bit2 set (4): show points instead of voxels</li>
<li>bit3 set (8): reserved. keep unset</li>
<li>bit4 set (16): color is emissive</li>
</ul>
</li>
<li><strong>pointSize</strong>: the size of the points in pixels, when voxels are rendered with points</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the OC tree</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int handle = sim.createOctree(float voxelSize, int options, float pointSize)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int handle = sim.createOctree(float voxelSize, int options, float pointSize)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>voxelSize</strong>: size of the voxels</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): voxels have random colors</li>
<li>bit1 set (2): show OC tree structure</li>
<li>bit2 set (4): show points instead of voxels</li>
<li>bit3 set (8): reserved. keep unset</li>
<li>bit4 set (16): color is emissive</li>
</ul>
</li>
<li><strong>pointSize</strong>: the size of the points in pixels, when voxels are rendered with points</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the OC tree</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createPath
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a <a href="../paths.htm">path</a>.
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
int pathHandle = sim.createPath(list ctrlPts, int options = 0, int subdiv = 100,
                                float smoothness = 1.0, int orientationMode = 0,
                                list upVector = [0, 0, 1])
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int pathHandle = sim.createPath(float[] ctrlPts, int options = 0, int subdiv = 100,
                                float smoothness = 1.0, int orientationMode = 0,
                                float[3] upVector = {0, 0, 1})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>ctrlPts</strong>: control points, specified in row-major order, with <em>[x y z qx qy qz qw]</em> values for each path point</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): path is hidden during simulation</li>
<li>bit1 set (2): path is closed</li>
<li>bit2 set (4): generates an extruded shape</li>
<li>bit3 set (8): show individual path points</li>
<li>bit4 set (16): the path points' orientation is computed according to the orientationMode below</li>
</ul>
</li>
<li><strong>subdiv</strong>: number of individual path points</li>
<li><strong>smoothness</strong>: value between 0.0 (linear interpolation) and 1.0 (100% Bezier interpolation)</li>
<li><strong>orientationMode</strong>: value specifiying how the individual path points are oriented along the path, if bit16 of options is set: 0: x along path, y is up, 1: x along path, z is up, 2: y along path, x is up, 3: y along path, z is up, 4: z along path, x is up, 5: z along path, y is up</li>
<li><strong>upVector</strong>: up vector, used for generating an extruded shape and for computing individual path point orientations</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pathHandle</strong>: handle of the created path object</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createPointCloud
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates an empty <a href="../pointClouds.htm">point cloud</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.removeObjects
<a href="../apiFunctions.htm#pointCloud">point cloud functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreatePointCloud(double maxVoxelSize, int maxPtCntPerVoxel, int options, double pointSize,
                        void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>maxVoxelSize</strong>: maximum size of the OC tree voxels containing points</li>
<li><strong>maxPtCntPerVoxel</strong>: maximum number of points allowed in a same OC tree voxel</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): points have random colors</li>
<li>bit1 set (2): show OC tree structure</li>
<li>bit2 set (4): reserved. keep unset</li>
<li>bit3 set (8): do not use an OC tree structure. When enabled, point cloud operations are limited, and point clouds will not be <a href="../collidableObjects.htm">collidable</a>, <a href="../measurableObjects.htm">measurable</a> or <a href="../detectableObjects.htm">detectable</a> anymore, but adding points will be much faster</li>
<li>bit4 set (16): color is emissive</li>
</ul>
</li>
<li><strong>pointSize</strong>: size of the points, in pixels</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the point cloud</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int handle = sim.createPointCloud(float maxVoxelSize, int maxPtCntPerVoxel, int options,
                                  float pointSize)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int handle = sim.createPointCloud(float maxVoxelSize, int maxPtCntPerVoxel, int options,
                                  float pointSize)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>maxVoxelSize</strong>: maximum size of the OC tree voxels containing points</li>
<li><strong>maxPtCntPerVoxel</strong>: maximum number of points allowed in a same OC tree voxel</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): points have random colors</li>
<li>bit1 set (2): show OC tree structure</li>
<li>bit2 set (4): reserved. keep unset</li>
<li>bit3 set (8): do not use an OC tree structure. When enabled, point cloud operations are limited, and point clouds will not be <a href="../collidableObjects.htm">collidable</a>, <a href="../measurableObjects.htm">measurable</a> or <a href="../detectableObjects.htm">detectable</a> anymore, but adding points will be much faster</li>
<li>bit4 set (16): color is emissive</li>
</ul>
</li>
<li><strong>pointSize</strong>: size of the points, in pixels</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the point cloud</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createPrimitiveShape
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a primitive shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.createShape
sim.createHeightfieldShape
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreatePrimitiveShape(int primitiveType, const double* sizes, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>primitiveType</strong>: the <a href="../apiConstants.htm#primitiveTypes">primitive type</a> of the shape</li>
<li><strong>sizes</strong>: 3 values indicating the size of the shape</li>
<li><strong>options</strong>: Bit-coded:
<ul>
<li>bit0 is set (1): backfaces are culled</li>
<li>bit1 is set (2): edges appear sharp</li>
<li>bit2 is set (4): cylinder has open ends</li>
<li>bit3 is set (8): the primitive shape is not registered as such by CoppeliaSim, but rather as a random (maybe convex) shape</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the newly created shape</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int shapeHandle = sim.createPrimitiveShape(int primitiveType, list sizes, int options = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int shapeHandle = sim.createPrimitiveShape(int primitiveType, float[3] sizes, int options = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>primitiveType</strong>: the <a href="../apiConstants.htm#primitiveTypes">primitive type</a> of the shape</li>
<li><strong>sizes</strong>: 3 values indicating the size of the shape</li>
<li><strong>options</strong>: Bit-coded:
<ul>
<li>bit0 is set (1): backfaces are culled</li>
<li>bit1 is set (2): edges appear sharp</li>
<li>bit2 is set (4): cylinder has open ends</li>
<li>bit3 is set (8): the primitive shape is not registered as such by CoppeliaSim, but rather as a random (maybe convex) shape</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the newly created shape</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createProximitySensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a <a href="../proximitySensors.htm">proximity sensor</a>
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simCreateProximitySensor(int sensorType, int subType, int options, const int* intParams,
                             const double* floatParams, const double* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorType</strong>: desired <a href="../apiConstants.htm#sceneObjectSubTypes">proximity sensor type</a> (e.g. sim.proximitysensor_cone_subtype)</li>
<li><strong>subType</strong>: deprecated. Set to 16</li>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit0 set (1): the sensor will be explicitly handled</li>
<li>bit1 set (2): reserved. Set to 0</li>
<li>bit2 set (4): the detection volume is not shown</li>
<li>bit3 set (8): front faces are not detected</li>
<li>bit4 set (16): back faces are not detected</li>
<li>bit5 set (32): fast detection (i.e. not exact detection)</li>
<li>bit6 set (64): the normal of the detected surface with the detection ray will have to lie below a specified threshold angle</li>
<li>bit8 set (256): smallest distance threshold will be active</li>
<li>bit9 set (512): randomized detection (only with ray-type proximity sensors)</li>
</ul>
</li>
<li><strong>intParams (input)</strong>: 8 integer parameters:
<ul>
<li>intParams[0]: face count (volume description)</li>
<li>intParams[1]: face count far (volume description)</li>
<li>intParams[2]: subdivisions (volume description)</li>
<li>intParams[3]: subdivisions far (volume description)</li>
<li>intParams[4]: randomized detection, sample count per reading</li>
<li>intParams[5]: randomized detection, individual ray detection count for triggering</li>
<li>intParams[6]: reserved. Set to 0</li>
<li>intParams[7]: reserved. Set to 0</li>
</ul>
</li>
<li><strong>floatParams (input)</strong>: 15 floating point parameters:
<ul>
<li>floatParams[0]: offset (volume description)</li>
<li>floatParams[1]: range (volume description)</li>
<li>floatParams[2]: x size (volume description)</li>
<li>floatParams[3]: y size (volume description)</li>
<li>floatParams[4]: x size far (volume description)</li>
<li>floatParams[5]: y size far (volume description)</li>
<li>floatParams[6]: inside gap (volume description)</li>
<li>floatParams[7]: radius (volume description)</li>
<li>floatParams[8]: radius far (volume description)</li>
<li>floatParams[9]: angle (volume description)</li>
<li>floatParams[10]: threshold angle for limited angle detection (see bit 6 above)</li>
<li>floatParams[11]: smallest detection distance (see bit 8 above)</li>
<li>floatParams[12]: sensing point size</li>
<li>floatParams[13]: reserved. Set to 0.0</li>
<li>floatParams[14]: reserved. Set to 0.0</li>
</ul>
</li>
<li><strong>reserved</strong>: set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the force sensor</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int sensorHandle = sim.createProximitySensor(int sensorType, int subType, int options,
                                             list intParams, list floatParams)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int sensorHandle = sim.createProximitySensor(int sensorType, int subType, int options,
                                             int[8] intParams, float[15] floatParams)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorType</strong>: desired <a href="../apiConstants.htm#sceneObjectSubTypes">proximity sensor type</a> (e.g. sim.proximitysensor_cone_subtype)</li>
<li><strong>subType</strong>: deprecated. Set to 16</li>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit0 set (1): the sensor will be explicitly handled</li>
<li>bit1 set (2): reserved. Set to 0</li>
<li>bit2 set (4): the detection volume is not shown</li>
<li>bit3 set (8): front faces are not detected</li>
<li>bit4 set (16): back faces are not detected</li>
<li>bit5 set (32): fast detection (i.e. not exact detection)</li>
<li>bit6 set (64): the normal of the detected surface with the detection ray will have to lie below a specified threshold angle</li>
<li>bit8 set (256): smallest distance threshold will be active</li>
<li>bit9 set (512): randomized detection (only with ray-type proximity sensors)</li>
</ul>
</li>
<li><strong>intParams</strong>: 8 integer parameters (indexing (i) starts from 0 for Python and 1 for Lua):
<ul>
<li>intParams[i+0]: face count (volume description)</li>
<li>intParams[i+1]: face count far (volume description)</li>
<li>intParams[i+2]: subdivisions (volume description)</li>
<li>intParams[i+3]: subdivisions far (volume description)</li>
<li>intParams[i+4]: randomized detection, sample count per reading</li>
<li>intParams[i+5]: randomized detection, individual ray detection count for triggering</li>
<li>intParams[i+6]: reserved. Set to 0</li>
<li>intParams[i+7]: reserved. Set to 0</li>
</ul>
</li>
<li><strong>floatParams</strong>: 15 floating point parameters (indexing (i) starts from 0 for Python and 1 for Lua):
<ul>
<li>floatParams[i+0]: offset (volume description)</li>
<li>floatParams[i+1]: range (volume description)</li>
<li>floatParams[i+2]: x size (volume description)</li>
<li>floatParams[i+3]: y size (volume description)</li>
<li>floatParams[i+4]: x size far (volume description)</li>
<li>floatParams[i+5]: y size far (volume description)</li>
<li>floatParams[i+6]: inside gap (volume description)</li>
<li>floatParams[i+7]: radius (volume description)</li>
<li>floatParams[i+8]: radius far (volume description)</li>
<li>floatParams[i+9]: angle (volume description)</li>
<li>floatParams[i+10]: threshold angle for limited angle detection (see bit 6 above)</li>
<li>floatParams[i+11]: smallest detection distance (see bit 8 above)</li>
<li>floatParams[i+12]: sensing point size</li>
<li>floatParams[i+13]: reserved. Set to 0.0</li>
<li>floatParams[i+14]: reserved. Set to 0.0</li>
</ul>
</li>
<li><strong>reserved</strong>: set to nullptr</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the force sensor</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createShape
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a mesh shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.createPrimitiveShape
sim.createHeightfieldShape
sim.getShapeMesh
sim.importMesh
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreateShape(int options, double shadingAngle, const double* vertices, int verticesSize,
                   const int* indices, int indicesSize, const double* normals,
                   const double* textureCoordinates, const unsigned char* texture,
                   const int* textureResolution)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>options</strong>: Bit-coded:
<ul>
<li>if bit0 is set (1), backfaces are culled</li>
<li>If bit1 is set (2), edges are visible</li>
<li>If bit2 is set (4), adjacent texture pixels are not interpolated</li>
<li>If bit3 is set (8), texture is applied as a decal</li>
<li>If bit4 is set (16), texture is RGBA, otherwise it is RGB</li>
<li>If bit5 is set (32), texture is horizontally flipped</li>
<li>If bit6 is set (64), texture is vertically flipped</li>
</ul>
</li>
<li><strong>shadingAngle</strong>: shading angle</li>
<li><strong>vertices</strong>: array of vertices</li>
<li><strong>verticesSize</strong>: size of the vertice array</li>
<li><strong>indices</strong>: array of indices</li>
<li><strong>indicesSize</strong>: size of the indice array</li>
<li><strong>normals</strong>: optional array of normal vectors. Has to be 3*indicesSize in length</li>
<li><strong>textureCoordinates</strong>: optional array of texture coordinates. Has to be 2*indicesSize in length</li>
<li><strong>texture</strong>: optional texture, specified as RGB or RGBA</li>
<li><strong>textureResolution</strong>: resolution of the specified texture</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the newly created shape</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int objectHandle = sim.createShape(int options, float shadingAngle, list vertices, list indices,
                                   list normals = None, list textureCoordinates = None,
                                   string/bytes texture = None, list textureResolution = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int objectHandle = sim.createShape(int options, float shadingAngle, float[] vertices, int[] indices,
                                   float[] normals = nil, float[] textureCoordinates = nil,
                                   string/buffer texture = nil, int[2] textureResolution = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>options</strong>: Bit-coded:
<ul>
<li>if bit0 is set (1), backfaces are culled</li>
<li>If bit1 is set (2), edges are visible</li>
<li>If bit2 is set (4), adjacent texture pixels are not interpolated</li>
<li>If bit3 is set (8), texture is applied as a decal</li>
<li>If bit4 is set (16), texture is RGBA, otherwise it is RGB</li>
<li>If bit5 is set (32), texture is horizontally flipped</li>
<li>If bit6 is set (64), texture is vertically flipped</li>
</ul>
</li>
<li><strong>shadingAngle</strong>: shading angle</li>
<li><strong>vertices</strong>: array of vertices</li>
<li><strong>indices</strong>: array of indices</li>
<li><strong>normals</strong>: optional array of normal vectors. Has to be 3 * len(indices) in length</li>
<li><strong>textureCoordinates</strong>: optional array of texture coordinates. Has to be 2 * len(indices) in length</li>
<li><strong>texture</strong>: optional texture, specified as RGB or RGBA</li>
<li><strong>textureResolution</strong>: resolution of the specified texture</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the newly created shape</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simCreateStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a stack object that is mainly used to exchange complex data in an easy way with scripts
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simReleaseStack
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreateStack()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise a stack handle.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createTexture
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a planar shape, that will be textured with a new, or imported texture
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getTextureId
sim.readTexture
sim.writeTexture
sim.setShapeTexture
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simCreateTexture(const char* fileName, int options, const double* planeSizes,
                     const double* scalingUV, const double* xy_g, int fixedResolution,
                     int* textureId, int* resolution, const void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>fileName</strong>: filename of the texure to import, or an empty string if you wish to create a new texture.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li><strong>bit0</strong> set (1): do not interpolate adjacent color patches.</li>
<li><strong>bit1</strong> set (2): apply the texture in decal-mode.</li>
<li><strong>bit2</strong> set (4): repeat the texture along the U direction.</li>
<li><strong>bit3</strong> set (8): repeat the texture along the V direction.</li>
</ul>
</li>
<li><strong>planeSizes</strong>: a pointer to 2 values: the dimensions of the planar shape that will be generated. Can be nullptr for default dimensions.</li>
<li><strong>scalingUV</strong>: a pointer to 2 values: the desired scaling of the texture, along the U and V directions. Can be nullptr for default scalings.</li>
<li><strong>xy_g</strong>: a pointer to 3 values: the texture x/y shift, and the texture gamma-rotation. Can be nullptr for default shift/rotation values.</li>
<li><strong>fixedResolution</strong>: 0 to import the shape with its original resolution. Otherwise, specify a power of 2 value which will be the maximum texture resolution (the texture will also be applied a power of 2 resolution).</li>
<li><strong>resolution</strong>: a pointer to 2 values representing the desired texture resolution when creating a new texture. The same pointer is used to return the effective resolution of the created/imported texture.</li>
<li><strong>textureId</strong>: a pointer to an integer that will be used to return the new texture ID. If a same texture is already present, the old texture ID will be returned. Can be nullptr.</li>
<li><strong>reserved</strong>: reserved. Set to nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise the object handle of the created planar shape.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int shape, int id, list res = sim.createTexture(string fileName, int options, list planeSizes = None,
                                                list scalingUV = None, list xy_g = None,
                                                int fixedResolution = 0, list resolution = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int shape, int id, int[2] res = sim.createTexture(string fileName, int options, float[2] planeSizes = nil,
                                                  float[2] scalingUV = nil, float[2] xy_g = nil,
                                                  int fixedResolution = 0, int[2] resolution = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>fileName</strong>: filename of the texure to import, or an empty string if you wish to create a new texture.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li><strong>bit0</strong> set (1): do not interpolate adjacent color patches.</li>
<li><strong>bit1</strong> set (2): apply the texture in decal-mode.</li>
<li><strong>bit2</strong> set (4): repeat the texture along the U direction.</li>
<li><strong>bit3</strong> set (8): repeat the texture along the V direction.</li>
</ul>
</li>
<li><strong>planeSizes</strong>: array of 2 values: the dimensions of the planar shape that will be generated. Can be None/nil for default dimensions.</li>
<li><strong>scalingUV</strong>: array of 2 values: the desired scaling of the texture, along the U and V directions. Can be None/nil for default scalings.</li>
<li><strong>xy_g</strong>: array of 3 values: the texture x/y shift, and the texture gamma-rotation. Can be None/nil for default shift/rotation values.</li>
<li><strong>fixedResolution</strong>: 0 to import the shape with its original resolution. Otherwise, specify a power of 2 value which will be the maximum texture resolution (the texture will also be applied a power of 2 resolution).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>shape</strong>: handle of the created planar shape</li>
<li><strong>id</strong>: new texture ID. If a same texture is already present, the old texture ID will be returned</li>
<li><strong>res</strong>: the effective texture resolution</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.createVisionSensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates a <a href="../visionSensors.htm">vision sensor</a>.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simCreateVisionSensor(int options, const int* intParams, const double* floatParams,
                          const double* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit 0 set (1): the sensor will be explicitly handled</li>
<li>bit 1 set (2): the sensor will be in perspective operation mode</li>
<li>bit 2 set (4): the view frustum will not be shown</li>
<li>bit 3 set (8): reserved. Set to 0</li>
<li>bit 4 set (16): the sensor will be passive (use an external image)</li>
<li>bit 5 set (32): the sensor will use local lights</li>
<li>bit 6 set (64): the sensor will not render any fog</li>
<li>bit 7 set (128): the sensor will use a specific color for default background (i.e. null pixels)</li>
</ul>
</li>
<li><strong>intParams (input)</strong>: 4 integer parameters:
<ul>
<li>intParams[0]: sensor resolution x</li>
<li>intParams[1]: sensor resolution y</li>
<li>intParams[2]: reserved. Set to 0</li>
<li>intParams[3]: reserved. Set to 0</li>
</ul>
</li>
<li><strong>floatParams (input)</strong>: 11 floating point parameters:
<ul>
<li>floatParams[0]: near clipping plane</li>
<li>floatParams[1]: far clipping plane</li>
<li>floatParams[2]: view angle / ortho view size</li>
<li>floatParams[3]: sensor size x</li>
<li>floatParams[4]: reserved. Set to 0.0</li>
<li>floatParams[5]: reserved. Set to 0.0</li>
<li>floatParams[6]: null pixel red-value</li>
<li>floatParams[7]: null pixel green-value</li>
<li>floatParams[8]: null pixel blue-value</li>
<li>floatParams[9]: reserved. Set to 0.0</li>
<li>floatParams[10]: reserved. Set to 0.0</li>
</ul>
</li>
<li><strong>reserved</strong>: set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the force sensor</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int sensorHandle = sim.createVisionSensor(int options, list intParams, list floatParams)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int sensorHandle = sim.createVisionSensor(int options, int[4] intParams, float[11] floatParams)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>options</strong>: bit-coded options:
<ul>
<li>bit 0 set (1): sensor will be explicitly handled</li>
<li>bit 1 set (2): sensor will be in perspective operation mode</li>
<li>bit 2 set (4): view frustum will not be shown</li>
<li>bit 3 set (8): reserved. Set to 0</li>
<li>bit 4 set (16): sensor will be passive (use an external image)</li>
<li>bit 5 set (32): sensor will use local lights</li>
<li>bit 6 set (64): sensor will not render any fog</li>
<li>bit 7 set (128): sensor will use a specific color for default background (i.e. null pixels)</li>
</ul>
</li>
<li><strong>intParams</strong>: 4 integer parameters (indexing (i) starts from 0 for Python and 1 for Lua):
<ul>
<li>intParams[i+0]: sensor resolution x</li>
<li>intParams[i+1]: sensor resolution y</li>
<li>intParams[i+2]: reserved. Set to 0</li>
<li>intParams[i+3]: reserved. Set to 0</li>
</ul>
</li>
<li><strong>floatParams: 11 floating point parameters (indexing (i) starts from 0 for Python and 1 for Lua):
<ul>
<li>floatParams[i+0]: near clipping plane</li>
<li>floatParams[i+1]: far clipping plane</li>
<li>floatParams[i+2]: view angle / ortho view size</li>
<li>floatParams[i+3]: sensor size x</li>
<li>floatParams[i+4]: reserved. Set to 0.0</li>
<li>floatParams[i+5]: reserved. Set to 0.0</li>
<li>floatParams[i+6]: null pixel red-value</li>
<li>floatParams[i+7]: null pixel green-value</li>
<li>floatParams[i+8]: null pixel blue-value</li>
<li>floatParams[i+9]: reserved. Set to 0.0</li>
<li>floatParams[i+10]: reserved. Set to 0.0</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the force sensor</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simDebugStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Prints the content of the specified stack to the console
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simDebugStack(int stackHandle, int cIndex)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>cIndex</strong>: the zero-based index of the stack location to print, or -1 to print the full stack.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.destroyCollection
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes a <a href="../collections.htm">collection</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#collections">functions related to collections</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simDestroyCollection(int collectionHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>collectionHandle</strong>: handle of the collection to remove</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.destroyCollection(int collectionHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.destroyCollection(int collectionHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>collectionHandle</strong>: handle of the collection to remove</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.destroyGraphCurve
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Destroys a graph stream or curve
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#graphs">functions related to graphs</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simDestroyGraphCurve(int graphHandle, int curveId)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>curveId</strong>: the id of the stream or curve, -1 to remove all streams/curves</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.destroyGraphCurve(int graphHandle, int curveId)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.destroyGraphCurve(int graphHandle, int curveId)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>curveId</strong>: id of the stream or curve, -1 to remove all streams/curves</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simDoesFileExist
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Indicates whether a file exists.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simDoesFileExist(const char* filename)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>filename</strong>: The filename extension is required</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 if the filename exists, 0 if it does not exist, or -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.duplicateGraphCurveToStatic
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Duplicates a graph stream or curve, and freezes it
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#graphs">functions related to graphs</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simDuplicateGraphCurveToStatic(int graphHandle, int curveId, const char* staticCurveName)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>curveId</strong>: the id of the stream or curve</li>
<li><strong>staticCurveName</strong>: name of the new static stream/curve</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the id of the created static stream or curve</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int staticCurveId = sim.duplicateGraphCurveToStatic(int graphHandle, int curveId,
                                                    string staticCurveName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int staticCurveId = sim.duplicateGraphCurveToStatic(int graphHandle, int curveId,
                                                    string staticCurveName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>curveId</strong>: id of the stream or curve</li>
<li><strong>staticCurveName</strong>: name of the new static stream/curve</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>staticCurveId</strong>: id of the created static stream or curve</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.executeScriptString
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Executes some code in a specific script (from a <a href="../plugins.htm">plugin</a>, 
<a href="../mainClientApplication.htm">the main client application</a>, or from another script).
The target script must be initialized for this call to succeed, e.g. when calling
<a href="../simulationScripts.htm">simulation scripts</a>, then simulation must be running
<br><br>
Data exchange between a plugin and a script happens via a <a href="../apiFunctions.htm#stacks">stack</a>. Reading and writing arguments from/to the stack gives you a maximum of flexibility, and you wil be able to exchange also complex data structures. But it can also be tedious and error prone. Use instead the helper classes located in <em>programming/</em><em>include/simStack</em>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.callScriptFunction
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simExecuteScriptString(int scriptHandle, const char* stringToExecute, int stackId)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: the handle of the script</li>
<li><strong>stringToExecute</strong>: a string representing the  code to execute in the specified script</li>
<li><strong>stackId</strong>: 0 (for no stack) or a <a href="simCreateStack_cpp.htm">stack handle</a>. The stack holds possible out values. See also the <a href="../apiFunctions.htm#stacks">available stack functions</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, executionResult = sim.executeScriptString(string stringToExecute, int scriptHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, executionResult = sim.executeScriptString(string stringToExecute, int scriptHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>stringToExecute</strong>: a string representing the code to execute in the specified script. An optional @python or @lua can be appended, to force a specific language</li>
<li><strong>scriptHandle</strong>: handle of the script</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 or 1</li>
<li><strong>executionResult</strong>: return value of the executed code</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.exportMesh
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Exports a mesh to a file
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.importMesh
sim.getShapeMesh
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simExportMesh(int fileformat, const char* pathAndFilename, int options, double scalingFactor,
                  int elementCount, double** vertices, const int* verticesSizes, int** indices,
                  const int* indicesSizes, double** reserved, char** names)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>fileformat</strong>: the fileformat to export to:
<ul>
<li>0: OBJ format</li>
<li>3: TEXT STL format</li>
<li>4: BINARY STL format</li>
<li>5: COLLADA format</li>
<li>6: TEXT PLY format</li>
<li>7: BINARY PLY format</li>
</ul>
</li>
<li><strong>pathAndFilename</strong>: the location of the file to create.</li>
<li><strong>options</strong>: keep at 0</li>
<li><strong>scalingFactor</strong>: the scaling factor to apply to the vertices to export</li>
<li><strong>elementCount</strong>: the number of meshes</li>
<li><strong>vertices</strong>: an array to vertice arrays. See the example below</li>
<li><strong>verticesSizes</strong>: an array indicating the individual vertice array sizes. See the example below</li>
<li><strong>indices</strong>: an array to indice arrays. See the example below</li>
<li><strong>indicesSizes</strong>: an array indicating the individual indice array sizes. See the example below</li>
<li><strong>reserved</strong>: reserved for future extensions. Keep at nullptr.</li>
<li><strong>names</strong>: Keep at nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiMoreCpp ====================<
<h3>Example</h3>
<code class="hljs language-c++ coppelia-coppeliasim-plugin">// Exports all shapes in the scene
int shapeCount = 0;
while (simGetObjects(shapeCount++, sim.object_shape_type) != -1);
shapeCount--;
double** vertices = new double*[shapeCount];
int* verticesSizes = new int[shapeCount];
int** indices = new int*[shapeCount];
int* indicesSizes = new int[shapeCount];
int index = 0;
while (true)
{
    int shapeHandle = simGetObjects(index++, sim.object_shape_type);
    if (shapeHandle &#60; 0)
        break;
    double* vert;
    int vertS;
    int* ind;
    int indS;
    simGetShapeMesh(shapeHandle, &vert, &vertS, &ind, &indS, nullptr);
    vertices[index - 1] = vert;
    verticesSizes[index - 1] = vertS;
    indices[index - 1] = ind;
    indicesSizes[index - 1] = indS;
    double m[12];
    simGetObjectMatrix(shapeHandle, -1, m);
    for (int i = 0; i &#60; vertS / 3; i++)
    {
        double v[3]={vert[3 * i + 0], vert[3 * i + 1], vert[3 * i + 2]};
        simTransformVector(m, v);
        vert[3 * i + 0] = v[0];
        vert[3 * i + 1] = v[1];
        vert[3 * i + 2] = v[2];
    }
}

simExportMesh(0, "d:\\example.obj", 0, 1, shapeCount, vertices,
                 verticesSizes, indices, indicesSizes, nullptr, nullptr);
for (int i = 0; i &#60; shapeCount; i++)
{
    simReleaseBuffer((char*)vertices[i]);
    simReleaseBuffer((char*)indices[i]);
}

delete[] vertices;
delete[] verticesSizes;
delete[] indices;
delete[] indicesSizes;</code>
==================== apiMoreCpp ====================>

==================== apiSynopsisPython ====================<
sim.exportMesh(int fileformat, string pathAndFilename, int options, float scalingFactor,
               list vertices, list indices)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.exportMesh(int fileformat, string pathAndFilename, int options, float scalingFactor,
               float[] vertices, int[] indices)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>fileformat</strong>: the fileformat to export to:
<ul>
<li>0: OBJ format</li>
<li>3: TEXT STL format</li>
<li>4: BINARY STL format</li>
<li>5: COLLADA format</li>
<li>6: TEXT PLY format</li>
<li>7: BINARY PLY format</li>
</ul>
</li>
<li><strong>pathAndFilename</strong>: the location of the file to create.</li>
<li><strong>options</strong>: keep at 0</li>
<li><strong>scalingFactor</strong>: the scaling factor to apply to the vertices to export</li>
<li><strong>vertices</strong>: an array of vertice arrays. See the example below</li>
<li><strong>indices</strong>: an array of indice arrays. See the example below</li>
</code>
</ul>
==================== apiInputPythonLua ====================>

==================== apiMorePythonLua ====================<
<h3>Example</h3>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

-- Exports all shapes in the scene
local allVertices = {}
local allIndices = {}
local shapeIndex = 0
while true do
    local h = sim.getObjects(shapeIndex, sim.object_shape_type)
    if h &#60; 0 then
        break
    end
    shapeIndex = shapeIndex + 1
    local vertices, indices = sim.getShapeMesh(h)
    local m = sim.getObjectMatrix(h)
    for i = 1, #vertices // 3, 1 do
        local v = {vertices[3 * (i - 1) +1], vertices[3 * (i - 1) + 2], vertices[3 * (i - 1) + 3]}
        v = sim.multiplyVector(m, v)
        vertices[3 * (i - 1) + 1] = v[1]
        vertices[3 * (i - 1) + 2] = v[2]
        vertices[3 * (i - 1) + 3] = v[3]
    end
    table.insert(allVertices, vertices)
    table.insert(allIndices, indices)
end

if #allVertices &gt; 0 then
    sim.exportMesh(0, "d:\\example.obj", 0, 1, allVertices, allIndices)
end</code>
==================== apiMorePythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.floatingViewAdd
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds a floating view to current page
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.floatingViewRemove
sim.adjustView
sim.cameraFitToView
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simFloatingViewAdd(double posX, double posY, double sizeX, double sizeY, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>posX &amp; posY</strong>: relative position of the center of the floating view. Accepted values are between 0 and 1.</li>
<li><strong>sizeX &amp; sizeY</strong>: relative size of the floating view. Accepted values are between 0 and 1.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1)=double click allows swapping the floating view with the main view</li>
<li>bit1 set (2)=the floating view doesn't have a close button</li>
<li>bit2 set (4)=the floating view cannot be shifted</li>
<li>bit3 set (8)=the floating view cannot be resized</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>Handle of the floating view, or -1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int floatingViewHandle = sim.floatingViewAdd(float posX, float posY, float sizeX, float sizeY,
                                             int options)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int floatingViewHandle = sim.floatingViewAdd(float posX, float posY, float sizeX, float sizeY,
                                             int options)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>posX &amp; posY</strong>: relative position of the center of the floating view. Accepted values are between 0.0 and 1.0</li>
<li><strong>sizeX &amp; sizeY</strong>: relative size of the floating view. Accepted values are between 0.0 and 1.0</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): double click allows swapping the floating view with the main view</li>
<li>bit1 set (2): the floating view doesn't have a close button</li>
<li>bit2 set (4): the floating view cannot be shifted</li>
<li>bit3 set (8): the floating view cannot be resized</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>floatingViewHandle</strong>: handle of the floating view</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.floatingViewRemove
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes a floating view previously added with <a href="simFloatingViewAdd.htm">sim.floatingViewAdd</a>.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simFloatingViewRemove(int floatingViewHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>floatingViewHandle</strong>: handle of the floating view to be removed</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the floating view could not be found (e.g. because closed by the user), or 1 if the floating view was closed.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.floatingViewRemove(int floatingViewHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.floatingViewRemove(int floatingViewHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>floatingViewHandle</strong>: handle of the floating view to be removed</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the floating view could not be found (e.g. because closed by the user), or 1 if the floating view was closed.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.generateShapefromPath
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Generates an extrusion shape from a path
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#paths">path related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGenerateShapeFromPath(const double* path, int pathSize, const double* section,
                             int sectionSize, int options, const double* upVector, double reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>path</strong>: path, specified in row-major order, with [x y z qx qy qz qw] values for each path point.  The orientation parts for each path point are ignored if the two first bits of <strong>options</strong> are zero.</li>
<li><strong>pathSize</strong>: size/length of the path pointer</li>
<li><strong>section</strong>: extrusion profile, with x/y pairs, e.g. [x1 y1 x2 y2 ... xn yn]. If the first and last pair overlap, the section is closed</li>
<li><strong>sectionSize</strong>: size/length of the section pointer</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0-bit1: 0 = upVector is <strong>upVector</strong>, 1 = upVector is the x-axis of the path point frame, 2 = upVector is the y-axis of the path point frame, 3 = upVector is the z-axis of the path point frame</li>
<li>bit2 set (4): the path is closed</li>
</ul>
</li>
<li><strong>upVector</strong>: vector that identifies the up-side of the extrusion shape. Can be nullptr if the two first bits of <strong>options</strong> are non-zero.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: the handle of the generated shape</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int shapeHandle = sim.generateShapeFromPath(list path, list section, int options = 0,
                                            list upVector = [0.0, 0.0, 1.0])
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int shapeHandle = sim.generateShapeFromPath(float[] path, float[] section, int options = 0,
                                            float[3] upVector = {0.0, 0.0, 1.0})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>path</strong>: path, specified in row-major order, with [x y z qx qy qz qw] values for each path point.  The orientation parts for each path point are ignored if the two first bits of <strong>options</strong> are zero.</li>
<li><strong>section</strong>: extrusion profile, with x/y pairs, e.g. [x1 y1 x2 y2 ... xn yn]. If the first and last pair overlap, the section is closed</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0-bit1: 0 = upVector is <strong>upVector</strong>, 1 = upVector is the x-axis of the path point frame, 2 = upVector is the y-axis of the path point frame, 3 = upVector is the z-axis of the path point frame</li>
<li>bit2 set (4): the path is closed</li>
</ul>
</li>
<li><strong>upVector</strong>: vector that identifies the up-side of the extrusion shape. Can be nullptr if the two first bits of <strong>options</strong> are non-zero.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: the handle of the generated shape</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.generateTextShape
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Generates a 3D text model.
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
int modelHandle = sim.generateTextShape(string txt, list color = [1, 1, 1], float height = 0.1,
                                        bool centered = False, string alphabetLocation = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int modelHandle = sim.generateTextShape(string txt, float[3] color = {1, 1, 1}, float height = 0.1,
                                        bool centered = false, string alphabetLocation = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>txt</strong>: the text string</li>
<li><strong>color</strong>: the text color. Optional</li>
<li><strong>height</strong>: the height of the text. Optional</li>
<li><strong>centered</strong>: whether the text should be centered. Optional</li>
<li><strong>alphabetLocation</strong>: the path to an alphabet model. Optional</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>modelHandle</strong>: handle of the generated model</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.generateTimeOptimalTrajectory
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Generates a time optimal trajectory, based on the TOPPRA library
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#paths">path related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list outP, list times = sim.generateTimeOptimalTrajectory(list path, list pathLengths,
                                                          list minMaxVel, list minMaxAccel,
                                                          int trajPtSamples = 1000,
                                                          string boundaryCondition = 'not-a-knot',
                                                          float timeout = 5)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] outP, float[] times = sim.generateTimeOptimalTrajectory(float[] path,
                                                                float[] pathLengths,
                                                                float[] minMaxVel,
                                                                float[] minMaxAccel,
                                                                int trajPtSamples = 1000,
                                                                string boundaryCondition = 'not-a-knot',
                                                                float timeout = 5)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>path</strong>: path, specified in row-major order, e.g. a path containing two 3D positions  would be [x1 y1 z1 x2 y2 z2]</li>
<li><strong>pathLengths</strong>: lengths of a path. Each path point should have a corresponding length value (as the distance from the path's first point, along the path). See also <a href="simGetPathLengths.htm">sim.getPathLengths</a>.</li>
<li><strong>minMaxVel</strong>: minimum and maximum allowed velocity, for each dimension/axis, e.g. {xmin,xmax,ymin,ymax,zmin,zmax}</li>
<li><strong>minMaxAccel</strong>: minimum and maximum allowed acceleration, for each dimension/axis, e.g. [xmin xmax ymin ymax zmin zmax]</li>
<li><strong>trajPtSamples</strong>: desired number of path points/configurations</li>
<li><strong>boundaryCondition</strong>: boundary condition</li>
<li><strong>timeout</strong>: a timeout duration</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>outP</strong>: generated path</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getAlternateConfigs
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Generates alternative manipulator configurations, for a same end-effector pose, for a manipulator
that has revolute joints with a range larger than 360 degrees. The original submitted configuration
will be part of the returned configurations
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
list configurations = sim.getAlternateConfigs(list jointHandles, list inputConfig,
                                              int tipHandle = -1, list lowLimits = None,
                                              list ranges = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] configurations = sim.getAlternateConfigs(int[] jointHandles, float[] inputConfig,
                                                 int tipHandle = -1, float[] lowLimits = nil,
                                                 float[] ranges = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointHandles</strong>: an array with the handles of the manipulator joints.</li>
<li><strong>inputConfig</strong>: the manipulator configuration (i.e. joint values).</li>
<li><strong>tipHandle</strong>: the handle of the object acting as end-effector or tip of the kinematic chain, used to make sure the additional configurations have the same end-effector pose (e.g. in case some joints are dependent on others). Can be set to -1 if there are no joint dependencies involved.</li>
<li><strong>lowLimits</strong>: an optional array containing the low limit values for each specified joint. This can be useful when you wish to explore a sub-set of the joint's intervals.</li>
<li><strong>ranges</strong>: an optional array containing the range values for each specified joint. This can be useful when you wish to explore a sub-set of the joint's intervals.  If the range value is 0, then the lowLimit and range values are taken from the joint's properties. If the range value is negative, then the search interval will be centered around the current linear/angular joint position, with an extent of (-range).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>configurations</strong>: an array containing configurations that are equivalent to the specified inputConfig, in terms of end-effector pose.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getApiFunc
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves all API functions and variables that match a specific word.
Useful for script code auto-completion functionality
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getApiInfo
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetApiFunc(int scriptHandle, const char* apiWord)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandleOrType</strong>: <a href="simGetScript.htm">handle of the script</a>. Can be -1 to be script agnostic.</li>
<li><strong>apiWord</strong>: word that API functions and variables should match, e.g. "sim.getObj". Only matches up to the first dot are returned, if the apiWord does not contain any dot. To retrieve all functions and variables, leave apiWord empty. To retrieve only functions, add '+' as prefix. To retrieve only variables, add '-' as prefix.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr in case of an error, or if there is no match. Otherwise all matching API functions and variables, space-separated. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list funcsAndVars = sim.getApiFunc(int scriptHandle, string apiWord)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string[] funcsAndVars = sim.getApiFunc(int scriptHandle, string apiWord)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandleOrType</strong>: <a href="simGetScript.htm">handle of the script</a>. Can be -1 to be script agnostic</li>
<li><strong>apiWord</strong>: word that API functions and variables should match, e.g. "sim.getObj". Only matches up to the first dot are returned, if the apiWord does not contain any dot. To retrieve all functions and variables, leave apiWord empty. To retrieve only functions, add '+' as prefix. To retrieve only variables, add '-' as prefix.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>funcsAndVars</strong>: array containing all matching API functions and variables.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getApiInfo
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the call tip (or info text) for an API function
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getApiFunc
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetApiInfo(int scriptHandle, const char* apiWord)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: <a href="simGetScript.htm">handle of the script</a>. Can be -1 to be script agnostic</li>
<li><strong>apiWord</strong>: API functions or variable to retrieve the info for, e.g. "sim.getObject"</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr in case of an error. Otherwise the information related to the API function or variable. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
string info = sim.getApiInfo(int scriptHandle, string apiWord)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string info = sim.getApiInfo(int scriptHandle, string apiWord)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: <a href="simGetScript.htm">handle of the script</a>. Can be -1 to be script agnostic</li>
<li><strong>apiWord</strong>: API functions or variable to retrieve the info for, e.g. "sim.getObject"</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>info</strong>: information related to the API function or variable</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getArrayParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves 3 values from an array parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiConstants.htm#arrayParameters">array parameter identifiers</a>
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetArrayParam(int parameter, double* parameterValues)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#arrayParameters">array parameter identifier</a></li>
<li><strong>parameterValues</strong>: a pointer  receiving 3 values</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list parameterValues = sim.getArrayParam(int parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] parameterValues = sim.getArrayParam(int parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#arrayParameters">array parameter identifier</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameterValues</strong>: array parameter</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getBoolParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a bool parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiConstants.htm#booleanParameters">bool parameter identifiers</a>
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetBoolParam(int parameter)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#booleanParameters">bool parameter identifier</a></li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>value of the parameter (0 or 1) or -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bool boolState = sim.getBoolParam(int parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool boolState = sim.getBoolParam(int parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#booleanParameters">bool parameter identifier</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>boolState</strong>: value of the bool parameter</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getClosestPosOnPath
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the position or distance along a path that is closest to a specified point in space
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#paths">path related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
double simGetClosestPosOnPath(const double* path, int pathSize, const double* pathLengths,
                              const double* absPt)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>path</strong>: path, specified in row-major order, with x/y/z values for each path point</li>
<li><strong>pathSize</strong>: size/length of the path pointer</li>
<li><strong>pathLengths</strong>: lengths of a path. Each path point should have a corresponding length value (as the distance from the path's first point, along the path). See also <a href="simGetPathLengths.htm">sim.getPathLengths</a>.</li>
<li><strong>absPt</strong>: point in 3D space</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>position/distance along the path</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float posAlongPath = sim.getClosestPosOnPath(list path, list pathLengths, list absPt)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float posAlongPath = sim.getClosestPosOnPath(float[] path, float[] pathLengths, float[3] absPt)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>path</strong>: path, specified in row-major order, with x/y/z values for each path point</li>
<li><strong>pathLengths</strong>: lengths of a path. Each path point should have a corresponding length value (as the distance from the path's first point, along the path). See also <a href="simGetPathLengths.htm">sim.getPathLengths</a>.</li>
<li><strong>absPt</strong>: point in 3D space</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>posAlongPath</strong>: position/distance along the path</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getCollectionObjects
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the object handles that compose a <a href="../collections.htm">collection</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#collections">functions related to collections</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int* simGetCollectionObjects(int collectionHandle, int* objectCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>collectionHandle</strong>: handle of the collection</li>
<li><strong>objectCount</strong>: pointer to a value receiving the number of returned object handles</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>pointer to n object handles, or nullptr if an error occurred. The user is in charge of destroying the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list objectHandles = sim.getCollectionObjects(int collectionHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] objectHandles = sim.getCollectionObjects(int collectionHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>collectionHandle</strong>: handle of the collection</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objectHandles</strong>: array of n object handles</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getConfigDistance
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the distance between two configurations points
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#paths">path related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
float distance = sim.getConfigDistance(list configA, list configB, list metric = [1, 1, 1, ...],
                                       list types = [0, 0, 0, ...])
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float distance = sim.getConfigDistance(float[] configA, float[] configB,
                                       float[] metric = {1, 1, 1 ...},
                                       int[] types = {0, 0, 0, ...})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>configA</strong>: the first configuration, e.g. in case of a 3D pose (position+quaternion), would be [x1 y1 z1 qx1 qy1 qz1 qw1]</li>
<li><strong>configB</strong>: the second configuration</li>
<li><strong>metric</strong>: an optional array specifying the metric to use to compute distances. e.g. if the specified configurations were 3D positions, the distance between two configurations would be calculated as SQRT( mx * (x2 - x1)^2 + my * (y2 - y1)^2 + mz * (z2 - z1)^2 ), where [mx my mz] would be the metric.</li>
<li><strong>types</strong>: an optional array specifying the type of each configuration value/dimension: 0=cartesian value, 1=2pi-cyclic value, 2=quaternion value. e.g. a configuration representing 3D poses should use a types argument [0 0 0 2 2 2 2], a configuration representing revolute and cyclic joints should use a types argument [1 1 1 ...]</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>distance</strong>: the distance between the two configurations</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getContactInfo
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves contact point information of a dynamic simulation pass.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simGetContactInfo(int dynamicPass, int objectHandle, int index, int* objectHandles,
                      double* contactInfo)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>dynamicPass</strong>: specific dynamic sub-step index or sim.handle_all. By default a call to <a href="simHandleDynamics.htm">simHandleDynamics</a> executes the dynamics engine x times, with x times smaller time steps (where x is a parameter that can be adjusted). At each of those sub-steps, contacts are created and destroyed. With the dynamicPass argument you can select which sub-step you wish to retrieve contacts from (zero-based index), or sim.handle_all to retrieve the contacts of all sub-steps. See also <a href="simGetInt32Param.htm">simGetInt32Param</a>(sim.intparam_dynamic_step_divider).</li>
<li><strong>objectHandle</strong>: handle of a specific object you wish to retrieve contacts from, or sim.handle_all to retrieve all contacts in the scene.</li>
<li><strong>index</strong>: zero-based index of the contact to retrieve. Optionally, you may add sim.handleflag_extended to the index, if you also wish to retrieve the normal vector (see further down)</li>
<li><strong>objectHandles</strong>: handles of the two objects contacting. The handles might also refer to particle objects that are not treated as regular scene objects.</li>
<li><strong>contactInfo</strong>: pointer to 6 values (or 9 values if sim.handleflag_extended was added to index), where the 3 first values represent the contact position, the 3 next values represent the force generated by the contact, and the (optional) 3 last values represent the normal vector at the contact. The force vector returned by the Bullet engine will omit the component that results from fricition.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if no contact was found at the given index or 1 if a contact was returned.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list coll, list point, list rForce, list n = sim.getContactInfo(int dynamicPass, int objectHandle,
                                                                int index)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[2] coll, float[3] point, float[3] rForce, float[3] n = sim.getContactInfo(int dynamicPass,
                                                                              int objectHandle,
                                                                              int index)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>dynamicPass</strong>: a specific dynamic sub-step index or sim.handle_all. By default a call to <a href="simHandleDynamics.htm">simHandleDynamics</a> executes the dynamics engine x times, with x times smaller time steps (where x is a parameter that can be adjusted). At each of those sub-steps, contacts are created and destroyed. With the dynamicPass argument you can select which sub-step you wish to retrieve contacts from (zero-based index), or sim.handle_all to retrieve the contacts of all sub-steps. See also <a href="simGetInt32Param.htm">simGetInt32Param</a>(sim.intparam_dynamic_step_divider).</li>
<li><strong>objectHandle</strong>: handle of a specific object you wish to retrieve contacts from, or sim.handle_all to retrieve all contacts in the scene.</li>
<li><strong>index</strong>: zero-based index of the contact to retrieve. Optionally, you may add sim.handleflag_extended to the index, if you also wish to retrieve the normal vector</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>coll</strong>: handles of the two objects contacting. The handles might also refer to particle objects that are not treated as regular scene objects</li>
<li><strong>point</strong>: coordinates of the contact</li>
<li><strong>rForce</strong>: vector that represents the force generated by the contact</li>
<li><strong>n</strong>: normal vector at the contact point</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getDecimatedMesh
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a decimated mesh (i.e. a simplified mesh)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.convexDecompose
sim.getQHull
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetDecimatedMesh(const double* inVertices, int inVerticesL, const int* inIndices,
                        int inIndicesL, double** verticesOut, int* verticesOutL, int** indicesOut,
                        int* indicesOutL, double decimationPercent, int reserved1,
                        const double* reserved2)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>inVertices</strong>: pointer to the input vertices (succession of x/y/z values).</li>
<li><strong>inVerticesL</strong>: number of input vertices times 3.</li>
<li><strong>inIndices</strong>: pointer to the input indices (3 values for each triangle).</li>
<li><strong>inIndicesL</strong>: number of input triangles times 3.</li>
<li><strong>verticesOut</strong>: pointer to a pointer to the output vertices. The output vertices are allocated by CoppeliaSim and the user is in charge of releasing the buffer via <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
<li><strong>verticesOutL</strong>: pointer to the number of output vertices times 3.</li>
<li><strong>indicesOut</strong>: pointer to a pointer to the output indices. The output indices are allocated by CoppeliaSim and the user is in charge of releasing the buffer via <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
<li><strong>indicesOutL</strong>: pointer to the number of output indices (i.e. the number of triangles times 3).</li>
<li><strong>decimationPercent</strong>: percentage of the desired decimation (0.1-0.9).</li>
<li><strong>reserved1</strong>: reserved, set to 0.</li>
<li><strong>reserved2</strong>: reserved, set to nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 or 0 if operation was not successful.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list verticesOut, list indicesOut = sim.getDecimatedMesh(list verticesIn, list indicesIn,
                                                         float decimationPercentage)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] verticesOut, int[] indicesOut = sim.getDecimatedMesh(float[] verticesIn, int[] indicesIn,
                                                             float decimationPercentage)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>verticesIn</strong>: array containing the input vertices (succession of x/y/z values).</li>
<li><strong>indicesIn</strong>: array containing the input indices (3 values for each triangle).</li>
<li><strong>decimationPercentage</strong>: percentage of the desired decimation (0.1 - 0.9).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>verticesOut</strong>: array containing the output vertices (succession of x/y/z values).</li>
<li><strong>indicesOut</strong>: array containing the output indices (3 values for each triangle).</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getEngineBoolParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a bool value from the physics engine properties
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#engineParameters">engine properties setter and getter functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
bool simGetEngineBoolParam(int paramId, int objectHandle, const void* object, bool* ok)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>paramId</strong>: the <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: the handle of the shape or joint, or -1 to retrieve a global engine parameter. If -1, then the <em>object</em> argument will be evaluated.</li>
<li><strong>object</strong>: a pointer to a shape or joint objects, or nullptr to retrieve a global engine parameter. If nullptr, then the <em>objectHandle</em> argument will be evaluated.</li>
<li><strong>ok</strong>: an optional pointer to a value that can be used to determine the success of the API call. Can be nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>value of the requested parameter.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bool boolParam = sim.getEngineBoolParam(int paramId, int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool boolParam = sim.getEngineBoolParam(int paramId, int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a></li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to retrieve a global engine parameter</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>boolParam</strong>: value of the requested parameter</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getEngineFloatParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a double value from the physics engine properties
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#engineParameters">engine properties setter and getter functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
double simGetEngineFloatParam(int paramId, int objectHandle, const void* object, bool* ok)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>paramId</strong>: the <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: the handle of the shape or joint, or -1 to retrieve a global engine parameter. If -1, then the <em>object</em> argument will be evaluated.</li>
<li><strong>object</strong>: a pointer to a shape or joint objects, or nullptr to retrieve a global engine parameter. If nullptr, then the <em>objectHandle</em> argument will be evaluated.</li>
<li><strong>ok</strong>: an optional pointer to a value that can be used to determine the success of the API call. Can be nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>value of the requested parameter.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float floatParam = sim.getEngineFloatParam(int paramId, int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float floatParam = sim.getEngineFloatParam(int paramId, int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a></li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to retrieve a global engine parameter</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>floatParam</strong>: value of the requested parameter.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getEngineInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an int32 value from the physics engine properties
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#engineParameters">engine properties setter and getter functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetEngineInt32Param(int paramId, int objectHandle, const void* object, bool* ok)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>paramId</strong>: the <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: the handle of the shape or joint, or -1 to retrieve a global engine parameter. If -1, then the <em>object</em> argument will be evaluated.</li>
<li><strong>object</strong>: a pointer to a shape or joint objects, or nullptr to retrieve a global engine parameter. If nullptr, then the <em>objectHandle</em> argument will be evaluated.</li>
<li><strong>ok</strong>: an optional pointer to a value that can be used to determine the success of the API call. Can be nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>value of the requested parameter.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int int32Param = sim.getEngineInt32Param(int paramId, int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int int32Param = sim.getEngineInt32Param(int paramId, int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to retrieve a global engine parameter</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>int32Param</strong>: value of the requested parameter</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getEulerAnglesFromMatrix
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the <a href="../positionOrientationTransformation.htm#euler">Euler angles</a> from a transformation matrix
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetEulerAnglesFromMatrix(const double* matrix, double* eulerAngles)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrix</strong>: array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
<li><strong>eulerAngles</strong>: pointer to 3 values</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list eulerAngles = sim.getEulerAnglesFromMatrix(list matrix)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3] eulerAngles = sim.getEulerAnglesFromMatrix(float[12] matrix)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>matrix</strong>: array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>eulerAngles</strong>: array of 3 values</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getExplicitHandling
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the explicit handling flags for a scene object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setExplicitHandling
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetExplicitHandling(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a scene object.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if command was not successful, otherwise the explicit handling flags for the specified object (for now only bit 0 is used).</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int explicitHandlingFlags = sim.getExplicitHandling(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int explicitHandlingFlags = sim.getExplicitHandling(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a scene object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>explicitHandlingFlags</strong>: the explicit handling flags for the specified object (for now only bit 0 is used)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getExtensionString
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a string that describes additional environment or object properties, mainly used by extension plugins.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
char* simGetExtensionString(int objectHandle, int index, const char* key)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: the handle of an object, or -1 if you wish to retrieve the extension string of the environment.</li>
<li><strong>index</strong>: keep to -1, unless the object is a shape, and you wish to retrieve the extension string of a shape component (since a shape can be a compound of several other shapes).</li>
<li><strong>key</strong>: an optional key indicating what value to retrieve. If none is specified, then the whole extension string will be returned. Keys should have the form of <em>key@parentKey@...@parentKey</em>. To retrieve the <em>shadow enabled</em> value of extension string &quot;povray{ shadow {true} fadeXDist {0.00}}&quot;, specify following key: <em>shadow@povray</em>. The key is case sensitive.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>a string if the operation was successful. The user is in charge of releasing the buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
string theString = sim.getExtensionString(int objectHandle, int index, string key = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string theString = sim.getExtensionString(int objectHandle, int index, string key = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of an object, or -1 if you wish to retrieve the extension string of the environment</li>
<li><strong>index</strong>: keep to -1, unless the object is a shape, and you wish to retrieve the extension string of a shape component (since a shape can be a compound of several other shapes)</li>
<li><strong>key</strong>: optional key indicating what value to retrieve. If None/nil is specified, then the whole extension string is returned. Keys should have the form of <em>key@parentKey@...@parentKey</em>. To retrieve the <em>shadow enabled</em> value of extension string &quot;povray{ shadow {true} fadeXDist {0.00}}&quot;, specify following key: <em>shadow@povray</em>. The key is case sensitive.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>theString</strong>: the desired string</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getFloatParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a floating point parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiConstants.htm#floatingParameters">floating-point parameter identifiers</a>
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetFloatParam(int parameter, double* floatState)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#floatingParameters">floating parameter identifier</a></li>
<li><strong>floatState</strong>: value of the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float parameterValue = sim.getFloatParam(int parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float parameterValue = sim.getFloatParam(int parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: parameter identifier (sim.floatparam_...)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameterValue</strong>: value of the parameter</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getFloatSignal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Gets the value of a double signal
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetFloatSignal(const char* signalName, double* signalValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>signalValue</strong>: value of the signal</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, 0 if signal does not exist, 1 if signalValue was retrieved</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float signalValue = sim.getFloatSignal(string signalName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float signalValue = sim.getFloatSignal(string signalName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>signalValue</strong>: value of the signal. None/nil if signal does not exist</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getGenesisEvents
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves all events that allow to reconstruct a scene's (mostly) visual content remotely
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
bytes events = sim.getGenesisEvents()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer events = sim.getGenesisEvents()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>events</strong>: the genesis events as a cbor-coded buffer</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an integer parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiConstants.htm#integerParameters">integer parameter identifiers</a>
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetInt32Param(int parameter, int* intState)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#integerParameters">integer parameter identifier</a></li>
<li><strong>intState</strong>: value of the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int parameterValue = sim.getInt32Param(int parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int parameterValue = sim.getInt32Param(int parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: parameter identifier (sim.intparam_...)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameterValue</strong>: value of the parameter</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getInt32Signal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Gets the value of an integer signal
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetInt32Signal(const char* signalName, int* signalValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>signalValue</strong>: value of the signal</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, 0 if signal does not exist, 1 if signalValue was retrieved</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int signalValue = sim.getInt32Signal(string signalName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int signalValue = sim.getInt32Signal(string signalName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>signalValue</strong>: value of the signal. None/nil if signal does not exist</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointDependency
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves joint dependency information, when the joint is in dependent mode
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointDependency
sim.getJointMode
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetJointDependency(int jointHandle, int* masterJointHandle, double* offset, double* multCoeff)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the slave joint</li>
<li><strong>masterJointHandle</strong>: handle of the master joint, or -1 if the joint is not dependent</li>
<li><strong>offset</strong>: offset in equation slave = offset + master * multCoeff</li>
<li><strong>multCoeff</strong>: coeff in equation slave = offset + master * multCoeff</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int masterJointHandle, float offset, float multCoeff = sim.getJointDependency(int jointHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int masterJointHandle, float offset, float multCoeff = sim.getJointDependency(int jointHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the slave joint</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>masterJointHandle</strong>: handle of the master joint, or -1 if the joint is not dependent</li>
<li><strong>offset</strong>: offset in equation slave = offset + master * multCoeff</li>
<li><strong>multCoeff</strong>: coeff in equation slave = offset + master * multCoeff</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointForce
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the force or torque applied to a joint  along/about its active axis.
This function retrieves meaningful information only if the joint is prismatic or revolute,
and is dynamically enabled. With the Bullet, MuJoCo and Newton engine, this function returns
the force or torque applied to the joint motor  (torques from joint limits are not taken into account).
With the ODE and Vortex engine, this function returns the total force or torque applied to a joint
along/about its z-axis
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointTargetForce
sim.readForceSensor
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetJointForce(int jointHandle, double* forceOrTorque)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_rawvalue</a> (simply add sim.handleflag_rawvalue to jointHandle), if you wish to access the raw values generated by each individual dynamic simulation step (by default, there are 10 dynamic simulation steps for each simulation step). Raw values can only be accessed from inside a <a href="../callbackFunctions.htm">callback function</a> triggered by the physics engine.</li>
<li><strong>forceOrTorque</strong>: the force or the torque applied to the joint  along/about its z-axis.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if no value is available yet (e.g. when <a href="simHandleDynamics.htm">simHandleDynamics</a> hasn't yet handled that joint), otherwise a value &gt;0.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float forceOrTorque = sim.getJointForce(int jointHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float forceOrTorque = sim.getJointForce(int jointHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_rawvalue</a> (simply add sim.handleflag_rawvalue to jointHandle), if you wish to access the raw values generated by each individual dynamic simulation step (by default, there are 10 dynamic simulation steps for each simulation step). Raw values can only be accessed from inside a <a href="../callbackFunctions.htm">callback function</a> triggered by the physics engine.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>forceOrTorque</strong>: force or the torque applied to the joint along/about its z-axis, or None/nil if no value is available yet.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointInterval
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the interval parameters of a joint
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointInterval
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetJointInterval(int objectHandle, bool* cyclic, double* interval)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint</li>
<li><strong>cyclic</strong>: indicates whether the joint is cyclic (the joint varies between -pi and +pi in a cyclic manner)</li>
<li><strong>interval</strong>: interval of the joint. interval[0] is the joint minimum allowed value, interval[1] is the joint range (the maximum allowed value is interval[0]+interval[1]). When the joint is &quot;cyclic&quot;, then the interval parameters don't have any meaning.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bool cyclic, list interval = sim.getJointInterval(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool cyclic, float[2] interval = sim.getJointInterval(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>cyclic</strong>: indicates whether the joint is cyclic (the joint varies between -pi and +pi in a cyclic manner).</li>
<li><strong>interval</strong>: interval of the joint. interval[1] is the joint minimum allowed value, interval[2] is the joint range (the maximum allowed value is interval[1]+interval[2]). When the joint is &quot;cyclic&quot;, then the interval parameters don't have any meaning.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointMode
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the operation mode of a joint
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointMode
<a href="../objectParameterIDs.htm#joints">sim.jointintparam_dynctrlmode</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetJointMode(int jointHandle, int* options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint object</li>
<li><strong>options</strong> (output): not used</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the  <a href="../apiConstants.htm#jointModes">joint mode</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int jointMode = sim.getJointMode(int jointHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int jointMode = sim.getJointMode(int jointHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>jointMode</strong>: the <a href="../apiConstants.htm#jointModes">joint mode</a></li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointPosition
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the linear/angular position of a joint. This function cannot be used with spherical joints
(use <a href="simGetObjectChildPose.htm">sim.getObjectChildPose</a> instead)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointPosition
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetJointPosition(int objectHandle, double* position)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint</li>
<li><strong>position</strong>: linear/angular position of the joint</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float position = sim.getJointPosition(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float position = sim.getJointPosition(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>position</strong>: linear/angular position of the joint</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointTargetForce
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the force or torque that a joint can exert
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointTargetForce
sim.getJointTargetVelocity
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetJointTargetForce(int jointHandle, double* forceOrTorque)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint.</li>
<li><strong>forceOrTorque</strong>: the maximum force or torque the joint can apply. The sign indicates the desired movement direction.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. .</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float forceOrTorque = sim.getJointTargetForce(int jointHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float forceOrTorque = sim.getJointTargetForce(int jointHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>forceOrTorque</strong>: the maximum force or torque the joint can apply. The sign indicates the desired movement direction</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointTargetPosition
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the target linear/angular position of a joint
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointTargetPosition
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetJointTargetPosition(int objectHandle, double* targetPosition)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>targetPosition</strong> (output): target position of the joint</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float targetPosition = sim.getJointTargetPosition(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float targetPosition = sim.getJointTargetPosition(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>targetPosition</strong>: target position of the joint</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointTargetVelocity
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the target linear/angular velocity of a non-spherical joint
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setJointTargetVelocity
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetJointTargetVelocity(int objectHandle, double* targetVelocity)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>targetVelocity</strong> (output): target linear/angular velocity of the joint</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float targetVelocity = sim.getJointTargetVelocity(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float targetVelocity = sim.getJointTargetVelocity(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>targetVelocity</strong>: target velocity of the joint.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointType
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the type of a joint
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simGetJointType(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>Type of the joint (sim.joint_revolute_subtype, sim.joint_prismatic_subtype or sim.joint_spherical_subtype), or -1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int jointType = sim.getJointType(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int jointType = sim.getJointType(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>jointType</strong>: type of the joint:
<ul>
<li>sim.joint_revolute_subtype</li>
<li>sim.joint_prismatic_subtype</li>
<li>sim.joint_spherical_subtype</lia>
</ul>
</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getJointVelocity
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the linear or angular velocity of a joint. The velocity is a measured velocity
(i.e. from one simulation step to the next), and is available for all joints in the scene
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simGetJointVelocity(int jointHandle, double* velocity)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>jointHandle</strong>: handle of a joint.</li>
<li><strong>velocity</strong>: a pointer that will receive the velocity.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float velocity = sim.getJointVelocity(int jointHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float velocity = sim.getJointVelocity(int jointHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointHandle</strong>: handle of a joint</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>velocity</strong>: the velocity</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetLastError
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves and clears the last generated API call error or warning message
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simSetLastError
sim.getStackTraceback
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetLastError()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>Error or warning message buffer or nullptr if no error message is present. A warning starts with <em>warning@</em>. The user has to delete the returned buffer with a call to <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getLastInfo
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves and clears the information string generated by last API call
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
char* simGetLastInfo()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>the information string, if it exists. The user has to delete the returned buffer with a call to <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
string info = sim.getLastInfo()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string info = sim.getLastInfo()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>info</strong>: the information string</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getLightParameters
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves various parameters of a light object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setLightParameters
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetLightParameters(int objectHandle, double* setToNULL, double* diffusePart,
                          double* specularPart)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the light</li>
<li><strong>setToNULL</strong>: not used, set to nullptr</li>
<li><strong>diffusePart</strong>: red, green and blue component of the light's diffuse part. Can be nullptr</li>
<li><strong>specularPart</strong>: red, green and blue component of the light's specular part. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise bit-coded: for now, only bit 0 is used: 1=light on</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int state, list zero, list diffusePart, list specularPart = sim.getLightParameters(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int state, float[3] zero, float[3] diffusePart, float[3] specularPart = sim.getLightParameters(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the light</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>state</strong>:bit-coded: for now, only bit 0 is used: 1=light on.</li>
<li><strong>zero</strong>: ignore this value</li>
<li><strong>diffusePart</strong>: red, green and blue component of the light's diffuse part</li>
<li><strong>specularPart</strong>: red, green and blue component of the light's specular part</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getLinkDummy
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the object handle of the dummy linked to this one
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setLinkDummy
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetLinkDummy(int dummyHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>dummyHandle</strong>: handle of the dummy whose linked dummy has to be retrieved.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>Handle of the dummy linked to the specified dummy object, or -1 if the dummy is not linked or in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int linkedDummyHandle = sim.getLinkDummy(int dummyHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int linkedDummyHandle = sim.getLinkDummy(int dummyHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>dummyHandle</strong>: handle of the dummy whose linked dummy has to be retrieved</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>linkedDummyHandle</strong>: handle of the dummy linked to the specified dummy object, or -1 if the dummy is not linked</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetMainWindow
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the handle or pointer of the main window.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
void* simGetMainWindow(int type)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>type</strong>: type of the desired return value. 0 for a native window handle, 1 for a pointer to a QWidget object.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>a native window handle or  a pointer to a QWidget object.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getMatchingPersistentDataTags
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves  persistent data block tags that match a specific pattern
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getPersistentDataTags
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list tags = sim.getMatchingPersistentDataTags(string pattern)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string[] tags = sim.getMatchingPersistentDataTags(string pattern)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pattern</strong>: the pattern to match. e.g. &quot;Commander\.options\.s&quot;.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>tags</strong>: an array containing the retrieved data block tags</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getMatrixInverse
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inverts a transformation matrix
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list matrix = sim.getMatrixInverse(list matrix)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[12] matrix = sim.getMatrixInverse(float[12] matrix)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>matrix</strong>: the input matrix</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>matrix</strong>: the output matrix</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getModelProperty
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the properties of a model
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setModelProperty
sim.getObjectProperty
sim.getObjectSpecialProperty
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetModelProperty(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object that serves as the model base</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li><a href="../apiConstants.htm#modelProperties">model property values</a>, or -1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int property = sim.getModelProperty(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int property = sim.getModelProperty(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object that serves as the model base</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>property</strong>: <a href="../apiConstants.htm#modelProperties">model property values</a></li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getNamedBoolParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a named bool parameter. Accepted values are <em>true</em>, <em>false</em>, <em>on</em>, <em>off</em>, <em>1</em>
or <em>0</em>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#namedParams">simulator named parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
bool boolParam = sim.getNamedBoolParam(string paramName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool boolParam = sim.getNamedBoolParam(string paramName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramName</strong>: the key or name of the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>boolParam</strong>: the parameter if it exists.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getNamedFloatParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a named double parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#namedParams">simulator named parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
float floatParam = sim.getNamedFloatParam(string paramName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float floatParam = sim.getNamedFloatParam(string paramName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramName</strong>: the key or name of the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>floatParam</strong>: the parameter if it exists.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getNamedInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a named int parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#namedParams">simulator named parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
int intParam = sim.getNamedIntParam(string paramName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int intParam = sim.getNamedIntParam(string paramName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramName</strong>: the key or name of the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>intParam</strong>: the parameter if it exists</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getNamedStringParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a named string or buffer parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#namedParams">simulator named parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetNamedStringParam(const char* paramName, int* paramLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>paramName</strong>: the key or name of the parameter</li>
<li><strong>paramLength</strong>: the size of the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful or if such a parameter does not exist. Otherwise the parameter. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes stringParam = sim.getNamedStringParam(string paramName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer stringParam = sim.getNamedStringParam(string paramName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramName</strong>: the key or name of the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>stringParam</strong>: the parameter if it exists</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getNavigationMode
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the navigation and selection mode for the mouse
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setNavigationMode
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetNavigationMode()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li><a href="../apiConstants.htm#navigationModes">navigation mode</a> if operation was successful, -1 otherwise</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int navigationMode = sim.getNavigationMode()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int navigationMode = sim.getNavigationMode()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>navigationMode</strong>: <a href="../apiConstants.htm#navigationModes">navigation mode</a></li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObject
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an object handle based on its path and alias
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.isHandle
sim.getObjectUid
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObject(const char* objectPath, int index, int proxy, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectPath</strong>: path and alias of the object to find. See the section on <a href="../accessingSceneObjects.htm">accessing scene objects</a> for details.</li>
<li><strong>index</strong>: fetches the n-th object (zero based index) that satisfies the object path. -1 returns the first object that satisfies the object path.</li>
<li><strong>proxy</strong>: if different from -1, specifies an object handle that identifies a hierarchy tree to search in.</li>
<li><strong>options</strong>: bit-coded. bit0 set (i.e. 1): errors are silent.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>handle of object or -1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int objectHandle = sim.getObject(string objectPath, dict options = {})
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int objectHandle = sim.getObject(string objectPath, table options = {})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectPath</strong>: path and alias of the object to find. See the section on <a href="../accessingSceneObjects.htm">accessing scene objects</a> for details.</li>
<li><strong>options</strong>: optional map indicating how the object should be searched:
<ul>
<li>noError(bool): can generate a silent error if an object was not found</li>
<li>index(int): fetches the n-th object (zero based index) that satisfies the specified objectPath</li>
<li>proxy(int):allows to search the hierarchy tree of the specified proxy object</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of object or -1</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectAlias
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the alias or path of an object based on its handle
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectAlias
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetObjectAlias(int objectHandle, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object.</li>
<li><strong>options</strong>: alias formating options:
<ul>
<li>-1: naked alias (e.g. "alias")</li>
<li>0: ordered alias (e.g. "alias[0]")</li>
<li>1: short path that fully identifies the object (e.g. "/parent/alias[0]")</li>
<li>2: full path (e.g. "/parentA/parentB/alias[0]")</li>
<li>3: naked alias with handle, if the alias is not unique (e.g. "alias" or "alias__42__")</li>
<li>4: naked alias with handle (e.g. "alias__42__")</li>
<li>5: print version of the short path, not guaranteed to be unique (e.g. &quot;/parent/ ... /alias&quot;)</li>
<li>6: path using just the alias and an index number (e.g. "/alias{3}")</li>
<li>7: same as 6, but using the first parent model, if present (e.g. "/parentModel{2}/alias{3}")</li>
<li>8: same as 6, but using the first 2 parent models, if present (e.g. "/parentModelA{4}/parentModelB{2}/alias{3}")</li>
<li>9: same as 6, but using all parent models, if present (e.g. "/parentModelA{4}/.../parentModelN{2}/alias{3}")</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>Alias or path of the object if operation was successful, nullptr otherwise. The user is in charge of destroying the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
string alias = sim.getObjectAlias(int objectHandle, int options = -1)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string alias = sim.getObjectAlias(int objectHandle, int options = -1)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object.</li>
<li><strong>options</strong>: alias formating options:
<ul>
<li>-1: naked alias (e.g. "alias")</li>
<li>0: ordered alias (e.g. "alias[0]")</li>
<li>1: short path that fully identifies the object (e.g. "/parent/alias[0]")</li>
<li>2: full path (e.g. "/parentA/parentB/alias[0]")</li>
<li>3: naked alias with handle, if the alias is not unique (e.g. "alias" or "alias__42__")</li>
<li>4: naked alias with handle (e.g. "alias__42__")</li>
<li>5: print version of the short path, not guaranteed to be unique (e.g. &quot;/parent/ ... /alias&quot;)</li>
<li>6: path using just the alias and an index number (e.g. "/alias{3}")</li>
<li>7: same as 6, but using the first parent model, if present (e.g. "/parentModel{2}/alias{3}")</li>
<li>8: same as 6, but using the first 2 parent models, if present (e.g. "/parentModelA{4}/parentModelB{2}/alias{3}")</li>
<li>9: same as 6, but using all parent models, if present (e.g. "/parentModelA{4}/.../parentModelN{2}/alias{3}")</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>alias</strong>: alias or path of the object</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectChild
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the handle of an object's child object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectParent
sim.getObjectsInTree
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectChild(int objectHandle, int index)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>index</strong>: zero-based index of the child's position. To retrieve all children of an object, call the function by increasing the index until the return value is -1</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>handle of child object or -1 if the child doesn't exist at that index or in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int childHandle = sim.getObjectChild(int objectHandle, int index)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int childHandle = sim.getObjectChild(int objectHandle, int index)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>index</strong>: zero-based index of the child's position. To retrieve all children of an object, call the function by increasing the index until the return value is -1</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>childHandle</strong>: handle of child object or -1 if the child doesn't exist at that index<</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectChildPose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the intrinsic or internal transformation of an object. For a joint, this is the transformation caused
by the joint movement, mainly. For joints and force sensors, this will also include a possible error
transformation caused by the physics engine (a physics engine can cause joints and force sensors to come apart,
when constraints can't be perfectly resolved)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectChildPose
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectChildPose(int objectHandle, double* pose)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>pose</strong>: pointer to the pose</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list pose = sim.getObjectChildPose(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7] pose = sim.getObjectChildPose(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pose</strong>: the pose</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectColor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the color of a scene object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#rendering">rendering related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectColor(int objectHandle, int index, int colorComponent, float* rgbData)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>index</strong>: the zero-based index of the color, if the object has several colors</li>
<li><strong>colorComponent</strong>: a <a href="../apiConstants.htm#colorComponents">color component</a>.</li>
<li><strong>rgbData</strong> (output): red, green and blue components of the color (3 values)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if the color index was not found in the object. 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list rgbData = sim.getObjectColor(int objectHandle, int index, int colorComponent)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3] rgbData = sim.getObjectColor(int objectHandle, int index, int colorComponent)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>index</strong>: zero-based index of the color, if the object has several colors</li>
<li><strong>colorComponent</strong>: <a href="../apiConstants.htm#colorComponents">color component</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>rgbData</strong>: red, green and blue components of the color (3 values)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectFloatArrayParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a floating-point array parameter of a <a href="../objects.htm">scene object</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#objectParameters">object parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
double* simGetObjectFloatArrayParam(int objectHandle, int parameterID, int* size)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>size</strong>: the size of the returned double array. Can be null</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>null if the parameter could not be retrieved, or a pointer to the array. The user is in charge of releasing the array with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list params = sim.getObjectFloatArrayParam(int objectHandle, int parameterID)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] params = sim.getObjectFloatArrayParam(int objectHandle, int parameterID)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>params</strong>: the desired array</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectFloatParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a floating-point parameter of a <a href="../objects.htm">scene object</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#objectParameters">object parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectFloatParam(int objectHandle, int parameterID, double* parameter)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameter</strong>: retrieved parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be retrieved, or 1 if operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float parameter = sim.getObjectFloatParam(int objectHandle, int parameterID)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float parameter = sim.getObjectFloatParam(int objectHandle, int parameterID)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: retrieved parameter</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectFromUid
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an object handle based on its unique identifier
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectUid
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectfromUid(long long int objectUid, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectUid</strong>: the object unique identifier.</li>
<li><strong>options</strong>: bit-coded. bit0 set (i.e. 1): errors are silent.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>handle of object or -1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int objectHandle = sim.getObjectFromUid(int objectUid, dict options = {})
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int objectHandle = sim.getObjectFromUid(int objectUid, table options = {})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectUid</strong>: the object unique identifier.</li>
<li><strong>options</strong>: optional map indicating how the object should be searched. {<strong>noError</strong>=true} will generate a silent error if an object was not found.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of object</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetObjectInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an int32 parameter of a <a href="../objects.htm">scene object</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#objectParameters">object parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectInt32Param(int objectHandle, int parameterID, int* parameter)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameter</strong>: retrieved parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be retrieved, or 1 if operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int parameter = simGetObjectInt32Param(int objectHandle, int parameterID)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int parameter = simGetObjectInt32Param(int objectHandle, int parameterID)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: retrieved parameter.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectMatrix
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the transformation matrix of an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectMatrix
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectMatrix(int objectHandle, int relativeToObjectHandle, double* matrix)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the matrix. Specify sim.handle_world to retrieve the absolute transformation matrix, sim.handle_inverse to retrieve the inverse of the absolute transformation matrix, sim.handle_parent to retrieve the transformation matrix relative to the object's parent, or an object handle relative to whose reference frame we want the transformation matrix. If this handle is the handle of a joint, then the matrix relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the matrix relative to the joint's base frame will be returned).</li>
<li><strong>matrix</strong>: pointer to 12 double values</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list matrix = sim.getObjectMatrix(int objectHandle, int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[12] matrix = sim.getObjectMatrix(int objectHandle,
                                       int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the matrix. Specify sim.handle_world to retrieve the absolute transformation matrix, sim.handle_inverse to retrieve the inverse of the absolute transformation matrix, sim.handle_parent to retrieve the transformation matrix relative to the object's parent, or an object handle relative to whose reference frame we want the transformation matrix. If this handle is the handle of a joint, then the matrix relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the matrix relative to the joint's base frame will be returned).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>matrix</strong>: array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectOrientation
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the orientation (<a href="../positionOrientationTransformation.htm#euler">Euler angles</a>) of an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectOrientation
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectOrientation(int objectHandle, int relativeToObjectHandle, double* eulerAngles)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the orientation. Specify sim.handle_world to retrieve the absolute orientation, sim.handle_parent to retrieve the orientation relative to the object's parent, or an object handle relative to whose reference frame you want the orientation.  If this handle is the handle of a joint, then the orientation relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the orientation relative to the joint's base frame will be returned).</li>
<li><strong>eulerAngles</strong>: Euler angles (alpha, beta and gamma)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list eulerAngles = sim.getObjectOrientation(int objectHandle,
                                            int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3] eulerAngles = sim.getObjectOrientation(int objectHandle,
                                                int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the orientation. Specify sim.handle_world to retrieve the absolute orientation, sim.handle_parent to retrieve the orientation relative to the object's parent, or an object handle relative to whose reference frame you want the orientation.  If this handle is the handle of a joint, then the orientation relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the orientation relative to the joint's base frame will be returned).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>eulerAngles</strong>: Euler angles [alpha beta gamma]</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectParent
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the handle of an object's parent object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectParent
sim.getObjectChild
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectParent(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>handle of parent or -1 if the parent doesn't exist or in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int parentHandle = sim.getObjectParent(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int parentHandle = sim.getObjectParent(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parentHandle</strong>: handle of parent or -1 if the parent doesn't exist</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectPose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the pose of an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectPose
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectPose(int objectHandle, int relativeToObjectHandle, double* pose)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Combine with sim.handleflag_wxyzquat to retrieve the quaternion as [qw qx qy qz] order instead of [qx qy qz qw] order. Can also be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the pose. Specify sim.handle_world to retrieve the absolute pose, sim.handle_inverse to retrieve the inverse of the absolute pose, sim.handle_parent to retrieve the pose relative to the object's parent, or an object handle relative to whose reference frame we want the pose. If this handle is the handle of a joint, then the pose relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the pose relative to the joint's base frame will be returned).</li>
<li><strong>pose</strong>: pointer to 7 values: [x y z qx qy qz qw]</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list pose = sim.getObjectPose(int objectHandle, int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7] pose = sim.getObjectPose(int objectHandle, int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Combine with sim.handleflag_wxyzquat to retrieve the quaternion as [qw qx qy qz] order instead of [qx qy qz qw] order. Can also be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the pose. Specify sim.handle_world to retrieve the absolute pose, sim.handle_inverse to retrieve the inverse of the absolute pose, sim.handle_parent to retrieve the pose relative to the object's parent, or an object handle relative to whose reference frame we want the pose. If this handle is the handle of a joint, then the pose relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the pose relative to the joint's base frame will be returned).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pose</strong>: pose array: [x y z qx qy qz qw]</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectPosition
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the position of an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectPosition
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectPosition(int objectHandle, int relativeToObjectHandle, double* position)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the position. Specify sim.handle_world to retrieve the absolute position, sim.handle_parent to retrieve the position relative to the object's parent, or an object handle relative to whose reference frame we want the position. If this handle is the handle of a joint, then the position relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the position relative to the joint's base frame will be returned).</li>
<li><strong>position</strong>: pointer to 3 values [x y z]</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list position = sim.getObjectPosition(int objectHandle,
                                      int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3] position = sim.getObjectPosition(int objectHandle,
                                          int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the position. Specify sim.handle_world to retrieve the absolute position, sim.handle_parent to retrieve the position relative to the object's parent, or an object handle relative to whose reference frame we want the position. If this handle is the handle of a joint, then the position relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the position relative to the joint's base frame will be returned).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>position</strong>: array of 3 values [x y z]</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectProperty
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the main properties of a scene object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectProperty
sim.getObjectSpecialProperty
sim.getModelProperty
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectProperty(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li><a href="../apiConstants.htm#sceneObjectProperties">object property values</a>, -1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int property = sim.getObjectProperty(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int property = sim.getObjectProperty(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>property</strong>: <a href="../apiConstants.htm#sceneObjectProperties">object property values</a></li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectQuaternion
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the quaternion of an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectQuaternion
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectQuaternion(int objectHandle, int relativeToObjectHandle, double* quaternion)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Combine with sim.handleflag_wxyzquat to retrieve the quaternion as [qw qx qy qz] order instead of [qx qy qz qw] order. Can also be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the orientation. Specify sim.handle_world to retrieve the absolute orientation, sim.handle_parent to retrieve the orientation relative to the object's parent, or an object handle relative to whose reference frame you want the orientation.  If this handle is the handle of a joint, then the quaternion relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the quaternion relative to the joint's base frame will be returned).</li>
<li><strong>quaternion</strong>: the quaternion</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list quaternion = sim.getObjectQuaternion(int objectHandle,
                                          int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[4] quaternion = sim.getObjectQuaternion(int objectHandle,
                                              int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Combine with sim.handleflag_wxyzquat to retrieve the quaternion as [qw qx qy qz] order instead of [qx qy qz qw] order. Can also be combined with sim.handleflag_reljointbaseframe (see next argument)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame we want the orientation. Specify sim.handle_world to retrieve the absolute orientation, sim.handle_parent to retrieve the orientation relative to the object's parent, or an object handle relative to whose reference frame you want the orientation.  If this handle is the handle of a joint, then the quaternion relative to the joint's moving frame will be returned (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the quaternion relative to the joint's base frame will be returned).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>quaternion</strong>: the quaternion [qx qy qz qw]</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjects
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves object handles. Use this in a loop where index starts at 0 and is incremented to get all
object handles in the scene
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectsInTree
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjects(int index, int objectType)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>index</strong>: object index. First object is located at index 0</li>
<li><strong>objectType</strong>: object type (sim.object_shape_type, sim.object_joint_type, etc. (see the <a href="../apiConstants.htm#sceneObjectTypes">object types</a>) or sim.handle_all for any type of object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>handle of the object or -1 if no object is located at that index or in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int objectHandle = sim.getObjects(int index, int objectType)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int objectHandle = sim.getObjects(int index, int objectType)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>index</strong>: object index. First object is located at index 0</li>
<li><strong>objectType</strong>: object type (sim.object_shape_type, sim.object_joint_type, etc. (see the <a href="../apiConstants.htm#sceneObjectTypes">object types</a>) or sim.handle_all for any type of object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object or -1 if no object is located at that index</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectSel
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the handles of selected objects
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectSel
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int* simGetObjectSel(int* cnt)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>cnt</strong>: the number of selected objects</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>a pointer to the selected objects. The user is in charge of releasing the buffer via <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list selectedObjects = sim.getObjectSel()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] selectedObjects = sim.getObjectSel()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>selectedObjects</strong>: the handles of selected objects</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectsInTree
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves object handles in a given hierarchy tree
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjects
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int* simGetObjectsInTree(int treeBaseHandle, int objectType, int options, int* objectCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>treeBaseHandle</strong>: handle of the object that describes  the hierarchy tree, or sim.handle_scene for all objects in the scene.</li>
<li><strong>objectType</strong>: <a href="../apiConstants.htm#sceneObjectTypes">object type</a> to retrieve or sim.handle_all for any type of object in the tree</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): exclude the tree base from the returned array</li>
<li>bit1 set (2): include in the returned array only the object's first children. If <strong>treeBaseHandle</strong> is sim.handle_scene, then only parentless objects will be included.</li>
</ul>
</li>
<li><strong>objectCount (out value)</strong>: the number of returned object handles</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>a pointer to an array containing object handles, or nullptr in case of an error. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list objects = sim.getObjectsInTree(int treeBaseHandle, int objectType = sim.handle_all,
                                    int options = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] objects = sim.getObjectsInTree(int treeBaseHandle, int objectType = sim.handle_all,
                                     int options = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>treeBaseHandle</strong>: handle of the object that describes  the hierarchy tree, or sim.handle_scene for all objects in the scene.</li>
<li><strong>objectType</strong>: <a href="../apiConstants.htm#sceneObjectTypes">object type</a> to retrieve or sim.handle_all for any type of object in the tree</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): exclude the tree base from the returned array</li>
<li>bit1 set (2): include in the returned array only the object's first children. If <strong>treeBaseHandle</strong> is sim.handle_scene, then only parentless objects will be included.</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objects</strong>: an array containing object handles</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectSizeFactor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the size factor of a scene object. The size factor is different from the real object size.
Use this to be able to adapt to scaling operations
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#size">size and scaling functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
double simGetObjectSizeFactor(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the scene object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>size factor or negative value in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float sizeFactor = sim.getObjectSizeFactor(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float sizeFactor = sim.getObjectSizeFactor(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the scene object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objects</strong>: size factor</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectSpecialProperty
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the special properties of a scene object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setObjectSpecialProperty
sim.getObjectProperty
sim.getModelProperty
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectSpecialProperty(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li><a href="../apiConstants.htm#sceneObjectSpecialProperties">object special property values</a>, -1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int property = sim.getObjectSpecialProperty(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int property = sim.getObjectSpecialProperty(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>property</strong>: <a href="../apiConstants.htm#sceneObjectSpecialProperties">object special property values</a></li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectStringParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a string parameter of a <a href="../objects.htm">scene object</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#objectParameters">object parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetObjectStringParam(int objectHandle, int parameterID, int* parameterLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameterLength</strong>: the length of the retrieved parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>A buffer containing the retrieved string, or nullptr in case of an error. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>. The returned buffer might contain embedded zeros, and its length is specified by the parameterLength argument.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes parameter = sim.getObjectStringParam(int objectHandle, int parameterID)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer parameter = sim.getObjectStringParam(int objectHandle, int parameterID)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: the retrieved buffer</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectType
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the type of an object
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectType(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>type of the object (sim.object_shape_type, sim.object_joint_type, etc. (see the <a href="../apiConstants.htm#sceneObjectTypes">object types</a>) or -1 in case of error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int objectType = sim.getObjectType(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int objectType = sim.getObjectType(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objectType</strong>: type of the object (sim.object_shape_type, sim.object_joint_type, etc. (see the <a href="../apiConstants.htm#sceneObjectTypes">object types</a>)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectUid
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the unique identifier of an object: throughout a CoppeliaSim session, there won't be two
identical unique identifiers. Unique identifiers are however not persistent (i.e. are not saved with the object)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectFromUid
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
long long int simGetObjectUid(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: object handle</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the unique identifier</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int uid = sim.getObjectUid(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int uid = sim.getObjectUid(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: object handle</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>uid</strong>: the unique identifier</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getObjectVelocity
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the linear and/or angular velocity of an object, in absolute coordinates. The velocity is
a measured velocity (i.e. from one simulation step to the next), and is available for all
objects in the scene
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getVelocity
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetObjectVelocity(int objectHandle, double* linearVelocity, double* angularVelocity)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a <a href="../objects.htm">scene object</a>. It is highly recommended to add <em><a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_axis</a></em> to the object handle, in order to obtain the <em>regular</em> angular velocity for the object, i.e. the rotation axis and the rotation velocity that is represented by the axis' length. If <em>sim.handleflag_axis</em> is omitted, then a derivative of Euler angles expressed relative to previous' simulation frame will be returned for the angular velocity</li>
<li><strong>linearVelocity</strong>: pointer to 3 values that will receive the linear velocity. Can be nullptr</li>
<li><strong>angularVelocity</strong>: pointer to 3 values that will receive the angular velocity. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list linearVelocity, list angularVelocity = sim.getObjectVelocity(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3] linearVelocity, float[3] angularVelocity = sim.getObjectVelocity(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<li><strong>objectHandle</strong>: handle of a <a href="../objects.htm">scene object</a>. It is highly recommended to add <em><a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_axis</a></em> to the object handle, in order to obtain the <em>regular</em> angular velocity for the object, i.e. the rotation axis and the rotation velocity that is represented by the axis' length. If <em>sim.handleflag_axis</em> is omitted, then a derivative of Euler angles expressed relative to previous' simulation frame will be returned for the angular velocity</li>
</ul
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>linearVelocity</strong>: array of 3 values that represent the linear velocity</li>
<li><strong>angularVelocity</strong>: array of 3 values that represent the angular velocity</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getOctreeVoxels
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves voxel positions from an <a href="../octrees.htm">OC tree</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#octree">OC tree related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
const double* simGetOctreeVoxels(int octreeHandle, int* ptCnt, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>ptCnt</strong>: a pointer receiving the number of voxels contained in the returned pointer.</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful or if the OC tree doesn't contain any voxels. Otherwise a pointer to the voxel [x y z] positions, relative to the OC tree reference frame</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list voxels = sim.getOctreeVoxels(int octreeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] voxels = sim.getOctreeVoxels(int octreeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>voxels</strong>: the voxel [x y z] positions, relative to the OC tree reference frame</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPage
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the current page index (view)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setPage
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetPage()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>page index or -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int pageIndex = sim.getPage()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int pageIndex = sim.getPage()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pageIndex</strong>: page index</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPathInterpolatedConfig
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns an interpolated configuration from a path
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#paths">path related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list config = sim.getPathInterpolatedConfig(list path, list pathLengths, float t,
                                            dict method = {'type': 'linear', 'strength': 1.0,
                                            'forceOpen': False}, list types = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] config = sim.getPathInterpolatedConfig(float[] path, float[] pathLengths, float t,
                                               map method = {type = 'linear', strength = 1.0,
                                               forceOpen = false}, int[] types = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>path</strong>: the path, specified in row-major order, e.g. a path containing two 3D poses (position+quaternion) would be [x1 y1 z1 qx1 qy1 qz1 qw1 x2 y2 z2 qx2 qy2 qz2 qw2]</li>
<li><strong>pathLengths</strong>: the lengths of a path. Each path point should have a corresponding length value (as the distance from the path's first point, along the path). See also <a href="simGetPathLengths.htm">sim.getPathLengths</a>.</li>
<li><strong>t</strong>: the distance from the beginning of the path, where the interpolation point should be picked from</li>
<li><strong>method</strong>: an optional map specifying the type of interpolation (linear or quadraticBezier), whether the path should be considered as open, even if the first and last path points overlap, and the bezier strength (0.05-1.0)</li>
<li><strong>types</strong>: an optional array specifying the type of each configuration value/dimension: 0=cartesian value, 1=2pi-cyclic value, 2=quaternion value. e.g. a configuration representing 3D poses should use a types argument [0 0 0 2 2 2 2], a configuration representing revolute and cyclic joints should use a types argument [1 1 1 ...]</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>config</strong>: the interpolated path configuration</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPathLengths
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the lengths of a path in 1, 2 or 3D Cartesian space, even if more coordinates are
provided. Each path point will have a corresponding length value (taken as the distance from the
path's first point, along the path)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#paths">path related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list pathLengths, float totalLength = sim.getPathLengths(list path, int dof,
                                                         string distCallback = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] pathLengths, float totalLength = sim.getPathLengths(float[] path, int dof,
                                                            function/string distCallback = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>path</strong>: the path, specified in row-major order, e.g. a path containing two 3D poses (position+quaternion) would be [x1 y1 z1 qx1 qy1 qz1 qw1 x2 y2 z2 qx2 qy2 qz2 qw2]</li>
<li><strong>dof</strong>: the size or dimension of path points, e.g. in case of a 3D pose, this would be 7 (however only the first 3 dimensions would be taken into account)</li>
<li><strong>distCallback</strong>: an optional function that takes as input two configurations, and returns the calculated distance between them. See also <a href="simGetConfigDistance.htm">sim.getConfigDistance</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pathLengths</strong>: the lengths corresponding to each path point</li>
<li><strong>totalLength</strong>: the total length of the path</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPersistentDataTags
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves all persistent data block tags or names
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getMatchingPersistentDataTags
sim.persistentDataRead
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetPersistentDataTags(int* tagCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>tagCount</strong>: the number of retrieved data block tags</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful or no data block exists. Otherwise the data block tags, separated by the '\0' char. In that case the returned buffer should be released with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list tags = sim.getPersistentDataTags()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string[] tags = sim.getPersistentDataTags()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>tags</strong>: an array containing the retrieved data block tags</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPluginInfo
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns auxiliary information about a loaded plugin
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setPluginInfo
sim.getPluginName
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetPluginInfo(const char* pluginName, int infoType, char** stringInfo, int* intInfo)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pluginName</strong>: name of the plugin. See <a href="simGetPluginName.htm">sim.getPluginName</a>.</li>
<li><strong>infoType</strong>: <a href="../apiConstants.htm#pluginInfos">type of information</a> to retrieve</li>
<li><strong>stringInfo</strong>: pointer to a string information, in case the information type is for a string. The user is in charge of releasing the string buffer with <a href="simReleaseBuffer_cpp.htm">sim.releaseBuffer</a></li>
<li><strong>intInfo</strong>: pointer to an integer information, in case the information type is for an integer.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
string/int info = sim.getPluginInfo(string pluginName, int infoType)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string/int info = sim.getPluginInfo(string pluginName, int infoType)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pluginName</strong>: name of the plugin. See <a href="simGetPluginName.htm">sim.getPluginName</a>.</li>
<li><strong>infoType</strong>: <a href="../apiConstants.htm#pluginInfos">type of information</a> to retrieve</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>info</strong>: the retrieved information</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPluginName
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a plugin name based on an index
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
char* simGetPluginName(int index)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>index</strong>: index to a plugin. To list-up all plugin names, start with index=0 and increment index until return value is nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>Name of the plugin or nullptr if no plugin is available at index position, or in case of an error. The user is in charge of destroying the returned name with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
string pluginName = sim.getPluginName(int index)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string pluginName = sim.getPluginName(int index)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>index</strong>: index to a plugin. To list-up all plugin names, start with index=0 and increment index until return value is None/nil</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pluginName</strong>: name of the plugin or None/nil if no plugin is available at that index position.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPointCloudOptions
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Gets various properties of a <a href="../pointClouds.htm">point cloud</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#pointCloud">point cloud related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetPointCloudOptions(int pointCloudHandle, double* maxVoxelSize, int* maxPtCntPerVoxel,
                            int* options, double* pointSize, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>maxVoxelSize</strong>: maximum size of the OC tree voxels containing points</li>
<li><strong>maxPtCntPerVoxel</strong>: maximum number of points allowed in a same OC tree voxel</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): points have random colors</li>
<li>bit1 set (2): show OC tree structure</li>
<li>bit2 set (4): reserved. keep unset</li>
<li>bit3 set (8): do not use an OC tree structure. When enabled, point cloud operations are limited, and point clouds will not be <a href="../collidableObjects.htm">collidable</a>, <a href="../measurableObjects.htm">measurable</a> or <a href="../detectableObjects.htm">detectable</a> anymore, but adding points will be much faster</li>
<li>bit4 set (16): color is emissive</li>
</ul>
</li>
<li><strong>pointSize</strong>: size of the points, in pixels</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 if operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float maxVoxelS, int maxPtCntPerVoxel, int opt, float ps = sim.getPointCloudOptions(int pcHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float maxVoxelS, int maxPtCntPerVoxel, int opt, float ps = sim.getPointCloudOptions(int pcHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pcHandle</strong>: handle of the point cloud</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>maxVoxelS</strong>: maximum size of the OC tree voxels containing points</li>
<li><strong>maxPtCntPerVoxel</strong>: maximum number of points allowed in a same OC tree voxel</li>
<li><strong>opt</strong>: bit-coded:
<ul>
<li>bit0 set (1): points have random colors</li>
<li>bit1 set (2): show OC tree structure</li>
<li>bit2 set (4): reserved. keep unset</li>
<li>bit3 set (8): do not use an OC tree structure. When enabled, point cloud operations are limited, and point clouds will not be <a href="../collidableObjects.htm">collidable</a>, <a href="../measurableObjects.htm">measurable</a> or <a href="../detectableObjects.htm">detectable</a> anymore, but adding points will be much faster</li>
<li>bit4 set (16): color is emissive</li>
</ul>
</li>
<li><strong>ps</strong>: size of the points, in pixels</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPointCloudPoints
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves point positions from a <a href="../pointClouds.htm">point cloud</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#pointCloud">point cloud related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
const double* simGetPointCloudPoints(int pointCloudHandle, int* ptCnt, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>ptCnt</strong>: pointer receiving the number of points contained in the returned pointer.</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful or if the point cloud doesn't contain any points. Otherwise a pointer to the point [x y z] positions, relative to the point cloud reference frame</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list points = sim.getPointCloudPoints(int pointCloudHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] points = sim.getPointCloudPoints(int pointCloudHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>points</strong>: the point [x y z] positions, relative to the point cloud reference frame</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getPoseInverse
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inverts a pose
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list pose = sim.getPoseInverse(list pose)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7] pose = sim.getPoseInverse(float[7] pose)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pose</strong>: the input pose</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pose</strong>: the output pose</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getQHull
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the convex hull mesh from the specified vertices
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.convexDecompose
sim.getDecimatedMesh
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetQHull(const double* inVertices, int inVerticesL, double** verticesOut, int* verticesOutL,
                int** indicesOut, int* indicesOutL, int reserved1, const double* reserved2)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>inVertices</strong>: pointer to the input vertices (succession of x/y/z values).</li>
<li><strong>inVerticesL</strong>: number of input vertices times 3.</li>
<li><strong>verticesOut</strong>: pointer to a pointer to the output vertices. The output vertices are allocated by CoppeliaSim and the user is in charge of releasing the buffer via <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
<li><strong>verticesOutL</strong>: pointer to the number of output vertices times 3.</li>
<li><strong>indicesOut</strong>: pointer to a pointer to the output indices. The output indices are allocated by CoppeliaSim and the user is in charge of releasing the buffer via <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
<li><strong>indicesOutL</strong>: pointer to the number of output indices (i.e. the number of triangles times 3).</li>
<li><strong>reserved1</strong>: reserved, set to 0.</li>
<li><strong>reserved2</strong>: reserved, set to nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 or 0 if operation was not successful.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list verticesOut, list indicesOut = sim.getQHull(list verticesIn)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] verticesOut, int[] indicesOut = sim.getQHull(float[] verticesIn)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>verticesIn</strong>: array containing the input vertices (succession of [x y z] values)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>verticesOut</strong>: array containing the output vertices (succession of [x y z] values)</li>
<li><strong>indicesOut</strong>: array containing the output indices (3 values for each triangle)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getRandom
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Generates a random value in the range between 0.0 and 1.0. The value is generated from an individual generator attached to the calling script
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
float randomValue = sim.getRandom(int seed = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float randomValue = sim.getRandom(int seed = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>seed</strong>: an optional number that can be used to seed/reseed the random number generator. Leave empty or set to None/nil if the generator should not be reseeded.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>randomValue</strong>: a random number in the range of 0.0 and 1.0</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getRealTimeSimulation
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Indicates whether the simulation is real-time
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simGetRealTimeSimulation()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 if simulation is real-time, 0 if it is not, and -1 if the operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.getRealTimeSimulation()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.getRealTimeSimulation()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 1 if simulation is real-time, or 0 if it is not</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getReferencedHandles
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a list of custom handles, linking a given scene object to other scene objects
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setReferencedHandles
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetReferencedHandles(int objectHandle, int** referencedHandles, int** reserved1,
                            int** reserved2)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the scene object that stores the list of handles. Can be optionally combined with <em>sim.handleflag_keeporiginal</em>, in which case the handles that link to originals are retrieved.</li>
<li><strong>referencedHandles</strong>: a pointer to a pointer that will be allocated and receive the list of scene object handles. The user is in charge of releasing that buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
<li><strong>reserved1</strong>: reserved for future extensions</li>
<li><strong>reserved2</strong>: reserved for future extensions</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error. Otherwise, the number of handles returned.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list referencedHandles = sim.getReferencedHandles(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] referencedHandles = sim.getReferencedHandles(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the scene object that stores the list of handles. Can be optionally combined with <em>sim.handleflag_keeporiginal</em>, in which case the handles that link to originals are retrieved.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>referencedHandles</strong>: an array with scene object handles</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getRotationAxis
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an axis and rotation angle that brings one pose or transformation matrix
onto another one. The translation part of the poses/matrices is ignored. This function,
when used in combination with <a href="simRotateAroundAxis.htm">sim.rotateAroundAxis</a>,
can be used to build interpolations between transformation matrices
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetRotationAxis(const double* matrixStart, const double* matrixGoal, double* axis,
                       double* angle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrixStart</strong>: the <em>start</em> transformation matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>matrixGoal</strong>: the <em>goal</em> transformation matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>axis</strong>: the returned rotation axis in absolute coordinates (array of 3 values [Vx Vy Vz])</li>
<li><strong>angle</strong>: the returned rotation angle</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list axis, float angle = sim.getRotationAxis(list poseStart/matrixStart, list poseGoal/matrixGoal)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3] axis, float angle = sim.getRotationAxis(float[7]/float[12] poseStart/matrixStart,
                                                 float[7]/float[12] poseGoal/matrixGoal)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>poseStart/matrixStart</strong>: the <em>start</em> pose (array of 7 values [x y z qx qy qz qw]) or transformation matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>poseGoal/matrixGoal</strong>: the <em>goal</em> pose (array of 7 values [x y z qx qy qz qw]) or transformation matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>axis</strong>: the rotation axis in absolute coordinates [Vx Vy Vz]</li>
<li><strong>angle</strong>: the rotation angle</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getScaledImage
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Generates a scaled-up or scaled down version of the input image
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.transformImage
sim.loadImage
sim.saveImage
sim.setVisionSensorImg
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
unsigned char* simGetScaledImage(const unsigned char* imageIn, const int* resolutionIn,
                                 const int* resolutionOut, int options, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>imageIn</strong>: pointer to rgb or rgba values of the input image.</li>
<li><strong>resolutionIn</strong>: resolution of the input image.</li>
<li><strong>resolutionOut</strong>: desired resolution of the output image. The values will be replaced by the effective resolution of the output image</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): the input image is rgba, otherwise it is rgb</li>
<li>bit1 set (2): the returned image is rgba, otherwise it is rgb</li>
<li>bit2-3: 0:ignore aspect ratio, 4:keep aspect ratio (the effective resolution of the returned image will be different), 8:keep aspect ratio by expanding (the effective resolution of the returned image will be different)</li>
<li>bit4 set (16): no smooth transformation</li>
</ul>
</li>
<li><strong>reserved</strong>: Reserved for future extension. Set to nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful, otherwise a buffer containing the output image data. The user is in charge of releasing the buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes imageOut, list effectiveRolutionOut = sim.getScaledImage(bytes imageIn, list resolutionIn,
                                                               list desiredResolutionOut,
                                                               int options)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer imageOut, int[2] effectiveResolutionOut = sim.getScaledImage(buffer imageIn,
                                                                    int[2] resolutionIn,
                                                                    int[2] desiredResolutionOut,
                                                                    int options)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>imageIn</strong>: image buffer (rgb or rgba values)</li>
<li><strong>resolutionIn</strong>: resolution of the input image</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): the input image is rgba, otherwise it is rgb</li>
<li>bit1 set (2): the returned image is rgba, otherwise it is rgb</li>
<li>bit2-3: 0:ignore aspect ratio, 4:keep aspect ratio (the effective resolution of the returned image will be different), 8:keep aspect ratio by expanding (the effective resolution of the returned image will be different)</li>
<li>bit4 set (16): no smooth transformation</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>imageOut</strong>: buffer containing the output image data</li>
<li><strong>effectiveResolutionOut</strong>: resolution of the generated image</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getScript
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the handle of a script 
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
int scriptHandle = sim.getScript(int scriptType, int objectHandle = -1, string scriptName = '')
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int scriptHandle = sim.getScript(int scriptType, int objectHandle = -1, string scriptName = '')
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptType</strong>: <a href="../apiConstants.htm#scriptTypes">type of the script</a>, or sim.handle_self</li>
<li><strong>objectHandle</strong>: handle of the object the script is attached to, in case of a child- or customization script</li>
<li><strong>scriptName</strong>: name of the add-on, in case of an add-on</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script, or -1 if the script does not exist</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getScriptFunctions
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a map of another script functions, that can be called
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.callScriptFunction
==================== apiSeeAlso ====================>

==================== apiSynopsisLua ====================<
map object = sim.getScriptFunctions(int scriptHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: the handle of the script. See <a href="simGetScript.htm">sim.getScript</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>object</strong>: a meta object. Functions can be called with object:functionName()</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetScriptHandleEx
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the handle of a script.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simGetScriptHandleEx(int scriptType, int objectHandle, const char* scriptName)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptType</strong>: the <a href="../apiConstants.htm#scriptTypes">type of the script</a>.</li>
<li><strong>objectHandle</strong>: the object handle the script is attached to (in case of child- or customization scripts. Can be -1.</li>
<li><strong>scriptName</strong>: the path of the object the script is attached to (in case of child- or customization scripts), or the name of the add-on. Can be nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>handle of the script, or -1 if the script does not exist.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getScriptInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an int32 parameter of a script
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#scriptParameters">functions related to script parameters</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetScriptInt32Param(int scriptHandle, int parameterID, int* parameter)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../apiConstants.htm#scriptParameters">list of all possible script parameters</a></li>
<li><strong>parameter</strong>: retrieved parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be retrieved, or 1 if operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int parameter = sim.getScriptInt32Param(int scriptHandle, int parameterID)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int parameter = sim.getScriptInt32Param(int scriptHandle, int parameterID)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../apiConstants.htm#scriptParameters">list of all possible script parameters</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: retrieved parameter.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getScriptStringParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a string parameter of a script
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#scriptParameters">functions related to script parameters</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetScriptStringParam(int scriptHandle, int parameterID, int* parameterLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../apiConstants.htm#scriptParameters">list of all possible script parameters</a></li>
<li><strong>parameterLength</strong>: the length of the retrieved parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>A buffer containing the retrieved string, or nullptr in case of an error. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>. The returned buffer might contain embedded zeros, and its length is specified by the parameterLength argument.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes parameter = sim.getScriptStringParam(int scriptHandle, int parameterID)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer parameter = sim.getScriptStringParam(int scriptHandle, int parameterID)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script. Can be combined with sim.handle_self to target the current script</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../apiConstants.htm#scriptParameters">list of all possible script parameters</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: buffer</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getShapeBB
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the size of a shape's bounding box
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#size">size and scaling functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list size = sim.getShapeBB(int shapeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3] size = sim.getShapeBB(int shapeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>size</strong>: size of the bounding box</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getShapeColor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the color of a shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#rendering">rendering related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetShapeColor(int shapeHandle, const char* colorName, int colorComponent, float* rgbData)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>colorName</strong>: name of a color. If a name is provided, a specific color component will be retrieved (e.g. if a shape is a compound shape. Can be nullptr. If colorName is <em>@compound</em>, then rgb data for every component of a compound shape will be returned (in that case make sure to have enough space in <em>rgbData</em>, e.g. via simGetObjectInt32Param(shapeHandle,sim.shapeintparam_component_cnt))</li>
<li><strong>colorComponent</strong>: <a href="../apiConstants.htm#colorComponents">color component</a>.</li>
<li><strong>rgbData</strong> (output): red, green and blue components of the color (3 values), or the transparency value (1 value)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if the color name was not found in the shape. Otherwise, the operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, list rgbData = sim.getShapeColor(int shapeHandle, string colorName, int colorComponent)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, float[3] rgbData = sim.getShapeColor(int shapeHandle, string colorName,
                                                 int colorComponent)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>colorName</strong>: name of a color. If a non-empty name is provided, a specific color component is retrieved (e.g. if a shape is a compound shape. If colorName is <em>@compound</em>, then rgb data for every component of a compound shape is returned)</li>
<li><strong>colorComponent</strong>: <a href="../apiConstants.htm#colorComponents">color component</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the color name was not found in the shape, 1 otherwise</li>
<li><strong>rgbData</strong>: red, green and blue components of the color (3 values), or the transparency value (1 value)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getShapeGeomInfo
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves geometric information related to a shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getShapeMesh
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetShapeGeomInfo(int shapeHandle, int* intData, double* floatData, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>intData (output)</strong>: pointer to 5 integer values:</li>
<li>intData[0]: the <a href="../apiConstants.htm#primitiveTypes">primitive type</a> of the shape. Undefined if the shape is a compound shape.</li>
<li><strong>floatData (output)</strong>: pointer to 5 double values:
<ul>
<li>floatData[0]: X-size or diameter of the primitive shape. Undefined if the shape is a compound shape or not primitive.</li>
<li>floatData[1]: Y-size of the primitive shape. Undefined if the shape is a compound shape or not primitive.</li>
<li>floatData[2]: Z-size or height of the primitive shape. Undefined if the shape is a compound shape or not primitive.</li>
<li>floatData[3]: Reserved.</li>
</ul>
</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise bit-coded:
<ul>
<li>bit0 set (1): shape is a compound shape</li>
<li>bit1 set (2): shape is primitive</li>
<li>bit2 set (4): shape is convex</li>
</ul>
</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, int pureType, list dimensions = sim.getShapeGeomInfo(int shapeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, int pureType, float[4] dimensions = sim.getShapeGeomInfo(int shapeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: bit-coded:
<ul>
<li>bit0 set (1): shape is a compound shape</li>
<li>bit1 set (2): shape is a primitive</li>
<li>bit2 set (4): shape is convex</li>
</ul>
</li>
<li><strong>pureType</strong>: the <a href="../apiConstants.htm#pureTypes">primitive type</a> of the shape. Undefined if the shape is a compound shape.</li>
<li><strong>dimensions</strong>: array of 4 values giving information about the shape's dimensions (indexing (i) starts from 0 for Python and 1 for Lua):
<ul>
<li>dimensions[i+0]: X-size or diameter of the primitive shape. Undefined if the shape is a compound shape or not primitive</li>
<li>dimensions[i+1]: Y-size of the primitive shape. Undefined if the shape is a compound shape or not primitive</li>
<li>dimensions[i+2]: Z-size or height of the primitive shape. Undefined if the shape is a compound shape or not primitive</li>
<li>dimensions[i+3]: Inside scaling. Undefined if the shape is a compound shape or not primitive</li>
</ul>
</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getShapeInertia
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the inertia information from a shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setShapeInertia
sim.getShapeMass
sim.computeMassAndInertia
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetShapeInertia(int shapeHandle, double* inertiaMatrix, double* com)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the <a href="../shapes.htm">shape object</a></li>
<li><strong>inertiaMatrix</strong> (output): inertia matrix (9 values), expressed relative to the shape's reference frame orientation. The matrix is symmetric</li>
<li><strong>com</strong> (output): a transformation matrix [0 0 0 P0 0 0 0 P1 0 0 0 P2] indicating the center of mass, expressed relative to the shape's reference frame. The matrix does not contain any rotational part (only the positional values are relevant).</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list inertiaMatrix, list com = sim.getShapeInertia(int shapeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[9] inertiaMatrix, float[12] com = sim.getShapeInertia(int shapeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the <a href="../shapes.htm">shape object</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>inertiaMatrix</strong> (output): inertia matrix (9 values), expressed relative to the shape's reference frame orientation. The matrix is symmetric</li>
<li><strong>com</strong> (output): a transformation matrix [0 0 0 P0 0 0 0 P1 0 0 0 P2] indicating the center of mass, expressed relative to the shape's reference frame. The matrix does not contain any rotational part (only the positional values are relevant).</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getShapeMass
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the mass of a shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setShapeMass
sim.getShapeInertia
sim.computeMassAndInertia
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetShapeMass(int shapeHandle, double* mass)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the <a href="../shapes.htm">shape object</a></li>
<li><strong>mass</strong>: mass of the shape</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float mass = sim.getShapeMass(int shapeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float mass = sim.getShapeMass(int shapeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the <a href="../shapes.htm">shape object</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>mass</strong>: mass of the shape</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getShapeMesh
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a shape's mesh information
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getShapeViz
sim.createShape
sim.exportMesh
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetShapeMesh(int shapeHandle, double** vertices, int* verticesSize, int** indices,
                    int* indicesSize, double** normals)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>vertices</strong>: receives the vertices. The user is in charge of destroying the array with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>. See <a href="simExportMesh.htm">simExportMesh</a> for a usage example.</li>
<li><strong>verticesSize</strong>: receives the size of the vertices array. See <a href="simExportMesh.htm">simExportMesh</a> for a usage example.</li>
<li><strong>indices</strong>: receives the indices. The user is in charge of destroying the array with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>. See <a href="simExportMesh.htm">simExportMesh</a> for a usage example.</li>
<li><strong>indicesSize</strong>: receives the size of the indice array. See <a href="simExportMesh.htm">simExportMesh</a> for a usage example.</li>
<li><strong>normals</strong>: receives the normals (3 times the size of indicesSize). The user is in charge of destroying the array with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>. Can be nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list vertices, list indices, list normals = sim.getShapeMesh(int shapeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] vertices, int[] indices, float[] normals = sim.getShapeMesh(int shapeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape. See <a href="simExportMesh.htm">sim.exportMesh</a> for a usage example.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>vertices</strong>: array of vertices</li>
<li><strong>indices</strong>: array of indices</li>
<li><strong>normals</strong>: array of normals</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getShapeTextureId
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the texture ID of a texture that is applied to a specific shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getTextureId
sim.setShapeTexture
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetShapeTextureId(int shapeHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>The texture ID, or -1 if the texture does not exist or in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int textureId = sim.getShapeTextureId(int shapeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int textureId = sim.getShapeTextureId(int shapeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>textureId</strong>: texture ID, or -1 if texture does not exist</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getShapeViz
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a shape's visual information.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simGetShapeViz(int shapeHandle, int index, struct SShapeVizInfo* info)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>index</strong>: 0-based index of the shape element to retrieve (compound shapes contain more than one shape element)</li>
<li><strong>info</strong>: visual information about the shape:
<ul>
<li><strong>vertices</strong>: array of vertices, relative to the shape's reference frame. The user is in charge of releasing this buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a> if the return value is &gt; 0.</li>
<li><strong>verticesSize</strong>: the size of the vertices array</li>
<li><strong>indices</strong>: array of indices. The user is in charge of releasing this buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a> if the return value is &gt; 0.</li>
<li><strong>indicesSize</strong>: the size of the indices array</li>
<li><strong>normals</strong>: array of normals, relative to the shape's reference frame. There are 3*indicesSize normals, i.e. 3 normals per triangle. The user is in charge of releasing this buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a> if the return value is &gt; 0.</li>
<li><strong>shadingAngle</strong>: the gouraud shading angle</li>
<li><strong>colors[9]</strong>: array of colors: RGB for ambient-diffuse,  specular, and  emission.</li>
<li><strong>texture</strong>: the RGBA texture (32bit/pixel). The user is in charge of releasing this buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a> if the return value is &gt; 1.</li>
<li><strong>textureId</strong>: a texture id (to identify textures shared among several shapes)</li>
<li><strong>textureRes[2]</strong>: the resolution of the texture</li>
<li><strong>textureCoords</strong>: the texture coordinates. There are 3*indicesSize texture coordinates, i.e. 3 coordinates per triangle. The user is in charge of releasing this buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a> if the return value is &gt; 1.</li>
<li><strong>textureApplyMode</strong>: 0=modulate, 1=decal, 2=add</li>
<li><strong>textureOptions</strong>: bit-coded:
<ul>
<li>bit0 set (1): repeat U</li>
<li>bit1 set (2): repeat V</li>
<li>bit2 set (4): interpolate colors</li>
<li>bit3 set (8): wireframe</li>
</ul>
</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, 0 if there is no shape element at the given indexm, 1 if the shape element does not contain any texture, 2 if the shape element contains a texture</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
dict data = sim.getShapeViz(int shapeHandle, int index)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
table data = sim.getShapeViz(int shapeHandle, int index)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape.</li>
<li><strong>index</strong>: 0-based index of the shape element to retrieve (compound shapes contain more than one shape element)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>data.vertices</strong>: array containing the  vertices, relative to the shape's reference frame</li>
<li><strong>data.indices</strong>: array containing the indices</li>
<li><strong>data.normals</strong>: array containing the normals, relative to the shape's reference frame</li>
<li><strong>data.colors</strong>: array containing the colors: RGB for ambient-diffuse,  specular, and  emission.</li>
<li><strong>data.shadingAngle</strong>: the gouraud shading angle</li>
<li><strong>data.transparency</strong>: 1=transparent, 0= opaque</li>
<li><strong>data.options</strong>: bit-coded:
<ul>
<li>bit0 set (1): backface culling</li>
<li>bit1 set (2): wireframe</li>
</ul>
</li>
<li><strong>data.texture.texture</strong>: string-coded RGBA texture. See also <a href="simTransformBuffer.htm">sim.transformBuffer</a></li>
<li><strong>data.texture.id</strong>: texture id (to identify textures shared among several shapes)</li>
<li><strong>data.texture.resolution</strong>: resolution of the texture</li>
<li><strong>data.texture.coordinates</strong>: texture coordinates</li>
<li><strong>data.texture.applyMode</strong>: 0=modulate, 1=decal, 2=add</li>
<li><strong>data.texture.options</strong>: bit-coded:
<ul>
<li>bit0 set (1): repeat U</li>
<li>bit1 set (2): repeat V</li>
<li>bit2 set (4): interpolate colors</li>
</ul
</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getSignalName
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the signal name at the given index.  Use this function in a loop until return is nullptr to read all set signals
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetSignalName(int signalIndex, int signalType)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalIndex</strong>: zero based index</li>
<li><strong>signalType</strong>: signal type. 0 is for integer signals, 1 for double signals, 2 for string signals and 3 ffor double signals.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful or signal does not exist at this index, otherwise the name of the signal at the given index (the user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>)</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
string signalName = sim.getSignalName(int signalIndex, int signalType)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string signalName = sim.getSignalName(int signalIndex, int signalType)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalIndex</strong>: zero based index</li>
<li><strong>signalType</strong>: signal type:
<ul>
<li>0: integer signals</li>
<li>2: string signals</li>
<li>3: float signals</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal at the given index</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getSimulationState
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves current <a href="../apiConstants.htm#simulationStatus">simulation state</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../simulation.htm">simulation state diagram</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetSimulationState()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>The current state of the simulation (sim.simulation_stopped, sim.simulation_paused, etc. (see the <a href="../apiConstants.htm#simulationStatus">simulation state values</a>)), or -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int simulationState = sim.getSimulationState()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int simulationState = sim.getSimulationState()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>simulationState</strong> current <a href="../apiConstants.htm#simulationStatus">state of the simulation</a></li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getSimulationStopping
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Convenience function that returns true when the simulation is about to stop or stopped.
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
bool stopping = sim.getSimulationStopping()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool stopping = sim.getSimulationStopping()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>stopping</strong>: if true, the simulation is about to stop, or stopped.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getSimulationTime
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the current simulation time
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
double simGetSimulationTime()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>negative value (-1.0) if operation not successful, otherwise the simulation time</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float simulationTime = getSimulationTime()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float simulationTime = getSimulationTime()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>simulationTime</strong>: simulation time</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getSimulationTimeStep
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the simulation time step (the simulation time (i.e. not real-time) that
passes at each main script simulation pass). This value might not be constant for a given simulation.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
double simGetSimulationTimeStep()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>negative value (-1.0) if operation not successful, otherwise the simulation time step</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
float timeStep = sim.getSimulationTimeStep()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float timeStep = sim.getSimulationTimeStep()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>timeStep</strong>: simulation time step</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getSimulatorMessage
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves and removes the next message in the C/C++ or Lua message queues. Use this in a while-loop until
all messages have been extracted. While the C/C++ interface has one single message queue, each Lua script
has its own message queue. The C/C++ version of this function should only be called from the CoppeliaSim
client application. A given message queue cannot hold more than 64 messages, unread messages will be discarded.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
char* simGetSimulatorMessage(int* messageID, int* auxiliaryData, int* returnedDataSize)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li>
    <strong>messageID</strong>: a simulator message
    (see the <a href="../apiConstants.htm#simulatorMessages">simulator messages</a>) or -1 if
    no message is available or in case of an error
</li>
<li><strong>auxiliaryData</strong>: array of 4 integers that can describe the returned message in more details</li>
<li><strong>returnedDataSize</strong>: size of the returned buffer</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if no buffer was returned, otherwise a buffer that should be released with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int message, list auxiliaryData, list auxiliaryData2 = sim.getSimulatorMessage()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int message, int[4] auxiliaryData, int[] auxiliaryData2 = sim.getSimulatorMessage()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>message</strong>: <a href="../apiConstants.htm#simulatorMessages">simulator message</a></li>
<li><strong>auxiliaryData</strong>: array of numbers that describe the returned message in more details</li>
<li><strong>auxiliaryData2</strong>: array of numbers that describe the returned message in more details</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackBoolValue
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Tries to retrieve the value at the top of the stack, if that value is a bool
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackBoolValue(int stackHandle, bool* boolValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>boolValue</strong>: a pointer to a location receiving the bool value.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the value is not a bool, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackDoubleTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a double-precision double array from an array-type table at the top of the stack.
Table values that are not numbers are converted to 0.0
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simGetStackTableInfo
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackDoubleTable(int stackHandle, double* array, int count)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>array</strong>: a pointer to a location receiving the double values. Use <a href="simGetStackTableInfo_cpp.htm">simGetStackTableInfo</a> to determine the number of values the table contains.</li>
<li><strong>count</strong>: the size of the array. If the array is bigger than the table, it will be padded with 0.0.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if item is not an array or does not contain only numbers, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackDoubleValue
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Tries to retrieve the value at the top of the stack, if that value is a number
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackDoubleValue(int stackHandle, double* numberValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>numberValue</strong>: a pointer to a location receiving the double value.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the value is not a number, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackFloatTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a float array from an array-type table at the top of the stack.
Table values that are not numbers are converted to 0.0
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simGetStackTableInfo
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackFloatTable(int stackHandle, float* array, int count)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>array</strong>: a pointer to a location receiving the float values. Use <a href="simGetStackTableInfo_cpp.htm">simGetStackTableInfo</a> to determine the number of values the table contains.</li>
<li><strong>count</strong>: the size of the array. If the array is bigger than the table, it will be padded with 0.0.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if item is not an array or does not contain only numbers, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackFloatValue
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Tries to retrieve the value at the top of the stack, if that value is a number
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackFloatValue(int stackHandle, float* numberValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>numberValue</strong>: a pointer to a location receiving the float value.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the value is not a number, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackInt32Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an int32 array from an array-type table at the top of the stack.
Table values that are not numbers are converted to 0
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simGetStackTableInfo
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackInt32Table(int stackHandle, int* array, int count)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>array</strong>: a pointer to a location receiving the integer values. Use <a href="simGetStackTableInfo_cpp.htm">simGetStackTableInfo</a> to determine the number of values the table contains.</li>
<li><strong>count</strong>: the size of the array. If the array is bigger than the table, it will be padded with 0.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if item is not an array or does not contain only numbers, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackInt32Value
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Tries to retrieve the value at the top of the stack, if that value is a number
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackInt32Value(int stackHandle, int* numberValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>numberValue</strong>: a pointer to a location receiving the int32 value.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the value is not a number, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackInt64Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an int64 array from an array-type table at the top of the stack.
Table values that are not numbers are converted to 0
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simGetStackTableInfo
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackInt64Table(int stackHandle, long long int* array, int count)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>array</strong>: a pointer to a location receiving the integer values. Use <a href="simGetStackTableInfo_cpp.htm">simGetStackTableInfo</a> to determine the number of values the table contains.</li>
<li><strong>count</strong>: the size of the array. If the array is bigger than the table, it will be padded with 0.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if item is not an array or does not contain only numbers, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackInt64Value
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Tries to retrieve the value at the top of the stack, if that value is a number
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackInt64Value(int stackHandle, long long int* numberValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>numberValue</strong>: a pointer to a location receiving the int64 value.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the value is not a number, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackItemType
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the type of a specific stack item
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackItemType(int stackHandle, int cIndex)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>cIndex</strong>: the zero-based index of the stack item. Negative values indicate reverse counting from the top of the stack (i.e. -1 indicates the stack top)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise the <a href="../apiConstants.htm#stackItemTypes">stack item type</a></li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackSize
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the size of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackSize(int stackHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise the size of the stack.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackStringValue
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Tries to retrieve the value at the top of the stack, if that value is a string
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetStackStringValue(int stackHandle, int* stringSize)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>stringSize</strong>: a pointer to a location receiving the size of the string. Can be nullptr if the string size is of no interest.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>in case of an error, the return value is nullptr and <em>stringSize</em> is set to -1. If the stack item is not a string, the return value is nullptr and <em>stringSize</em> is set to 0. If the stack item is a string, the return value is not nullptr, and <em>stringSize</em> is the size of the string buffer (in that case, the user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>)</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackTableInfo
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Tries to retrieve information about a possible table at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackTableInfo(int stackHandle, int infoType)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>infoType</strong>: type of information desired:
<ul>
<li><strong>0</strong>: whether we have a table, whether the table is an array-type or map-type, and the size of the array-type table</li>
<li><strong>1</strong>: whether the table contains only null values.</li>
<li><strong>2</strong>: whether the table contains only number values.</li>
<li><strong>3</strong>: whether the table contains only bool values.</li>
<li><strong>4</strong>: whether the table contains only string values.</li>
<li><strong>5</strong>: whether the table contains only table values.</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise one of following:
<ul>
<li>if <em>infoType</em> is 0: a <a href="../apiConstants.htm#stackTableInfo">stack table information value</a>. If the returned value is >0, then this means the table is an array-type table, containing value-key pairs, where all the keys are numbers, consecutive, and starting at 1. Use <a href="simUnfoldStackTable_cpp.htm">simUnfoldStackTable</a> to read the content of the table.</li>
<li>if <em>infoType</em> is 1: 1 if the table contains only null values</li>
<li>if <em>infoType</em> is 2: 1 if the table contains only number values</li>
<li>if <em>infoType</em> is 3: 1 if the table contains only bool values</li>
<li>if <em>infoType</em> is 4: 1 if the table contains only string values</li>
<li>if <em>infoType</em> is 5: 1 if the table contains only table values</li>
</ul>
</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getStackTraceback
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Retrieves and clears the last generated stack traceback for a script
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simGetLastError
sim.getScript
==================== apiSeeAlso ====================>

==================== apiSynopsisLua ====================<
string stackTraceback = sim.getStackTraceback(int scriptHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: the script handle from which the traceback is desired. If omitted, then the calling script's traceback will be retrieved and cleared.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>stackTraceback</strong> the stack traceback</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetStackUInt8Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a uint8 array from an array-type table at the top of the stack.
Table values that are not numbers are converted to 0
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simGetStackTableInfo
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetStackUInt8Table(int stackHandle, unsigned char* array, int count)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>array</strong>: a pointer to a location receiving the uint8 values. Use <a href="simGetStackTableInfo_cpp.htm">simGetStackTableInfo</a> to determine the number of values the table contains.</li>
<li><strong>count</strong>: the size of the array. If the array is bigger than the table, it will be padded with 0.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if item is not an array or does not contain only numbers, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getStringParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves a string parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiConstants.htm#stringParameters">string parameter identifiers</a>
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetStringParam(int parameter)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#stringParameters">string parameter identifier</a></li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful. Otherwise the string parameter. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
string parameterValue = sim.getStringParam(int parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string parameterValue = sim.getStringParam(int parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#stringParameters">string parameter identifier</a></li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>parameterValue</strong>: the string parameter</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getStringSignal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Gets the value of a string signal
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simGetStringSignal(const char* signalName, int* stringLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>stringLength</strong>: the size of the returned string, since it may contain any data (also embedded zeros).</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful or signal does not exist, otherwise the value of the string signal (which may contain any value, including embedded zeros). In that case the returned buffer should be released with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes signalValue = sim.getStringSignal(string signalName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer signalValue = sim.getStringSignal(string signalName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>signalValue</strong>: value of the signal, or None/nil if signal does not exist</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getSystemTime
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the system time.
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
float systemTime = sim.getSystemTime()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float systemTime = sim.getSystemTime()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>systemTime</strong>: the system time</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getTextureId
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the texture ID of a specific texture
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readTexture
sim.writeTexture
sim.createTexture
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetTextureId(const char* textureName, int* resolution)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>textureName</strong>: name of the texture ID to be retrieved.</li>
<li><strong>resolution</strong>: pointer to 2 integer values representing the resolution of the texture. Can be nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>The texture ID, or -1 if the texture does not exist or in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int textureId, list resolution = sim.getTextureId(string textureName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int textureId, int[2] resolution = sim.getTextureId(string textureName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>textureName</strong>: name of the texture ID to be retrieved</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>textureId</strong>: the texture ID, or -1 if the texture does not exist</li>
<li><strong>resolution</strong>: an array of 2 values representing the resolution of the texture</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simGetUInt64Parameter
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves an unsigned 64bit integer value
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiConstants.htm#uinteger64Parameters">uint64 parameter identifiers</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
unsigned long long int simGetUInt64Parameter(int parameter, unsigned long long int* intState)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#uinteger64Parameters">uint64 parameter identifier</a></li>
<li><strong>intState</strong>: value of the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getUserVariables
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Returns all variables, except those set by CoppeliaSim.
==================== apiDescription ====================>

==================== apiSynopsisLua ====================<
string[] variables = sim.getUserVariables()
==================== apiSynopsisLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>variables</strong>: a map-like table with all global user variables</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getVelocity
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the linear and/or angular velocity of the center of mass of a non-static shape.
Data is provided by the selected physics engine
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectVelocity
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGetVelocity(int shapeHandle, double* linearVelocity, double* angularVelocity)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of a dynamically enabled shape</li>
<li><strong>linearVelocity</strong>: pointer to 3 values that will receive the linear velocity in absolute coordinates. Can be nullptr</li>
<li><strong>angularVelocity</strong>: pointer to 3 values that will receive the angular velocity in absolute coordinates. The length of the vector represents the rotation speed, and the vector direction represents the rotation axis passing through the center of mass of the shape. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list linearVelocity, list angularVelocity = sim.getVelocity(int shapeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3] linearVelocity, float[3] angularVelocity = sim.getVelocity(int shapeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of a dynamically enabled shape</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>linearVelocity</strong>: array of 3 values that represent the linear velocity in absolute coordinates</li>
<li><strong>angularVelocity</strong>: array of 3 values that represent the angular velocity in absolute coordinates. The length of the vector represents the rotation speed, and the vector direction represents the rotation axis passing through the center of mass of the shape</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getVisionSensorDepth
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads the depth buffer of a vision sensor. The returned data doesn't make sense if
<a href="simHandleVisionSensor.htm">sim.handleVisionSensor</a> wasn't called previously
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#visionSensor">vision sensor related API functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
float* simGetVisionSensorDepth(int sensorHandle, int options, const int* pos, const int* size,
                               int* resolution)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor</li>
<li><strong>options</strong>: options, bit-coded:
<ul>
<li>bit0 set (1): the returned values indicate distances in meters, otherwise return values are in the range of 0.0 - 1.0 (0.0 = closest to sensor (i.e. close clipping plane), 1.0 = farthest from sensor (i.e. far clipping plane))</li>
</ul>
</li>
<li><strong>pos</strong>: position of the depth buffer portion to retrieve. Can be nullptr, which defaults to [0 0]</li>
<li><strong>size</strong>: size of the depth buffer portion to retrieve. Can be nullptr, which defaults to [0 0], which corresponds to [resolutionX resolutionY]</li>
<li><strong>resolution</strong>: the returned vision sensor resolution. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>the depth buffer or nullptr in case of an error. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes depth = sim.getVisionSensorDepth(int sensorHandle, int options = 0, list pos = [0, 0],
                                       list size = [0, 0])
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer depth, int[2] resolution = sim.getVisionSensorDepth(int sensorHandle, int options = 0,
                                                           int[2] pos = {0, 0}, int[2] size = {0, 0})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor</li>
<li><strong>options</strong>: options, bit-coded:
<ul>
<li>bit0 set (1): the returned values indicate distances in meters, otherwise return values are in the range of 0.0 - 1.0 (0.0 = closest to sensor (i.e. close clipping plane), 1.0 = farthest from sensor (i.e. far clipping plane))</li>
</ul>
</li>
<li><strong>pos</strong>: position of the depth buffer portion to retrieve. Defaults to [0 0]</li>
<li><strong>size</strong>: size of the depth buffer portion to retrieve. Defaults to [0 0], which corresponds to [resolutionX resolutionY]</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>depth</strong>: the depth buffer. Use <a href="simUnpackFloatTable.htm">sim.unpackFloatTable</a> to obtain an array of values</li>
<li><strong>resolution</strong>: the vision sensor resolution</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getVisionSensorImg
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads the image of a vision sensor. The returned data doesn't make sense if
<a href="simHandleVisionSensor.htm">sim.handleVisionSensor</a> wasn't called previously
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.saveImage
<a href="../apiFunctions.htm#visionSensor">vision sensor related API functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
unsigned char* simGetVisionSensorImg(int sensorHandle, int options, double rgbaCutOff,
                                     const int* pos, const int* size, int* resolution)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor</li>
<li><strong>options</strong>: options, bit-coded:
<ul>
<li>bit0 set (1): the returned image will by a greyscale image (1 byte per pixel), otherwise an RGB image</li>
<li>bit1 set (2): the returned image will have one additional byte per pixel, as alpha channel (RGBA or greyscale+A)</li>
</ul>
</li>
<li><strong>rgbaCutOff</strong>: when an RGBA image is returned, the alpha component will be 255 for all depth values below <em>rgbaCutOff</em>, and 0 for all depth values above <em>rgbaCutOff</em>. 0 corresponds to the near clipping plane, 1 to the far clipping plane</li>
<li><strong>pos</strong>: position of the image portion to retrieve. Can be nullptr, which defaults to [0 0]</li>
<li><strong>size</strong>: size of the image portion to retrieve. Can be nullptr which defaults to [0 0], which corresponds to [resolutionX resolutionY]</li>
<li><strong>resolution</strong>: the returned vision sensor resolution. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>the image buffer or nullptr in case of an error. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes image, list resolution = sim.getVisionSensorImg(int sensorHandle, int options = 0,
                                                      float rgbaCutOff = 0.0, list pos = [0, 0],
                                                      list size = [0, 0])
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer image, int[2] resolution = sim.getVisionSensorImg(int sensorHandle, int options = 0,
                                                         float rgbaCutOff = 0.0, pos = {0, 0},
                                                         size = {0, 0})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor</li>
<li><strong>options</strong>: options, bit-coded:
<ul>
<li>bit0 set (1): the returned image will by a greyscale image (1 byte per pixel), otherwise an RGB image</li>
<li>bit1 set (2): the returned image will have one additional byte per pixel, as alpha channel (RGBA or greyscale+A)</li>
</ul>
</li>
<li><strong>rgbaCutOff</strong>: when an RGBA image is returned, the alpha component is 255 for all depth values below <em>rgbaCutOff</em>, and 0 for all depth values above <em>rgbaCutOff</em>. 0.0 corresponds to the near clipping plane, 1.0 to the far clipping plane</li>
<li><strong>pos</strong>: position of the image portion to retrieve. Default is [0 0]</li>
<li><strong>size</strong>: size of the image portion to retrieve. Default is [0 0], which corresponds to [resolutionX resolutionY]</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>image</strong>:the image buffer. Use <a href="simUnpackUInt8Table.htm">sim.unpackUInt8Table</a> to obtain an array of integer values</li>
<li><strong>resolution</strong>: the vision sensor resolution</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.getVisionSensorRes
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns the resolution of the vision sensor
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simGetVisionSensorRes(int sensorHandle, int* resolution)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor</li>
<li><strong>resolution</strong>: 2 values for the x and y component</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list resolution = sim.getVisionSensorRes(int sensorHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[2] resolution = sim.getVisionSensorRes(int sensorHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>resolution</strong>: array containing the x and y resolution</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.groupShapes
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Groups (or merges) several shapes into a <a href="../shapes.htm">compound shape</a> (or <a href="../shapes.htm">simple shape</a>)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.ungroupShape
sim.alignShapeBB
sim.relocateShapeFrame
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simGroupShapes(const int* shapeHandles, int shapeCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandles</strong>: the handles of the shapes to be grouped or merged. The last handle represents the shape that will accept the other shapes.</li>
<li><strong>shapeCount</strong>: the size of the <strong>shapeHandles</strong> array. A negative number indicates that we want to merge the shapes instead of grouping them.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. Otherwise the handle of the resulting compound shape, which is the last shape in shapeHandles.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int shapeHandle = sim.groupShapes(list shapeHandles, bool merge = False)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int shapeHandle = sim.groupShapes(int[] shapeHandles, bool merge = false)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandles</strong>: handles of the shapes to be grouped or merged. The last handle represents the shape that will accept the other shapes</li>
<li><strong>merge</strong>: whether the shapes should be merged or grouped</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: the handle of the resulting compound shape, which is the last shape in <em>shapeHandles</em></li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleAddOnScripts
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Calls a specific function in <a href="../addOns.htm">add-ons</a>.  
Should only be called from the <a href="../mainScript.htm">main script</a>
==================== apiDescription ====================>

==================== apiSynopsisLua ====================<
int count = sim.handleAddOnScripts(int callType)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>callType</strong>: desired system call type (e.g. <em>sysCall_actuation</em>).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>count</strong>: number of called add-on scripts</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleChildScripts
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Calls a specific <a href="../callbackFunctions.htm#systemCallbacks">system callback function</a> in
<a href="../childScripts.htm">child scripts</a>.  Child scripts will be executed in a <a href="../scriptExecution.htm">precise order</a>.
This function should only be called from the <a href="../mainScript.htm">main script</a>.
==================== apiDescription ====================>

==================== apiSynopsisLua ====================<
int scriptCount = sim.handleChildScripts(int callType)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>callType</strong>: the desired system call type (e.g. <em>sysCall_actuation</em>)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>scriptCount</strong>: number of called child scripts</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleDynamics
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Handles the dynamics functionality in a scene
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simHandleDynamics(double deltaTime)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>deltaTime</strong>: simulation time step, i.e. <a href="simGetSimulationTimeStep.htm">simGetSimulationTimeStep</a>()</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if the sepcified physics engine could not be found, otherwise, the number of calculation steps performed by the physics engine.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result = sim.handleDynamics(float deltaTime)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result = sim.handleDynamics(float deltaTime)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>deltaTime</strong>: simulation time step, i.e. <a href="simGetSimulationTimeStep.htm">sim.getSimulationTimeStep</a>()</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the sepcified physics engine could not be found, otherwise the number of calculation steps performed by the physics engine.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleEmbeddedScripts
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Calls a specific <a href="../callbackFunctions.htm#systemCallbacks">system callback function</a> in
<a href="../childScripts.htm">child scripts</a> and <a href="../customizationScripts.htm">customization scripts</a>.
Child- and customiization scripts will be executed in a <a href="../scriptExecution.htm">precise order</a>. 
This function should only be called from the <a href="../mainScript.htm">main script</a>
==================== apiDescription ====================>

==================== apiSynopsisLua ====================<
int scriptCount = sim.handleEmbeddedScripts(int callType)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>callType</strong>: desired system call type (e.g. <em>sysCall_actuation</em>)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>scriptCount</strong>: number of called scripts</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleExtCalls
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Handles the message pump for threaded scripts
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#threads">thread related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.handleExtCalls()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.handleExtCalls()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleGraph
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Handles a graph object (i.e. records another value for each curve, given that such value was provided
via <a href="simSetGraphStreamValue.htm">sim.setGraphStreamValue</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#graphs">functions related to graphs</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simHandleGraph(int graphHandle, double time)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph object.</li>
<li><strong>time</strong>: the time where next value will be recorded at, usually the simulation time.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.handleGraph(int graphHandle, float time)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.handleGraph(int graphHandle, float time)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph object.</li>
<li><strong>time</strong>: time where next value will be recorded at, usually the simulation time</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleProximitySensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Handles (performs sensing, etc. of) a registered proximity sensor object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readProximitySensor
sim.checkProximitySensor
sim.checkProximitySensorEx
sim.resetProximitySensor
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simHandleProximitySensor(int sensorHandle, double* detectedPoint, int* detectedObjectHandle,
                             double* detectedSurfaceNormalVector)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of a proximity sensor object or sim.handle_all or sim.handle_all_except_explicit. (sim.handle_all will handle all proximity sensor objects, while sim.handle_all_except_explicit will only handle those that are not marked as &quot;explicit handling&quot;)</li>
<li><strong>detectedPoint</strong>: coordinates of the closest detected point (x, y and z: detectedPoint[0]-detectedPoint[2]) relative to the sensor reference frame, and distance to the detected point (1 value: detectedPoint[3]). Can be nullptr</li>
<li><strong>detectedObjectHandle</strong>: handle of the object that was detected. Can be nullptr</li>
<li><strong>detectedSurfaceNormalVector</strong>: normal vector (normalized) of the detected surface. Relative to the sensor reference frame. Can be nullptr</li>
<li>When several proximity sensors are handled at the same time (e.g. with the sim.handle_all argument), then the output values are relative to the closest detection distance</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>0 if nothing was detected, -1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int res, float dist, list point, int obj, list n = sim.handleProximitySensor(int sensorHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int res, float dist, float[3] point, int obj, float[3] n = sim.handleProximitySensor(int sensorHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of a proximity sensor object, or sim.handle_all or sim.handle_all_except_explicit</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>res</strong>: 0 if nothing was detected</li>
<li><strong>dist</strong>: distance to the detected point</li>
<li><strong>point</strong>: array of 3 numbers indicating the relative coordinates of the detected point</li>
<li><strong>obj</strong>: handle of the object that was detected</li>
<li><strong>n</strong>: array of normal vector (normalized) of the detected surface. Relative to the sensor reference frame</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleSandboxScript
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Lua only. Calls a specific function in the <a href="../sandboxScript.htm">sandbox script</a>.
sim.handleSandboxScript should only be called from the <a href="../mainScript.htm">main script</a>
==================== apiDescription ====================>

==================== apiSynopsisLua ====================<
sim.handleSandboxScript(int callType)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>callType</strong>: system call type (e.g. <em>sysCall_actuation</em>)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleSensingStart
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Handles various functionality (e.g. camera tracking during simulation, object velocity calculation, etc.).
Should only be called from the <a href="../mainScript.htm">main script</a>, as the first instruction in
the <em>sensing</em> section
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.handleSimulationStart
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.handleSensingStart()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.handleSensingStart()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleSimulationStart
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Initializes various functionality (e.g. camera tracking during simulation, object velocity calculation, etc.).
Should only be called from the <a href="../mainScript.htm">main script</a>, as the first instruction in the
<em>initialization</em> section
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.handleSensingStart
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.handleSimulationStart()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.handleSimulationStart()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.handleVisionSensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Handles (performs sensing, etc. of) a vision sensor object. It (1) clear previous computed  image processing data, (2) reads
an image and (3) performs image processing via the <a href="../visionCallbackFunctions.htm">vision callback functions</a>
(if the vision sensor is using an <strong>external input</strong> only (1) is performed)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readVisionSensor
sim.checkVisionSensor
sim.checkVisionSensorEx
sim.resetVisionSensor
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simHandleVisionSensor(int visionSensorHandle, double** auxValues, int** auxValuesCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>visionSensorHandle</strong>: handle of a vision sensor object or sim.handle_all or sim.handle_all_except_explicit. (sim.handle_all will handle all vision sensor objects, while sim.handle_all_except_explicit will only handle those that are not marked as &quot;explicit handling&quot;)</li>
<li><strong>auxValues</strong>: by default CoppeliaSim returns one packet of 15 auxiliary values: the minimum of [intensity red green blue depth], the maximum of [intensity red green blue depth], and the average of [intensity red green blue depth]. If the <a href="../visionCallbackFunctions.htm">vision callback function</a> returns additional  values, then they are appended as packets to the first packet. AuxValues can be nullptr. The user is in charge of releasing the auxValues buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>(*auxValues). If visionSensorHandle is sim.handle_all or sim.handle_all_except_explicit, nothing is returned in auxValues.</li>
<li><strong>auxValuesCount</strong>: contains information about the number of auxiliary value packets and packet sizes returned in auxValues. The first value is the number of packets, the second is the size of packet1, the third is the size of packet2, etc. Can be nullptr if auxValues is also nullptr. The user is in charge of releasing the auxValuesCount buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>(*auxValuesCount).</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>number of detections (number of vision sensors that triggered a detection), -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiMoreCpp ====================<
<h3>Example</h3>
<code class="hljs language-c++ coppelia-coppeliasim-plugin">double* auxValues=nullptr;
int* auxValuesCount = nullptr;
double averageColor[3] = {0.0, 0.0, 0.0};
if (simHandleVisionSensor(visionSensorHandle, &auxValues, &auxValuesCount) &gt;= 0)
{
    if ((auxValuesCount[0] &gt; 0) || (auxValuesCount[1] &gt;= 15))
    {
        averageColor[0] = auxValues[11];
        averageColor[1] = auxValues[12];
        averageColor[2] = auxValues[13];
    }
    simReleaseBuffer((char*)auxValues);
    simReleaseBuffer((char*)auxValuesCount);
}
</code>
==================== apiMoreCpp ====================>

==================== apiSynopsisPython ====================<
int detectionCount, list packet1, list packet2, etc. = sim.handleVisionSensor(int visionSensorHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int detectionCount, float[] packet1, float[] packet2, etc. = sim.handleVisionSensor(int visionSensorHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>visionSensorHandle</strong>: handle of a vision sensor object or sim.handle_all or sim.handle_all_except_explicit</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>detectionCount</strong>: number of detections (number of vision sensors that triggered a detection)</li>
<li><strong>packet1</strong>: default auxiliary value packet (15 auxiliary values: the minimum of [intensity red green blue depth], the maximum of [intensity red green blue depth], and the average of [intensity red green blue depth])</li>
<li><strong>packet2</strong>: additional auxiliary value packet (e.g. from an image processing component)</li>
<li><strong>packet3</strong>: etc. (the function returns as many arrays as there are auxiliary value packets)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.importMesh
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Imports a mesh from a file
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.exportMesh
sim.importShape
sim.createShape
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simImportMesh(int fileformat, const char* pathAndFilename, int options,
                  double identicalVerticeTolerance, double scalingFactor, double*** vertices,
                  int** verticesSizes, int*** indices, int** indicesSizes, double*** reserved,
                  char*** names)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>fileformat</strong>: set to 0. Fileformat is automatically detected</li>
<li><strong>pathAndFilename</strong>: the location of the file to import.</li>
<li><strong>options</strong>: bit-coded: bit0 set (1): keep identical vertices, bit7 set (128): ignore up-vector coded in fileformat</li>
<li><strong>identicalVerticeTolerance</strong>: has no effect. set to zero</li>
<li><strong>scalingFactor</strong>: the scaling factor to apply to the imported vertices</li>
<li><strong>vertices</strong>: an array to vertice arrays. The import operation may generate several meshes depending on the fileformat. The user is in charge of releasing the memory. See the example below</li>
<li><strong>verticesSizes</strong>: an array indicating the individual vertice array sizes. The user is in charge of releasing the memory. See the example below</li>
<li><strong>indices</strong>: an array to indice arrays. The import operation may generate several meshes depending on the fileformat. The user is in charge of releasing the memory. Can be nullptr. See the example below</li>
<li><strong>indicesSizes</strong>: an array indicating the individual indice array sizes. The user is in charge of releasing the memory. Can be nullptr if indices is also nullptr. See the example below</li>
<li><strong>reserved</strong>: reserved for future extensions. Keep at nullptr.</li>
<li><strong>names</strong>: not used anymore. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>Number of imported meshes, or 0 or -1 if the operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiMoreCpp ====================<
<h3>Example</h3>
<code class="hljs language-c++ coppelia-coppeliasim-plugin">double** vertices;
int* verticesSizes;
int** indices;
int* indicesSizes;
int elementCount = simImportMesh(1, "d:\\example.dxf", 0, 0.0001, 1.0, &vertices,
                                 &verticesSizes, &indices, &indicesSizes, nullptr, nullptr);
if (elementCount &gt; 0)
{
    const double grey[3] = {0.5, 0.5, 0.5};
    for (int i = 0; i &#60; elementCount; i++)
    {
        int shapeHandle = simCreateShape(2, 20.0 * 3.1415 / 180.0, vertices[i],
                               verticesSizes[i], indices[i], indicesSizes[i], nullptr,
                               nullptr, nullptr, nullptr);
        simSetShapeColor(shapeHandle, "", sim.colorcomponent_ambient, grey);
        simReleaseBuffer((char*)indices[i]);
        simReleaseBuffer((char*)vertices[i]);
    }
    simReleaseBuffer((char*)indicesSizes);
    simReleaseBuffer((char*)indices);
    simReleaseBuffer((char*)verticesSizes);
    simReleaseBuffer((char*)vertices);
}</code>
==================== apiMoreCpp ====================>

==================== apiSynopsisPython ====================<
list vertices, list indices = sim.importMesh(int fileformat, string pathAndFilename, int options,
                                             float identicalVerticeTolerance, float scalingFactor)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] vertices, int[] indices = sim.importMesh(int fileformat, string pathAndFilename, int options,
                                                 float identicalVerticeTolerance,
                                                 float scalingFactor)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>fileformat</strong>: set to 0. Fileformat is automatically detected</li>
<li><strong>pathAndFilename</strong>: the location of the file to import.</li>
<li><strong>options</strong>: bit-coded: bit0 set (1): keep identical vertices, bit7 set (128): ignore up-vector coded in fileformat</li>
<li><strong>identicalVerticeTolerance</strong>: has no effect. set to zero</li>
<li><strong>scalingFactor</strong>: the scaling factor to apply to the imported vertices</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>vertices</strong>: an array of vertice arrays. The import operation may generate several meshes depending on the fileformat</li>
<li><strong>indices</strong>: an array of index arrays. The import operation may generate several meshes depending on the fileformat</li>
</ul>
==================== apiOutputPythonLua ====================>

==================== apiMorePythonLua ====================<
<h3>Example</h3>
<code class="hljs language-lua coppelia-coppeliasim-script">--lua

local vertices, indices, reserved, names = sim.importMesh(1, "d:\\example.dxf", 0, 0.0001, 1)
for i = 1, #vertices, 1 do
    h = sim.createShape(2, 20 * math.pi / 180, vertices[i], indices[i])
    sim.setShapeColor(h, "", sim.colorcomponent_ambient, {0.5, 0.5, 0.5})
    sim.setObjectAlias(h, names[i])
end</code>
==================== apiMorePythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.importShape
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Imports a <a href="../shapes.htm">shape</a> from a file (first imports meshes, then groups/merges
them into a shape)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.importMesh
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simImportShape(int fileformat, const char* pathAndFilename, int options,
                   double identicalVerticeTolerance, double scalingFactor)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>fileformat</strong>: set to 0. Fileformat is automatically detected</li>
<li><strong>pathAndFilename</strong>: the location of the file to import.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): keep identical vertices</li>
<li>bit1 set (2): reserced. keep at 0.</li>
<li>bit2 set (4): reserved. keep at 0.</li>
<li>bit3 set (8): do not preserve colors</li>
<li>bit4 set (16): tries to preserve textures.</li>
<li>bit5 set (32): realigns the shape's bounding box with the world.</li>
<li>bit7 set (128): ignore up-vector coded in fileformat.</li>
</ul>
</li>
<li><strong>identicalVerticeTolerance</strong>: not used. Set to 0</li>
<li><strong>scalingFactor</strong>: the scaling factor to apply to the imported vertices</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>The handle of the imported shape, or -1 if the operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int shapeHandle = sim.importShape(int fileformat, string pathAndFilename, int options,
                                  float identicalVerticeTolerance, float scalingFactor)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int shapeHandle = sim.importShape(int fileformat, string pathAndFilename, int options,
                                  float identicalVerticeTolerance, float scalingFactor)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>fileformat</strong>: set to 0. Fileformat is automatically detected</li>
<li><strong>pathAndFilename</strong>: the location of the file to import.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): keep identical vertices</li>
<li>bit1 set (2): reserced. keep at 0.</li>
<li>bit2 set (4): reserved. keep at 0.</li>
<li>bit3 set (8): do not preserve colors</li>
<li>bit4 set (16): tries to preserve textures.</li>
<li>bit5 set (32): realigns the shape's bounding box with the world.</li>
<li>bit7 set (128): ignore up-vector coded in fileformat.</li>
</ul>
</li>
<li><strong>identicalVerticeTolerance</strong>: not used. Set to 0</li>
<li><strong>scalingFactor</strong>: the scaling factor to apply to the imported vertices</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: the handle of the imported shape</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.initScript
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Initializes/reinitializes a script. Cannot be called from within the script being reinitialized.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simInitScript(int scriptHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script to initialize/reinitialize</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the operation was not successful, 1 otherwise</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bool result = sim.initScript(int scriptHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool result = sim.initScript(int scriptHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script to initialize/reinitialize</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: whether the operation was successful</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simInsertDataIntoStackTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inserts data into a table on the stack. The function expects a <em>value</em> at the top of the stack,
a <em>key</em> one position below, and a table below that. The value and its associated key will be
inserted into the table and removed from the stack. If successive values are inserted with consecutive
number keys starting at 1, then the table values can be accessed via number indices in a script, and the
table can be seen as an array. Otherwise, the table can be seen as a map or associative array
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInsertDataIntoStackTable(int stackHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.insertObjectIntoOctree
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inserts an object into an <a href="../octrees.htm">OC tree</a>, as voxels. Each voxel will store
a color and a tag value
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.subtractObjectFromOctree
sim.insertVoxelsIntoOctree
<a href="../apiFunctions.htm#octree">OC tree related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInsertObjectIntoOctree(int octreeHandle, int objectHandle, int options,
                              const unsigned char* color, unsigned int tag, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>objectHandle</strong>: handle of the object to insert. Only potentially <a href="../collidableObjects.htm">collidable objects</a> are supported</li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>color</strong>: pointer to one RGB triple, specifying the red, green and blue color components (0-255). Can be nullptr.</li>
<li><strong>tag</strong>: uint32 value, which is user-defined.</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of voxels in the OC tree</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalVoxelCnt = sim.insertObjectIntoOctree(int octreeHandle, int objectHandle, int options,
                                               list color = None, int tag = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalVoxelCnt = sim.insertObjectIntoOctree(int octreeHandle, int objectHandle, int options,
                                               int[] color = nil, int tag = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>objectHandle</strong>: handle of the object to insert. Only potentially <a href="../collidableObjects.htm">collidable objects</a> are supported</li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>color</strong>: array of RGB triplet, specifying the red, green and blue color components (0 - 255). Can be None/nil</li>
<li><strong>tag</strong>: uint32 value, which is user-defined</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalVoxelCnt</strong>: the total number of voxels in the OC tree</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.insertObjectIntoPointCloud
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inserts an object into a <a href="../pointClouds.htm">point cloud</a>, as points
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.insertPointsIntoPointCloud
<a href="../apiFunctions.htm#pointCloud">point cloud related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInsertObjectIntoPointCloud(int pointCloudHandle, int objectHandle, int options,
                                  double gridSize, const unsigned char* color, void* optionalValues)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>objectHandle</strong>: handle of the object to insert. Only potentially <a href="../collidableObjects.htm">collidable objects</a> are supported</li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>gridSize</strong>: when a shape is inserted, it will first be converted to an OC tree with a given grid or voxel size.</li>
<li><strong>color</strong>: pointer to one RGB triple, specifying the red, green and blue color components (0-255). Can be nullptr.</li>
<li><strong>optionalValues</strong>: can be used to specify additional parameters, or set to nullptr for default parameter values:
<ul>
<li>((int*)optionalValues)[0]: integer value that is bit coded. Each bit indicates which additional parameter will be taken into account:</li>
<li>((float*)optionalValues)[1]: <strong>duplicateTolerance</strong>: a minimum distance tolerance value that is used to avoid duplicate points. To have this parameter taken into account, set bit0 to 1 in ((int*)optionalValues)[0]. Point insertion is slower when the duplicate tolerance is &gt; then 0.0</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of points in the point cloud</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalPointCnt = sim.insertObjectIntoPointCloud(int pointCloudHandle, int objectHandle,
                                                   int options, float gridSize, list color = None,
                                                   float duplicateTolerance = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalPointCnt = sim.insertObjectIntoPointCloud(int pointCloudHandle, int objectHandle,
                                                   int options, float gridSize, int[] color = nil,
                                                   float duplicateTolerance = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>objectHandle</strong>: handle of the object to insert. Only potentially <a href="../collidableObjects.htm">collidable objects</a> are supported</li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>gridSize</strong>: when a shape is inserted, it will first be converted to an OC tree with a given grid or voxel size</li>
<li><strong>color</strong>: array containing an RGB triplet, specifying the red, green and blue color components (0 - 255). Can be None/nil.</li>
<li><strong>duplicateTolerance</strong>: a minimum distance tolerance value that is used to avoid duplicate points</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalPointCnt</strong>: the total number of points in the point cloud</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.insertPointsIntoPointCloud
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inserts points into a <a href="../pointClouds.htm">point cloud</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.removePointsFromPointCloud
<a href="../apiFunctions.htm#pointCloud">point cloud related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInsertPointsIntoPointCloud(int pointCloudHandle, int options, const double* pts, int ptCnt,
                                  const unsigned char* color, void* optionalValues)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pointCloudHandle</strong>: the handle of the point cloud</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the point cloud reference frame, otherwise they are relative to the world reference frame</li>
<li>bit1 set (2): the color array contains one RGB triple per point. Otherwise it contains a single RGB triple</li>
</ul>
</li>
<li><strong>pts</strong>: a pointer to the point positions specified as x/y/z coordinates</li>
<li><strong>ptCnt</strong>: the number of point coordinates contained in pts</li>
<li><strong>color</strong>: a pointer to one or several RGB triplets, specifying the red, green and blue color components (0-255). Can be nullptr.</li>
<li><strong>optionalValues</strong>: can be used to specify additional parameters, or set to nullptr for default parameter values:
<ul>
<li>((int*)optionalValues)[0]: an integer value that is bit coded. Each bit indicates which additional parameter will be taken into account:</li>
<li>((float*)optionalValues)[1]: <strong>duplicateTolerance</strong>: a minimum distance tolerance value that is used to avoid duplicate points. To have this parameter taken into account, set bit0 to 1 in ((int*)optionalValues)[0]. Point insertion is slower when the duplicate tolerance is &gt; then 0.0</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of points in the point cloud</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalPointCnt = sim.insertPointsIntoPointCloud(int pcHandle, int options, list points,
                                                   list color = None,
                                                   float duplicateTolerance = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalPointCnt = sim.insertPointsIntoPointCloud(int pcHandle, int options, float[] points,
                                                   int[] color = nil, float duplicateTolerance = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pcHandle</strong>: handle of the point cloud, can be combined with sim.handleflag_codedstring, when one wishes to provide point data as a float buffer, and color data as a char buffer</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the point cloud reference frame, otherwise they are relative to the world reference frame</li>
<li>bit1 set (2): the color array contains one RGB triple per point. Otherwise it contains a single RGB triple</li>
</ul>
</li>
<li><strong>points</strong>: array of point positions specified as x/y/z coordinates</li>
<li><strong>color</strong>: array of one or several RGB triplets, specifying the red, green and blue color components (0-255). Can be None/nil</li>
<li><strong>duplicateTolerance</strong>: a minimum distance tolerance value that is used to avoid duplicate points</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalPointCnt</strong>the total number of points in the point cloud</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.insertVoxelsIntoOctree
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inserts voxels into an <a href="../octrees.htm">OC tree</a>. Each voxel will store a color and a tag value
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.removeVoxelsFromOctree
<a href="../apiFunctions.htm#octree">OC tree related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInsertVoxelsIntoOctree(int octreeHandle, int options, const double* pts, int ptCnt,
                              const unsigned char* color, const unsigned int* tag, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the OC tree reference frame, otherwise they are relative to the world reference frame</li>
<li>bit1 set (2): the color array contains one RGB triple per point, and the tag array contains one value per point. Otherwise it the color array contains a single RGB triple, and the tag array contains a single value.</li>
</ul>
</li>
<li><strong>pts</strong>: pointer to the voxel positions specified as x/y/z coordinates</li>
<li><strong>ptCnt</strong>: number of point coordinates contained in pts</li>
<li><strong>color</strong>: pointer to one or several RGB triplets, specifying the red, green and blue color components (0-255). Can be nullptr.</li>
<li><strong>tag</strong>: pointer to one or several uint32 values, which are user-defined values. Can be nullptr, and should be nullptr if <em>color</em> is nullptr.</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of voxels in the OC tree</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalVoxelCnt = sim.insertVoxelsIntoOctree(int octreeHandle, int options, list points,
                                               list color = None, list tag = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalVoxelCnt = sim.insertVoxelsIntoOctree(int octreeHandle, int options, float[] points,
                                               int[] color = nil, int[] tag = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree, can be combined with sim.handleflag_codedstring, when one wishes to provide point data as a float buffer, color data as a char buffer and tag as an uint32 buffer</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the OC tree reference frame, otherwise they are relative to the world reference frame</li>
<li>bit1 set (2): the color array contains one RGB triple per point, and the tag array contains one value per point. Otherwise it the color array contains a single RGB triple, and the tag array contains a single value.</li>
</ul>
</li>
<li><strong>points</strong>: array of voxel positions specified as x/y/z coordinates</li>
<li><strong>color</strong>: array of one or several RGB triplets, specifying the red, green and blue color components (0-255). Can be None/nil</li>
<li><strong>tag</strong>: array of one or several uint32 values, which are user-defined values. Can be None/nil</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalVoxelCnt</strong>the total number of voxels in the OC tree</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.interpolateMatrices
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Computes the interpolated transformation matrix between matrixIn1 and matrixIn2. Quaternions are used internally
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInterpolateMatrices(const double* matrixIn1, const double* matrixIn2, double interpolFactor,
                           double* matrixOut)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrixIn1</strong>: the first input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>matrixIn2</strong>: the second input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>interpolFactor</strong>: the interpolation factor, a value between 0.0 and 1.0 (0.0--&gt; matrixOut = matrixIn1, 1.0--&gt; matrixOut = matrixIn2)</li>
<li><strong>matrixOut</strong>: the output matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list resultMatrix = sim.interpolateMatrices(list matrixIn1, list matrixIn2, float interpolFactor)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[12] resultMatrix = sim.interpolateMatrices(float[12] matrixIn1, float[12] matrixIn2,
                                                 float interpolFactor)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>matrixIn1</strong>: first input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>matrixIn2</strong>: second input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>interpolFactor</strong>: interpolation factor, a value between 0.0 and 1.0 (0.0--&gt; resultMatrix = matrixIn1, 1.0--&gt; resultMatrix = matrixIn2)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>resultMatrix</strong>: the result matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.interpolatePoses
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Computes the interpolated pose between poseIn1 and poseIn2
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInterpolatePoses(const double* poseIn1, const double* poseIn2, double interpolFactor,
                        double* poseOut)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>poseIn1</strong>: first input pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>poseIn2</strong>: second input pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>interpolFactor</strong>: the interpolation factor, a value between 0.0 and 1.0 (0.0--&gt; poseOut = poseIn1, 1.0--&gt; poseOut = poseIn2)</li>
<li><strong>poseOut</strong>: output pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list resultPose = sim.interpolatePoses(list poseIn1, list poseIn2, float interpolFactor)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7] resultPose = sim.interpolatePoses(float[7] poseIn1, float[7] poseIn2, float interpolFactor)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>poseIn1</strong>: first input pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>poseIn2</strong>: second input pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>interpolFactor</strong>: interpolation factor, a value between 0.0 and 1.0 (0.0--&gt; resultPose = poseIn1, 1.0--&gt; resultPose = poseIn2)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>resultPose</strong>: the result pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.intersectPointsWithPointCloud
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes points from a <a href="../pointClouds.htm">point cloud</a>, that do not intersect with the
provided points (i.e. the result in the point cloud will be the intersection between the two sets of points).
When a point cloud doesn't use an OC tree calculation structure, then this operation cannot be performed
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.insertPointsIntoPointCloud
sim.setPointCloudOptions
<a href="../apiFunctions.htm#pointCloud">point cloud related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simIntersectPointsWithPointCloud(int pointCloudHandle, int options, const double* pts, int ptCnt,
                                     double tolerance, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the point cloud reference frame, otherwise they are relative to the world reference frame</li>
</ul>
</li>
<li><strong>pts</strong>: pointer to the point positions specified as x/y/z coordinates.</li>
<li><strong>ptCnt</strong>: number of point coordinates contained in pts</li>
<li><strong>tolerance</strong>: distance used as a tolerance value</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of points in the point cloud</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalPointCnt = sim.intersectPointsWithPointCloud(int pcHandle, int options, list points,
                                                      float tolerance)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalPointCnt = sim.intersectPointsWithPointCloud(int pcHandle, int options, float[] points,
                                                      float tolerance)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pcHandle</strong>: handle of the point cloud</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the point cloud reference frame, otherwise they are relative to the world reference frame</li>
</ul>
</li>
<li><strong>points</strong>: array of point positions specified as x/y/z coordinates</li>
<li><strong>tolerance</strong>: distance used as a tolerance value</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalPointCnt</strong>: the total number of points in the point cloud</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simInvertMatrix
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inverts a transformation matrix
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInvertMatrix(double* matrix)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrix</strong>: input/output matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simInvertPose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Inverts a pose
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simInvertPose(double* pose)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pose</strong>: input/output pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.isDynamicallyEnabled
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether a scene object is dynamically enabled, i.e. is being handled and simulated by the physics engine.
Note that until the physics engine has parsed the scene in the first simulation step (i.e. the first time
<a href="simHandleDynamics.htm">sim.handleDynamics</a> is called), no object will be dynamically enabled
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simIsDynamicallyEnabled(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>ojectHandle</strong>: handle of the scene object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, 0 if the object is not dynamically enabled, 1 if the object is dynamically enabled.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bool dynamicallyEnabled = sim.isDynamicallyEnabled(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool dynamicallyEnabled = sim.isDynamicallyEnabled(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>ojectHandle</strong>: handle of the scene object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>dynamicallyEnabled</strong>: whether the object is dynamically enabled</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.isHandle
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Checks whether a general object handle is still valid. When a general object is destroyed
(e.g. programmatically or via the user interface), then its related handle is not valid anymore
and will trigger an error when used. Use this function to avoid triggering an error
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObject
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simIsHandle(int objectHandle, int reserved = -1)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>reserved</strong>: set to -1</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, 0 if the handle is not valid anymore, or 1 if the handle is still valid.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bool result = sim.isHandle(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool result = sim.isHandle(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: whether the handle is valid</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.launchExecutable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Launches an executable. Similar to os.execute or io.popen, but is system independent.
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
sim.launchExecutable(string filename, string parameters = '', int showStatus = 1)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.launchExecutable(string filename, string parameters = '', int showStatus = 1)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>filename</strong>: file name of the executable. If the filename starts with '@', then it will be considered as a system command, otherwise the current directory might be automatically prepended to the filename if it makes sense.</li>
<li><strong>parameters</strong>: optional input arguments</li>
<li><strong>showStatus</strong>: 0 to hide the application's window, 1 to show it. Works only with Windows OS.</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.loadImage
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Loads an image from file or memory
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.saveImage
sim.getScaledImage
sim.transformImage
sim.setVisionSensorImg
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
unsigned char* simLoadImage(int* resolution, int options, const char* filenameOrBuffer,
                            void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>resolution</strong>: pointer that will accept the image resolution.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 is set (1): the returned image is rgba, otherwise it is rgb</li>
</ul>
</li>
<li><strong>filename</strong>: name of the file to read. The file extension indicates the format. If you wish to load an image from a memory buffer, then have filename point to that memory buffer.</li>
<li><strong>reserved</strong>: Set to nullptr if you load an image from file. If you load an image from a memory buffer, this should be to an integer pointer where the first pointed integer is the size of the memory buffer.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful, otherwise a buffer containing the image data. The user is in charge of releasing the buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes image, list resolution = sim.loadImage(int options, string/bytes filenameOrBuffer)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer image, int[2] resolution = sim.loadImage(int options, string/buffer filenameOrBuffer)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 is set (1): the returned image is rgba, otherwise it is rgb</li>
</ul>
</li>
<li><strong>filenameOrBuffer</strong>: name of the file to read. The file extension indicates the format. To load an image from a buffer, simply prefix the buffer with &quot;@mem&quot;</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>image</strong>: buffer containing the image data</li>
<li><strong>resolution</strong>: the image resolution</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.loadModel
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Loads a previously saved model, and selects it
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.saveModel
sim.loadScene
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simLoadModel(const char* filename)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>filename</strong>: model filename. The filename extension is required (<em>ttm</em> or <em>simmodel.xml</em> ).</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. Otherwise the handle of the model base object.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
a) int objectHandle = sim.loadModel(string filename)
b) int objectHandle = sim.loadModel(bytes buffer)
c) bytes rgbaImage = sim.loadModel(string filename, bool onlyThumbnail)
d) bytes rgbaImage = sim.loadModel(bytes buffer, bool onlyThumbnail)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
a) int objectHandle = sim.loadModel(string filename)
b) int objectHandle = sim.loadModel(buffer buffer)
c) buffer rgbaImage = sim.loadModel(string filename, bool onlyThumbnail)
d) buffer rgbaImage = sim.loadModel(buffer buffer, bool onlyThumbnail)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>filename</strong>: model filename. The filename extension is required (<em>ttm</em>, or <em>simmodel.xml</em>).</li>
<li><strong>buffer</strong>: a buffer containing the model</li>
<li><strong>onlyThumbnail</strong>: when true, then only the thumbnail image of the model is loaded and returned</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: the handle of the model base object</li>
<li><strong>rgbaImage</strong>: the model thumbnail image (128 x 128 x 4, rgba)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.loadScene
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Loads a previously saved scene
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.saveScene
sim.loadModel
sim.closeScene
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simLoadScene(const char* filename)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>filename</strong>: scene filename. The filename extension is required (<em>ttt</em>, or <em>simscene.xml</em> ). By default, the current scene is overwritten (append &quot;@keepCurrent&quot; to the filename to preserve current scene)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.loadScene(string/bytes filenameOrBuffer)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.loadScene(string/buffer filenameOrBuffer)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>filename</strong>: scene buffer or scene filename, including extension. By default, the current scene is overwritten (append &quot;@keepCurrent&quot; to the filename to preserve current scene)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.matrixToPose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Converts a transformation matrix to a pose
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simMatrixToPose(const double* matrixIn, double* poseOut)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrixIn</strong>: input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>poseOut</strong>: output pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list pose = sim.matrixToPose(list matrix)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7] pose = sim.matrixToPose(float[12] matrix)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>matrix</strong>: input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>pose</strong>: the output pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.moduleEntry
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Creates, modifies or destroys module menu entries. Those are user selectable items located in [Menu bar &gt; Modules].
When selected, the corresponding script will have its <a href="../callbackFunctions.htm#sysCall_moduleEntry">sysCall_moduleEntry</a>
callback function triggered, or <a href="../apiConstants.htm#simulatorMessages">sim_message_eventcallback_moduleentry</a> triggered
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simModuleEntry(int handle, const char* label, int state)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>handle</strong>: handle of a module menu entry, or -1 to create one.</li>
<li><strong>label</strong>: label of the module entry. If handle is -1, then a path can be specified, in order to build sub-menus, e.g. &quot;Menu\nSubmenu1\nSubmenu2\nLabel&quot;. Can be nullptr if handle is not -1.</li>
<li><strong>state</strong>: Bit-coded (is ignored if set to -1, -2 destroys an existing item):
<ul>
<li>bit0 is set (1): the item is enabled</li>
<li>bit1 is set (2): the item is checked</li>
<li>bit2 is set (4): the item is checkable</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the handle of the module menu entry.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int handle = sim.moduleEntry(int handle, string label = None, int state = -1)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int handle = sim.moduleEntry(int handle, string label = nil, int state = -1)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of a module menu entry, or -1 to create one.</li>
<li><strong>label</strong>: label of the module entry. If handle is -1, then a path can be specified, in order to build sub-menus, e.g. &quot;Menu\nSubmenu1\nSubmenu2\nLabel&quot;. Can be nullptr if handle is not -1.</li>
<li><strong>state</strong>: Bit-coded (is ignored if set to -1, -2 destroys an existing item):
<ul>
<li>bit0 is set (1): the item is enabled</li>
<li>bit1 is set (2): the item is checked</li>
<li>bit2 is set (4): the item is checkable</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>handle</strong>: the handle of the module menu entry</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simMoveStackItemToTop
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Moves a stack into to the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simPopStackItem
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simMoveStackItemToTop(int stackHandle, int cIndex)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>cIndex</strong>: the zero-based index of the item to move. Negative values indicate reverse counting from the top of the stack (i.e. -1 indicates the stack top)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.moveToConfig
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Generates joint movement data using the <a href="https://github.com/pantor/ruckig#readme">Ruckig online trajectory generator</a>.
This function  can only be called from scripts running in a thread, since this is a blocking operation
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.moveToPose
sim.ruckigPos
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list endP, list endV, list endA, float t = sim.moveToConfig(int flags, list currentP,
                                                            list currentV, list currentA,
                                                            list maxV, list maxA,
                                                            list maxJ, list targetP,
                                                            list targetV, func callback,
                                                            auxData, list cyclicJoints = None,
                                                            float timeStep = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] endP, float[] endV, float[] endA, float t = sim.moveToConfig(int flags, float[] currentP,
                                                                     float[] currentV,
                                                                     float[] currentA, float[] maxV,
                                                                     float[] maxA, float[] maxJ,
                                                                     float[] targetP, float[] targetV,
                                                                     func/string callback, auxData,
                                                                     bool[] cyclicJoints = nil,
                                                                     float timeStep = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>flags</strong>: <a href="../apiConstants.htm#ruckigFunctions">Ruckig flags</a>. -1 for default flags.</li>
<li><strong>currentP</strong>: current configuration, i.e. the current linear/angular joint positions, one value for each  DoF.</li>
<li><strong>currentV</strong>: current velocity, one value for each  DoF. Can be None/nil in which case a velocity vector of 0 is used.</li>
<li><strong>currentA</strong>: current acceleration, one value for each  DoF. Can be None/nil in which case an acceleration vector of 0 is used.</li>
<li><strong>maxV</strong>: maximum allowed velocity, one value for each  DoF. If sim.ruckig_minvel is specified in flags, then maxVel should contain following values: [maxV_1 ... maxV_n minV_1 ... minV_n], i.e. 2x DoF values.</li>
<li><strong>maxA</strong>: maximum allowed acceleration, one value for each  DoF. If sim.ruckig_minaccel is specified in flags, then maxAccel should contain following values: [maxA_1 ... maxA_n minA_1 ... minA_n], i.e. 2x DoF values.</li>
<li><strong>maxJ</strong>: maximum allowed jerk, one value for each  DoF.</li>
<li><strong>targetP</strong>: desired target configuration, one value for each  DoF.</li>
<li><strong>targetV</strong>: desired target point velocity, one value for each  DoF. Can be None/nil in which case a velocity vector of 0 is used.</li>
<li><strong>callback</strong>: callback function that will be called for each movement step. The arguments provided to the callback function are: currentConfig, currentVel, currentAccel, auxData.</li>
<li><strong>auxData</strong>: random data that will be forwarded to the callback function.</li>
<li><strong>cyclicJoints</strong>: array of booleans indicating which joint is cyclic (for cyclic joints, the movement will always go in the direction that represents the shortest distance to the goal). Can be nil or omitted.</li>
<li><strong>timeStep</strong>: desired time step size. A value of 0 indicates that the current simulation time step is used</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>endP</strong>: the configuration at the end of the movement.</li>
<li><strong>endV</strong>: the velocity at the end of the movement.</li>
<li><strong>endA</strong>: the acceleration at the end of the movement.</li>
<li><strong>t</strong>: the leftover time in current simulation step, i.e. the remaining time that was not used for movement.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.moveToPose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Generates object movement data using the <a href="https://github.com/pantor/ruckig#readme">Ruckig online trajectory generator</a>,
by performing interpolations between two poses. The function can operate by handling 4 movement variables (x,y,z and
angle between the two poses), or a single movement variable (t, which requires a metric to be specified for distance
calculation between the two poses). This function can only be called from a script running in a thread, since this is a blocking
operation
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.moveToConfig
sim.ruckigPos
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list endP/endM, float t = sim.moveToPose(int flags, list currentP/currentM,
                                         list maxVel, list maxAccel,
                                         list maxJerk, list targetP/targetM,
                                         func callback, auxData, 
                                         list metric = None,
                                         float timeStep = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7]/float[12] endP/endM, float t = sim.moveToPose(int flags,
                                                       float[7]/float[12] currentP/currentM,
                                                       float[] maxVel, float[] maxAccel,
                                                       float[] maxJerk,
                                                       float[7]/float[12] targetP/targetM,
                                                       func/string callback, auxData,
                                                       float[4] metric = nil,
                                                       float timeStep = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>flags</strong>: <a href="../apiConstants.htm#ruckigFunctions">Ruckig flags</a>. -1 for default flags.</li>
<li><strong>currentP/currentM</strong>: the start pose, specified via a pose [x y z qx qy qz qw] or transformation matrix [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
<li><strong>maxVel</strong>: the maximum allowed velocity. If <em>metric</em> is specified, then this is an array of size 1, otherwse an array of size 4. If sim.ruckig_minVel is specified in flags, then this array should contain twice as many values, first the values for the maximum velocity, then the values for the minimum velocity.</li>
<li><strong>maxAccel</strong>: the maximum allowed acceleration. If <em>metric</em> is specified, then this is an array of size 1, otherwse an array of size 4. If sim.ruckig_minAccel is specified in flags, then this array should contain twice as many values, first the values for the maximum acceleration, then the values for the minimum acceleration.</li>
<li><strong>maxJerk</strong>: the maximum allowed jerk. If <em>metric</em> is specified, then this is an array of size 1, otherwse an array of size 4.</li>
<li><strong>targetP/targetM</strong>: the goal pose, specified via a pose [x y z qx qy qz qw] or transformation matrix [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
<li><strong>callback</strong>: a callback function that will be called for each movement step. The arguments provided to the callback function are: currentPose/currentMatrix, currentVel, currentAccel, auxData.</li>
<li><strong>auxData</strong>: random data that will be forwarded to the callback function.</li>
<li><strong>metric</strong>: an optional metric, used to compute a pose-pose distance. If metric is None/nil, the movement calculation happens in the 4-dimensional space (x,y,z,angle), otherwise it happens in the 1-dimensional space (t).</li>
<li><strong>timeStep</strong>: the desired time step size. A value of 0 indicates that the current simulation time step will be used.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>endP/endM</strong>: the pose at the end of the movement, specified via a pose [x y z qx qy qz qw] or transformation matrix [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
<li><strong>t</strong>: the leftover time in current simulation step, i.e. the remaining time that was not used for movement.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.multiplyMatrices
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Multiplies two transformation matrices
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simMultiplyMatrices(const double* matrixIn1, const double* matrixIn2, double* matrixOut)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrixIn1</strong>: first input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>matrixIn2</strong>: second input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>matrixOut</strong>: output matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list resultMatrix = sim.multiplyMatrices(list matrixIn1, list matrixIn2)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[12] resultMatrix = sim.multiplyMatrices(float[12] matrixIn1, float[12] matrixIn2)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>matrixIn1</strong>: first input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>matrixIn2</strong>: second input matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>resultMatrix</strong>: the result matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.multiplyPoses
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Multiplies two poses
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simMultiplyPoses(const double* poseIn1, const double* poseIn2, double* poseOut)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>poseIn1</strong>: first input pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>poseIn2</strong>: second input pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>poseOut</strong>: output pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list resultPose = sim.multiplyPoses(list poseIn1, list poseIn2)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7] resultPose = sim.multiplyPoses(float[7] poseIn1, float[7] poseIn2)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>poseIn1</strong>: first input pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>poseIn2</strong>: second input pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>resultPose</strong>: the result pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.multiplyVector
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Multiplies a vector with a pose or a matrix (e.g. v=m*v)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list resultVector = sim.multiplyVector(list pose/matrix, list vector)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[3*n] resultVector = sim.multiplyVector(float[7]/float[12] pose/matrix, float[3*n] vector)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pose/matrix</strong>: a pose (array of 7 values [x y z qx qy qz qw]) or a transformation matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>vector</strong>: the original vector: an array of 3 * n values. Each triplet represents one vector to be multiplied</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>resultVector</strong>: the result vector: an array of 3 * n values. Each triplet represents one vector</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simOpenTextEditor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Opens a text edition window. The C version of this function opens a modal window
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.textEditorOpen
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simOpenTextEditor(const char* initText, const char* xml, int* various)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>initText</strong>: pointer to the initial text to be displayed.</li>
<li><strong>xml</strong>: pointer to an XML description of the text editor's properties. Can be nullptr for default properties</li>
<li><strong>various</strong>: optional pointer holding the window size (various[0]-various[1]) and position (various[2],various[3])
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr in case of an error. Otherwise a pointer to the text. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiMoreCpp ====================<
<h3>XML example</h3>
<code class="hljs language-xml coppelia-coppeliasim-plugin">&lt;editor title=&quot;Window title&quot; editable=&quot;true&quot; searchable=&quot;true&quot;
  tabWidth=&quot;4&quot; textColor=&quot;50 50 50&quot; backgroundColor=&quot;190 190 190&quot;
  selectionColor=&quot;128 128 255&quot; size=&quot;800 600&quot; position=&quot;100 100&quot; &gt;

  &lt;keywords1 color=&quot;152 0 0&quot; &gt;
    &lt;item word=&quot;sim.getObject&quot; autocomplete=&quot;true&quot;
      calltip=&quot;int handle=sim.getObject(string path)&quot; /&gt;
    &lt;item word=&quot;sim.getObjectPosition&quot; autocomplete=&quot;true&quot;
      calltip=&quot;double[3] pos=sim.getObjectPosition(int handle,
        int relHandle)&quot; /&gt;
  &lt;/keywords1&gt;

  &lt;keywords2 color=&quot;220 80 20&quot; &gt;
    &lt;item word=&quot;sim.getObjectOrientation&quot; autocomplete=&quot;true&quot;
      calltip=&quot;double[3] euler=sim.getObjectOrientation(int handle,
        int relHandle)&quot; /&gt;
  &lt;/keywords2&gt;
&lt;/editor&gt;

<comment>
Other <em>editor</em> attributes with their default values are:

isLua = &quot;false&quot;
useSimKeywords = &quot;false&quot;
commentColor = &quot;0 140 0&quot;
numberColor = &quot;220 0 220&quot;
stringColor = &quot;255 255 0&quot;
characterColor = &quot;255 255 0&quot;
operatorColor = &quot;0 0 0&quot;
preprocessorColor = &quot;0 128 128&quot;
identifierColor = &quot;64 64 64&quot;
wordColor = &quot;0 0 255&quot;
word4Color = &quot;152 64 0&quot;</comment></code>
==================== apiMoreCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.packDoubleTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Packs ab array of double floating-point numbers into a string
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.unpackDoubleTable
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
bytes data = sim.packDoubleTable(list doubleNumbers, int startDoubleIndex = 0, int doubleCount = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer data = sim.packDoubleTable(float[] doubleNumbers, int startDoubleIndex = 0,
                                  int doubleCount = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>doubleNumbers</strong>: array of double floating-point numbers. Non-numbers will be packed as zero values</li>
<li><strong>startDoubleIndex</strong>: zero-based index from which on data should be packed. Can be omitted in which case 0 is used</li>
<li><strong>doubleCount</strong>: amount of doubles that should be packed. Can be omitted in which case 0 is used (which indicates that the maximum available doubles should be packed from the indicated startDoubleIndex)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>data</strong>: a buffer (values between 0 and 255) that contains packed double floating-point numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.packFloatTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Packs an array of floating-point numbers into a string
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.unpackFloatTable
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
bytes data = sim.packFloatTable(list floatingNumbers, int startFloatIndex = 0, int floatCount = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer data = sim.packFloatTable(float[] floatingNumbers, int startFloatIndex = 0,
                                 int floatCount = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>floatingNumbers</strong>: array containing floating-point numbers. Non-numbers will be packed as zero values</li>
<li><strong>startFloatIndex</strong>: zero-based index from which on data should be packed. Can be omitted in which case 0 is used</li>
<li><strong>floatCount</strong>:  amount of floats that should be packed. Can be omitted in which case 0 is used (which indicates that the maximum available floats should be packed from the indicated startFloatIndex)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>data</strong>: a buffer (values between 0 and 255) that contains packed floating-point numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.packInt32Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Packs an array of int32 numbers into a string
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.unpackInt32Table
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
bytes data = sim.packInt32Table(list int32Numbers, int startInt32Index = 0, int int32Count = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer data = sim.packInt32Table(int[] int32Numbers, int startInt32Index = 0, int int32Count = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>int32Numbers</strong>: array containing int32 numbers. Non-numbers will be packed as zero values</li>
<li><strong>startInt32Index</strong>: zero-based index from which on data should be packed. Can be omitted in which case 0 is used</li>
<li><strong>int32Count</strong>: amount of int32s that should be packed. Can be omitted in which case 0 is used (which indicates that the maximum available int32s should be packed from the indicated startInt32Index)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>data</strong>: a buffer (values between 0 and 255) that contains packed int32 numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.packTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Packs a table into a buffer. The table may contain other nested arrays, maps, None/nil, bool,
number or string values. All other types (e.g. functions) will be considered as string or None/nil values.
You can also use sim.packTable to quickly compare two tables or to perform a deep copy of a table
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.unpackTable
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simPackTable(int stackHandle, int* bufferSize)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>. There must be a table located at the top of the stack.</li>
<li><strong>bufferSize</strong>: size of the returned buffer.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr in case of an error, otherwise a data buffer. The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes buffer = sim.packTable(list/dict aTable, int packingScheme = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer buffer = sim.packTable(any[]/map aTable, int packingScheme = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>aTable</strong>: array or map</li>
<li><strong>packingScheme</strong>: 0 for CoppeliaSim format, 1 for CBOR format, 2 for CBOR format where doubles are packed as floats. When CBOR format is selected, strings with an @:txt: suffix will be forcibly packed as text, and strings with an @:dat: suffix will be forcibly packed as byte buffer</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>buffer</strong>: a data buffer</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.packUInt16Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Packs an array of uint16 numbers into a string
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.unpackUInt16Table
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
bytes data = sim.packUInt16Table(list uint16Numbers, int startUint16Index = 0, int uint16Count = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer data = sim.packUInt16Table(int[] uint16Numbers, int startUint16Index = 0, int uint16Count = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>uint16Numbers</strong>: array containing uint16 numbers. Invalid uint16 numbers will be packed in an undefined manner.</li>
<li><strong>startUint16Index</strong>: zero-based index from which on data should be packed. Can be omitted in which case 0 is used</li>
<li><strong>uint16Count</strong>: amount of uint16s that should be packed. Can be omitted in which case 0 is used (which indicates that the maximum available uint16s should be packed from the indicated startUint16Index)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>data</strong>: a buffer (values between 0 and 255) that contains packed uint16 numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.packUInt32Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Packs an array of uint32 numbers into a string
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.unpackUInt32Table
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
bytes data = sim.packUInt32Table(list uint32Numbers, int startUint32Index = 0, int uint32Count = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer data = sim.packUInt32Table(int[] uint32Numbers, int startUint32Index = 0, int uint32Count = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>uint32Numbers</strong>: array containing uint32 numbers. Non-numbers will be packed as zero values</li>
<li><strong>startUint32Index</strong>: zero-based index from which on data should be packed. Can be omitted in which case 0 is used</li>
<li><strong>uint32Count</strong>: amount of uint32s that should be packed. Can be omitted in which case 0 is used (which indicates that the maximum available uint32s should be packed from the indicated startUint32Index)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>data</strong>: a buffer (values between 0 and 255) that contains packed uint32 numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.packUInt8Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Packs an array of uint8 numbers into a string
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.unpackUInt8Table
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
bytes data = sim.packUInt8Table(list uint8Numbers, int startUint8Index = 0, int uint8count = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer data = sim.packUInt8Table(int[] uint8Numbers, int startUint8Index = 0, int uint8count = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>uint8Numbers</strong>: array containing uint8 numbers. Invalid byte number will be packed in an undefined manner.</li>
<li><strong>startUint8Index</strong>: zero-based index from which on data should be packed. Can be omitted in which case 0 is used</li>
<li><strong>uint8count</strong>: amount of uint8s that should be packed. Can be omitted in which case 0 is used (which indicates that the maximum available uint8s should be packed from the indicated startUint8Index)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>data</strong>: a buffer (values between 0 and 255) that contains the uint8 numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.pauseSimulation
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Requests a pause of a simulation
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.startSimulation
sim.stopSimulation
sim.getSimulationState
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPauseSimulation()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the operation could not be performed. &gt;0 in case of success.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.pauseSimulation()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.pauseSimulation()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.persistentDataRead
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads a block of persistent data
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.persistentDataWrite
sim.getPersistentDataTags
sim.readCustomDataBlock
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simPersistentDataRead(const char* dataTag, int* dataLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>dataTag</strong>: name of the data block</li>
<li><strong>dataLength</strong>: size of the returned data block, since it may contain any data (also embedded zeros).</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>nullptr if operation was not successful or data block does not exist, otherwise the data block (which may contain any value, including embedded zeros). In that case the returned buffer should be released with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a></li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes dataValue = sim.persistentDataRead(string dataTag)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer dataValue = sim.persistentDataRead(string dataTag)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>dataTag</strong>: name of the data block</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>dataValue</strong>: value of the data block, or None/nil if data block does not exist. The returned data block may contain any value, including embedded zeros.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.persistentDataWrite
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Writes a persistent data block. Persistent data, valid across all opened simulator scenes, remains until the simulator ends,
or until it is cleared by writing an empty data block. If the options flag is set appropriately, then persistent data can
also be stored on file, and be automatically reloaded next time CoppeliaSim starts
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.persistentDataRead
sim.writeCustomDataBlock
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPersistentDataWrite(const char* dataTag, const char* dataValue, int dataLength, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>dataTag</strong>: name of the data block</li>
<li><strong>dataValue</strong>: content of the data block (which may contain any value, including embedded zeros). If dataValue is an empty string, then the data block is cleared (if present).</li>
<li><strong>dataLength</strong>: size of the data block.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 is set (1): data is also stored on file ("system/persistentData.dat"), and automatically reloaded next time CoppeliaSim start</li>
</ul>
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.persistentDataWrite(string dataTag, string/bytes dataValue, int options = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.persistentDataWrite(string dataTag, buffer dataValue, int options = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>dataTag</strong>: name of the data block</li>
<li><strong>dataValue</strong>: content of the data block (which may contain any value, including embedded zeros). If dataValue is an empty string, then the data block is cleared (if present).</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 is set (1): data is also stored on file ("system/persistentData.dat"), and automatically reloaded next time CoppeliaSim start</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPopStackItem
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes the top item in the stack, effectively reducing the stack size by one
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simMoveStackItemToTop
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPopStackItem(int stackHandle, int count)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>count</strong>: number of items to pop, or 0 to clear the stack.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise the new size of the stack.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.poseToMatrix
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Converts a pose to a transformation matrix
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPoseToMatrix(const double* poseIn, double* matrixOut)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>poseIn</strong>: the input pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>matrixOut</strong>: the output matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list matrix = sim.poseToMatrix(list pose)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[12] matrix = sim.poseToMatrix(float[7] pose)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pose</strong>: input pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>matrix</strong>: the output matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushBoolOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes a bool value onto the stack. The value will then be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushBoolOntoStack(int stackHandle, bool value)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>value</strong>: value to push</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushDoubleOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes a double precision value (i.e. a Lua number) onto the stack. The value will then be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushDoubleOntoStack(int stackHandle, double value)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>value</strong>: value to push.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushDoubleTableOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes a double-precision array onto the stack, as a table filled with Lua numbers. The table will then be located
at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushDoubleTableOntoStack(int stackHandle, const double* values, int valueCnt)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>values</strong>: double-precision array.</li>
<li><strong>valueCnt</strong>: size of the array.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushFloatOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes a float value onto the stack. The value will then be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushFloatOntoStack(int stackHandle, float value)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>value</strong>: value to push.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushFloatTableOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes a float array onto the stack. The table will then be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushFloatTableOntoStack(int stackHandle, const float* values, int valueCnt)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>values</strong>: float array.</li>
<li><strong>valueCnt</strong>: size of the array.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushInt32OntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes an int32 value (i.e. a Lua number) onto the stack. The value will then be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushInt32OntoStack(int stackHandle, int value)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>value</strong>: value to push.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushInt32TableOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes an int32 array onto the stack, as a table filled with Lua numbers. The table will then
be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushInt32TableOntoStack(int stackHandle, const int* values, int valueCnt)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>values</strong>: int32 array.</li>
<li><strong>valueCnt</strong>: size of the array.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushInt64OntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes an int64 value (i.e. a Lua number) onto the stack. The value will then be located at the
top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushInt64OntoStack(int stackHandle, long long int value)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>value</strong>: value to push.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushInt64TableOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes an int64 array onto the stack, as a table filled with Lua numbers. The table will
then be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushInt64TableOntoStack(int stackHandle, const long long int* values, int valueCnt)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>values</strong>: int64 array.</li>
<li><strong>valueCnt</strong>: size of the array.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushNullOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes the value Null (or None/nil) onto the stack. The value will then be
located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushNullOntoStack(int stackHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushStringOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes a string onto the stack. The string may contain any values, including embedded zeros.
The string will then be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushStringOntoStack(int stackHandle, const char* value, int stringSize)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>value</strong>: a string</li>
<li><strong>stringSize</strong>: length of the string. If you specify 0, the string is a text string and its length will be automatically determined.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushTableOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes an empty table onto the stack. The table will then be located at
the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushTableOntoStack(int stackHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simPushUInt8TableOntoStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes a uint8 array onto the stack, as a table filled with Lua numbers.
The table will then be located at the top of the stack
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simPushUInt8TableOntoStack(int stackHandle, const unsigned char* values, int valueCnt)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
<li><strong>values</strong>: uint8 array.</li>
<li><strong>valueCnt</strong>: size of the array.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.pushUserEvent
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Pushes a user-triggered event. Messages are received asynchronously via the
sysCall_event <a href="../callbackFunctions.htm">callback function</a> and via the plugin
<a href="../apiConstants.htm#simulatorMessages">sim_message_eventcallback_events</a> message call
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
sim.pushUserEvent(string event, int handle int uid, dict eventData, int options = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.pushUserEvent(string event, int handle int uid, table eventData, int options = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>event</strong>: event name</li>
<li><strong>handle</strong>: optional handle associated with the event. Can be -1</li>
<li><strong>uid</strong>: optional unique id associated with the event. Can be -1</li>
<li><strong>eventData</strong>: event data</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): event can be merged with a previous, same event</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.quitSimulator
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Triggers a quit signal after which the application eventually ends
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
void simQuitSimulator(bool ignoredArg)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>ignoredArg</strong>: set to true.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiSynopsisPython ====================<
sim.quitSimulator()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.quitSimulator()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.readCustomDataBlock
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads custom data that is stored inside of an object or the scene.  Reads also custom data for the application's
currrent session
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#customDataBlocks">custom data block related functions</a>
<a href="../apiFunctions.htm#packing">data packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simReadCustomDataBlock(int objectHandle, const char* tagName, int* dataSize)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object, or sim.handle_scene if the data is stored in the scene, or sim.handle_app if the data is stored in the application's current session.</li>
<li><strong>tagName</strong>: string that identifies the data.</li>
<li><strong>dataSize</strong>: pointer to an integer receiving the size of the returned buffer.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>the custom data block, or nullptr in case of an error (or if the data is not present). The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes customDataBlock = sim.readCustomDataBlock(int objectHandle, string tagName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer customDataBlock = sim.readCustomDataBlock(int objectHandle, string tagName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object, or sim.handle_scene if the data is stored in the scene, or sim.handle_app if the data is stored in the application's current session</li>
<li><strong>tagName</strong>: string that identifies the data</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>customDataBlock</strong>: the custom data block</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.readCustomDataBlockTags
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads the tags of all custom data that is stored inside of an object,
a scene, or the application
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.readCustomDataBlock
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simReadCustomDataBlockTags(int objectHandle, int* tagCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object, sim.handle_scene  or sim.handle_app.</li>
<li><strong>tagCount</strong>: pointer to an integer receiving the number of tag strings contained in the returned buffer.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>the tags (each followed by the zero-char) or nullptr in case of an error (or if no tags are present). The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list tags = sim.readCustomDataBlockTags(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string[] tags = sim.readCustomDataBlockTags(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object, sim.handle_scene  or sim.handle_app</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>tags</strong>: an array of tags or None/nil if no tags are present</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.readCustomTableData
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads custom table data that is stored inside of an object or the scene.
Reads also custom table data for the application's currrent session
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#customDataBlocks">custom data block related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
dict/list tableData = sim.readCustomTableData(int objectHandle, string tagName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
table tableData = sim.readCustomTableData(int objectHandle, string tagName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object, or sim.handle_scene if the data is stored in the scene, or sim.handle_app if the data is stored in the application's current session.</li>
<li><strong>tagName</strong>: string that identifies the data</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>tableData</strong>: the data, or an empty array if the custom data is not present</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.readForceSensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads the force and torque applied to a force sensor (filtered values are read)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getJointForce
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simReadForceSensor(int objectHandle, double* forceVector, double* torqueVector)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object (must be a force sensor). Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_rawvalue</a> (simply add sim.handleflag_rawvalue to objectHandle), if you wish to access the raw values generated by each individual dynamic simulation step (by default, there are 10 dynamic simulation steps for each simulation step). Raw values can only be accessed from inside a <a href="../callbackFunctions.htm">callback function</a> triggered by the physics engine.</li>
<li><strong>forceVector</strong>: pointer to 3 values (applied forces along the sensor's x, y and z-axes). Can be nullptr</li>
<li><strong>torqueVector</strong>: pointer to 3 values (applied torques about the sensor's x, y and z-axes). Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, otherwise bit-coded:
<ul>
<li>bit 0 set (1): force and torque data is available, otherwise it is not (yet) available (e.g. when not enough values are present for the filter)</li>
</ul>
</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, list forceVector, list torqueVector = sim.readForceSensor(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, float[3] forceVector, float[3] torqueVector = sim.readForceSensor(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object (must be a force sensor). Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_rawvalue</a> (simply add sim.handleflag_rawvalue to objectHandle), if you wish to access the raw values generated by each individual dynamic simulation step (by default, there are 10 dynamic simulation steps for each simulation step). Raw values can only be accessed from inside a <a href="../callbackFunctions.htm">callback function</a> triggered by the physics engine.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: bit-coded:
<ul>
<li>bit 0 set (1): force and torque data is available, otherwise it is not (yet) available (e.g. when not enough values are present for the filter)</li>
</ul>
</li>
<li><strong>forceVector</strong>: array of 3 values (applied forces along the sensor's x, y and z-axes)</li>
<li><strong>torqueVector</strong>: array of 3 values (applied torques about the sensor's x, y and z-axes)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.readProximitySensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads the state of a proximity sensor. This function doesn't perform detection,
it merely reads the result from a previous call to <a href="simHandleProximitySensor.htm">sim.handleProximitySensor</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.checkProximitySensor
sim.checkProximitySensorEx
sim.resetProximitySensor
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simReadProximitySensor(int sensorHandle, double* detectedPoint, int* detectedObjectHandle,
                           double* detectedSurfaceNormalVector)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of a proximity sensor object</li>
<li><strong>detectedPoint</strong>: coordinates of the closest detected point (x, y and z: detectedPoint[0]-detectedPoint[2]) relative to the sensor reference frame, and distance to the detected point (1 value: detectedPoint[3]). Can be nullptr</li>
<li><strong>detectedObjectHandle</strong>: handle of the object that was detected. Can be nullptr</li>
<li><strong>detectedSurfaceNormalVector</strong>: normal vector (normalized) of the detected surface. Relative to the sensor reference frame. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>detection state (0 or 1), or -1 in case of an error, or if <a href="simHandleProximitySensor.htm">simHandleProximitySensor</a> was never called, or if <a href="simResetProximitySensor.htm">simResetProximitySensor</a> was previously called.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int res, float dist, list point, int obj, list n = sim.readProximitySensor(int sensorHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int res, float dist, float[3] point, int obj, float[3] n = sim.readProximitySensor(int sensorHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of a proximity sensor</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>res</strong>: detection state (0 or 1), or -1 if <a href="simHandleProximitySensor.htm">sim.handleProximitySensor</a> was never called, or if <a href="simResetProximitySensor.htm">sim.resetProximitySensor</a> was previously called.</li>
<li><strong>dist</strong>: distance to the detected point</li>
<li><strong>point</strong>: array of 3 numbers indicating the relative coordinates of the detected point</li>
<li><strong>obj</strong>: handle of the object that was detected</li>
<li><strong>n</strong>: normal vector (normalized) of the detected surface. Relative to the sensor reference frame</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.readTexture
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retrieves the RGB data (or a portion of it) related to a specific texture
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getTextureId
sim.writeTexture
sim.createTexture
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
char* simReadTexture(int textureId, int options, int posX, int posY, int sizeX, int sizeY)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>textureId</strong>: ID of the texture. See also <a href="simGetTextureId.htm">simGetTextureId</a>.</li>
<li><strong>options</strong>: reserved for future functionality. Set to zero.</li>
<li><strong>posX / posY</strong>: x/y position of the texture portion to retrieve. Set to [0 0] to retrieve the full texture</li>
<li><strong>sizeX / sizeY</strong>: x/y size of the texture portion to retrieve. Set to [0 0] to retrieve the full texture</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>The texture data, or nullptr in case of an error. The texture data contains RGB values between 0-255 (3 bytes per pixel). The user is in charge of releasing the returned buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes textureData = sim.readTexture(int textureId, int options, int posX = 0, int posY = 0,
                                    int sizeX = 0, int sizeY = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer textureData = sim.readTexture(int textureId, int options, int posX = 0, int posY = 0,
                                     int sizeX = 0, int sizeY = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>textureId</strong>: ID of the texture. See also <a href="simGetTextureId.htm">simGetTextureId</a>.</li>
<li><strong>options</strong>: reserved for future functionality. Set to zero.</li>
<li><strong>posX / posY</strong>: x/y position of the texture portion to retrieve. Set to [0 0] to retrieve the full texture</li>
<li><strong>sizeX / sizeY</strong>: x/y size of the texture portion to retrieve. Set to [0 0] to retrieve the full texture</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>textureData</strong>: texture data</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.readVisionSensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads the state of a vision sensor. This function doesn't perform detection, it merely
reads the result from a previous call to <a href="simHandleVisionSensor.htm">sim.handleVisionSensor</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.checkVisionSensor
sim.checkVisionSensorEx
sim.resetVisionSensor
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simReadVisionSensor(int visionSensorHandle, double** auxValues, int** auxValuesCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>visionSensorHandle</strong>: handle of a vision sensor object</li>
<li><strong>auxValues</strong>: by default CoppeliaSim returns one packet of 15 auxiliary values: the minimum of [intensity red green blue depth], the maximum of [intensity red green blue depth], and the average of [intensity red green blue depth]. Additional packets can be appended in the <a href="../visionCallbackFunctions.htm">vision callback function</a>. AuxValues can be nullptr. The user is in charge of releasing the auxValues buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>(*auxValues).</li>
<li><strong>auxValuesCount</strong>: contains information about the number of auxiliary value packets and packet sizes returned in auxValues. The first value is the number of packets, the second is the size of packet1, the third is the size of packet2, etc. Can be nullptr if auxValues is also nullptr. The user is in charge of releasing the auxValuesCount buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>(*auxValuesCount).</li>
<li>See <a href="simHandleVisionSensor.htm">simHandleVisionSensor</a> for a usage example</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>detection state (0 or 1), or -1 in case of an error, or if <a href="simHandleVisionSensor.htm">simHandleVisionSensor</a> was never called, or if <a href="simResetVisionSensor.htm">simResetVisionSensor</a> was previously called.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, list packet1, list packet2, etc. = sim.readVisionSensor(int visionSensorHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, float[] packet1, float[] packet2, etc. = sim.readVisionSensor(int visionSensorHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>visionSensorHandle</strong>: handle of a vision sensor object</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: detection state (0 or 1), or -1 if <a href="simHandleVisionSensor.htm">sim.handleVisionSensor</a> was never called, or if <a href="simResetVisionSensor.htm">sim.resetVisionSensor</a> was previously called.</li>
<li><strong>packet1</strong>: default auxiliary packet of 15 auxiliary values: the minimum of [intensity red green blue depth], the maximum of [intensity red green blue depth], and the average of [intensity red green blue depth]</li>
<li><strong>packet2</strong>: additional auxiliary value packet (e.g. from an image processing component)</li>
<li><strong>packet3</strong>: etc. (the function returns as many tables as there are auxiliary value packets)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.refreshDialogs
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Refreshes CoppeliaSim's internal dialogs. Calling <a href="simRefreshDialogs.htm">sim.refreshDialogs</a> will
not trigger a <a href="../apiConstants.htm#simulatorMessages">sim.message_eventcallback_refreshdialogs</a> message
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simRefreshDialogs(int refreshDegree)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>refreshDegree</strong>: refresh degree (0=light, 1=medium, 2=full)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.refreshDialogs(int refreshDegree)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.refreshDialogs(int refreshDegree)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>refreshDegree</strong>: refresh degree (0=light, 1=medium, 2=full)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simRegisterScriptCallbackFunction
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Registers a custom script function, that calls back a c/c++ function. This function is useful for plugins
that wish to provide their own or customized script functions. Should be called inside of simInit entry point
<br><br>
Data exchange between a script and the plugin happens via a <a href="../apiFunctions.htm#stacks">stack</a>. Reading and writing arguments from/to the stack gives you a maximum of flexibility, and you wil be able to exchange also complex data structures. But it can also be tedious, if your data structures are anyway relatively simple. In that case you can use the helper classes <em>CScriptFunctionData</em> and <em>CScriptFunctionDataItem</em> located in <em>programming/</em><em>include</em>: they will greatly simplify the task.
<br><br>
Use following 4 functions in the helper class: <em>readDataFromStack</em>, <em>getInDataPtr</em>, <em>pushOutData</em> and <em>writeDataToStack</em>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simRegisterScriptVariable
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRegisterScriptCallbackFunction(const char* func, const char* reserved,
                                      void(*callBack)(struct SScriptCallBack* cb))
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>funct</strong>: name of the function, without namespace</li>
<li><strong>reserved</strong>: set to nullptr</li>
<li><strong>callback</strong>: callback address that is called when the function is called from Lua. See further down for a simple way to call above function, using a helper class. The callback's first argument is a SScriptCallBack structure that holds:</li>
<li><strong>int objectID</strong>: handle of the object that the calling script is attached to, or -1 if the calling script is not a child script</li>
<li><strong>int scriptID</strong>: handle of the calling script</li>
<li><strong>int stackID</strong>: a <a href="simCreateStack_cpp.htm">stack handle</a>. The stack is used to read arguments from the script, and to return data to the script.  See also the <a href="../apiFunctions.htm#stacks">available stack functions</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 if function was registered, 0 if function was replaced (when that function name already existed), -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.registerScriptFuncHook
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Registers a script function hook for <a href="../callbackFunctions.htm">callback functions</a>,
that will be executed before or after the specified function. Calling this function a second
time with the same arguments will unregister a previous hook
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simRegisterScriptFuncHook(int scriptHandle, const char* funcToHook, const char* userFunc,
                              bool execBefore, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script</li>
<li><strong>funcToHook</strong>: function to hook</li>
<li><strong>userFunc</strong>: user function</li>
<li><strong>execBefore</strong>: if true, the user function is called before the function to hook. Otherwise it is called after</li>
<li><strong>options</strong>: set to 0</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 if the hook registration was successful, 0 if a previous hook was removed, and -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisLua ====================<
int result = sim.registerScriptFuncHook(string funcToHook, string/function userFunc, bool execBefore)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>funcToHook</strong>: function to hook</li>
<li><strong>userFunc</strong>: user function. Can be a string or a function</li>
<li><strong>execBefore</strong>: if true, the user function is called before the function to hook. Otherwise it is called after</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>result: 1 if the hook registration was successful, or 0 if a previous hook was removed</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simRegisterScriptVariable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Registers a script variable. Should be called inside of simInit entry point
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simRegisterScriptCallbackFunction
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRegisterScriptVariable(const char* var, const char* val, int stackhandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>var</strong>: name of the variable, without namespace</li>
<li><strong>val</strong>: value of the variable. Can be nullptr, in which case the value of the variable will be the top item of the provided stack</li>
<li><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>. Set to 0 if <em>varValue</em> is not nullptr. If a stack is provided, it will be released at a later point by CoppeliaSim.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 if the variable was registered, 0 if the variable was replaced because it already existed, -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simReleaseBuffer
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Releases a buffer previously created with <a href="simCreateBuffer_cpp.htm">simCreateBuffer</a> or a buffer returned by the simulator
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simReleaseBuffer(void* buffer)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>buffer</strong>: buffer to be released</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.releaseLock
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Counterpart function to <a href="simAcquireLock.htm">sim.acquireLock</a>. Unlocking is cumulative
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
sim.releaseLock()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.releaseLock()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simReleaseStack
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Releases a stack object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simReleaseStack(int stackHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>:  stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 in case of success.</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.relocateShapeFrame
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Repositions and reorients the reference frame of a shape, while keeping the mesh
in place. The shape's inertia properties are unaffected.
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.alignShapeBB
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRelocateShapeFrame(int shapeHandle, const double* pose)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>pose</strong>: pose for the shape's reference frame. The pose is expressed as [x y z qx qy qz qw]. A nullptr pose or a pose containing only zeros will relocate the frame to the center of the mesh's bounding box</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if the frame could not be relocated (the frame of primitive shapes cannot be relocated), otherwise 1.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bool result = sim.relocateShapeframe(int shapeHandle, list pose)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
bool result = sim.relocateShapeFrame(int shapeHandle, float[7] pose)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>pose</strong>: pose for the shape's reference frame. The pose is expressed as [x y z qx qy qz qw]. A pose containing only zeros relocates the frame to the center of the mesh's bounding box</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: 0 if the frame could not be relocated (the frame of primitive shapes cannot be relocated), otherwise 1.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.removeDrawingObject
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes a previously added drawing object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addDrawingObject
sim.addDrawingObjectItem
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRemoveDrawingObject(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a previously added drawing object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.removeDrawingObject(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.removeDrawingObject(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a previously added drawing object</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.removeModel
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes a model from the scene. Object
destruction always destroys attached scripts before destroying the object itself. If a script
destroys the object it is attached to, then the object is first destroyed, and the
script destruction is delayed
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.removeObjects
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRemoveModel(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the model (i.e. object tagged as model) to remove.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the number of removed objects (a model might contain several objects)</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int removedCnt = sim.removeModel(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int removedCnt = sim.removeModel(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the model (i.e. object tagged as model) to remove</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>removedCnt</strong>: number of removed objects (a model might contain several objects)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.removeObjects
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes one or several objects from the scene.
Object destruction always destroys attached scripts before destroying the object itself. If a script
triggers the destruction of the object it is attached to, then the object is first destroyed, and the
script destruction is delayed
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.removeModel
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRemoveObjects(const int* objectHandles, int count)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandles</strong>: handles of the objects to remove</li>
<li><strong>count</strong>: number of objects to remove</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.removeObjects(int[] objectHandles)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.removeObjects(int[] objectHandles)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandles</strong>: handles of the objects to remove</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.removeParticleObject
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes a previously added particle object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addParticleObject
sim.addParticleObjectItem
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.removeParticleObject(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.removeParticleObject(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a previously added particle object. sim.handle_all removes all particle objects from the scene</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.removePointsFromPointCloud
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes points from a <a href="../pointClouds.htm">point cloud</a>. When a point cloud doesn't
use an OC tree calculation structure, then individual points cannot be removed,
only all points can be removed in that case
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.insertPointsIntoPointCloud
sim.setPointCloudOptions
<a href="../apiFunctions.htm#pointCloud">point cloud related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRemovePointsFromPointCloud(int pointCloudHandle, int options, const double* pts, int ptCnt,
                                  double tolerance, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the point cloud reference frame, otherwise they are relative to the world reference frame</li>
</ul>
</li>
<li><strong>pts</strong>: pointer to the point positions specified as x/y/z coordinates. Set to nullptr to remove all points</li>
<li><strong>ptCnt</strong>: number of point coordinates contained in pts</li>
<li><strong>tolerance</strong>: distance used as a tolerance value</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of points in the point cloud</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalPointCnt = sim.removePointsFromPointCloud(int pointCloudHandle, int options, list points,
                                                   float tolerance)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalPointCnt = sim.removePointsFromPointCloud(int pointCloudHandle, int options, float[] points,
                                                   float tolerance)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the point cloud reference frame, otherwise they are relative to the world reference frame</li>
</ul>
</li>
<li><strong>points</strong>: point positions specified as x/y/z coordinates. Set to None/nil to remove all points</li>
<li><strong>tolerance</strong>: distance used as a tolerance value</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalPointCnt</strong>: total number of points in the point cloud</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.removeScript
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes a script. Not all script types can be removed, and it will also depend on whether
simulation is running or not. Use with caution
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.addScript
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRemoveScript(int scriptHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script to remove or sim.handle_all to remove all scripts</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.removeScript(int scriptHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.removeScript(int scriptHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script to remove,  or sim.handle_all or sim.handle_self</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.removeVoxelsFromOctree
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes voxels from an <a href="../octrees.htm">OC tree</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.insertVoxelsIntoOctree
<a href="../apiFunctions.htm#octree">OC tree related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRemoveVoxelsFromOctree(int octreeHandle, int options, const double* pts, int ptCnt,
                              void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the OC tree reference frame, otherwise they are relative to the world reference frame</li>
</ul>
</li>
<li><strong>pts</strong>: pointer to the voxel positions specified as x/y/z coordinates. Set to nullptr to remove all voxels</li>
<li><strong>ptCnt</strong>: number of point coordinates contained in pts</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of voxels in the OC tree</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalVoxelCnt = sim.removeVoxelsFromOctree(int octreeHandle, int options, list points)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalVoxelCnt = sim.removeVoxelsFromOctree(int octreeHandle, int options, float[] points)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): specified points are relative to the OC tree reference frame, otherwise they are relative to the world reference frame</li>
</ul>
</li>
<li><strong>points</strong>: voxel positions specified as x/y/z coordinates. Set to None/nil to remove all voxels</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalVoxelCnt</strong>: total number of voxels in the OC tree</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.resamplePath
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Returns a resampled path
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#paths">path related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list outputPath = sim.resamplePath(list path, list pathLengths, int finalConfigCnt,
                                   dict method = {'type': 'linear', 'strength': 1.0,
                                   'forceOpen': False}, list types = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] outputPath = sim.resamplePath(float[] path, float[] pathLengths, int finalConfigCnt,
                                      map method = {type = 'linear', strength = 1.0,
                                      forceOpen = false}, int[] types = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>path</strong>: path, specified in row-major order, e.g. a path containing two 3D poses (position+quaternion) would be [x1 y1 z1 qx1 qy1 qz1 qw1 x2 y2 z2 qx2 qy2 qz2 qw2]</li>
<li><strong>pathLengths</strong>: lengths of a path. Each path point should have a corresponding length value (as the distance from the path's first point, along the path). See also <a href="simGetPathLengths.htm">sim.getPathLengths</a>.</li>
<li><strong>finalConfigCnt</strong>: number of points or configurations the resampled path should contain</li>
<li><strong>method</strong>: optional map specifying the type of interpolation (linear or quadraticBezier), and whether the path should be considered as open, even if the first and last path points overlap, and the bezier strength (0.05-1.0)</li>
<li><strong>types</strong>: optional array specifying the type of each configuration value/dimension: 0=cartesian value, 1=2pi-cyclic value, 2=quaternion value. e.g. a configuration representing 3D poses should use a types argument [0 0 0 2 2 2 2], a configuration representing revolute and cyclic joints should use a types argument [1 1 1 ...]</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>outputPath</strong>: the resampled path</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.resetDynamicObject
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Dynamically resets an object that is dynamically simulated. This means that the object representation
in the dynamics engine is removed, and added again. This can be useful when the set-up of a dynamically
simulated chain needs to be modified during simulation (e.g. joint or shape attachement position/orientation changed)
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simResetDynamicObject(int objectHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_model</a>, if you wish to reset all objects in a <a href="../models.htm">model</a> (where objectHandle would be the model base).</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.resetDynamicObject(int objectHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.resetDynamicObject(int objectHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_model</a>, if you wish to reset all objects in a <a href="../models.htm">model</a> (where objectHandle would be the model base).</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.resetGraph
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Resets a graph object (i.e. clears all its data streams)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#graphs">functions related to graphs</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simResetGraph(int graphHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.resetGraph(int graphHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.resetGraph(int graphHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph object</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.resetProximitySensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Clears the detection state, detection color, detection segments, etc. of a proximity sensor object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.handleProximitySensor
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simResetProximitySensor(int sensorHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the proximity sensor object or sim.handle_all or sim.handle_all_except_explicit. (sim.handle_all will reset all proximity sensor objects, while sim.handle_all_except_explicit will only reset those that are not marked as &quot;explicit handling&quot;)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.resetProximitySensor(int sensorHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.resetProximitySensor(int sensorHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the proximity sensor object or sim.handle_all or sim.handle_all_except_explicit</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simResetScript
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Resets a script interpreter linked to a specific script.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simResetScript(int scriptHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script to reset or sim.handle_all to reset all scripts</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.resetVisionSensor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Clears the detection state, etc. of a proximity sensor object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.handleVisionSensor
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simResetVisionSensor(int sensorHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor object or sim.handle_all or sim.handle_all_except_explicit. (sim.handle_all will reset all vision sensor objects, while sim.handle_all_except_explicit will only reset those that are not marked as &quot;explicit handling&quot;)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.resetVisionSensor(int sensorHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.resetVisionSensor(int sensorHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor object or sim.handle_all or sim.handle_all_except_explicit</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.restoreEntityColor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Restores the color of an <a href="../entities.htm">entity</a>, previously
modified with <a href="simChangeEntityColor.htm">sim.changeEntityColor</a>
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
sim.restoreEntityColor(list originalColorData)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.restoreEntityColor(map[] originalColorData)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>originalColorData</strong>: the data returned from a call to <a href="simChangeEntityColor.htm">sim.changeEntityColor</a></li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.rotateAroundAxis
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Rotates a pose or transformation matrix around a random axis in space. This function,
when used in combination with <a href="simGetRotationAxis.htm">sim.getRotationAxis</a>, can
be used to build interpolations between poses or transformation matrices
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRotateAroundAxis(const double* matrixIn, const double* axis, const double* axisPos,
                        double angle, double* matrixOut)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrixIn</strong>: transformation matrix to rotate (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>axis</strong>: axis vector in absolute coordinates to rotate around</li>
<li><strong>axisPos</strong>: position of the rotation axis in absolute coordinates</li>
<li><strong>angle</strong>: amount of rotation to perform</li>
<li><strong>matrixOut</strong>: returned transformed (rotated) matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list poseOut/matrixOut = sim.rotateAroundAxis(list poseIn/matrixIn, list axis, list axisPos,
                                              float angle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[7]/float[12] poseOut/matrixOut = sim.rotateAroundAxis(float[7]/float[12] poseIn/matrixIn,
                                                            float[3] axis, float[3] axisPos,
                                                            float angle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>poseIn/matrixIn</strong>: the pose (array of 7 values [x y z qx qy qz qw]) or transformation matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]) to rotate</li>
<li><strong>axis</strong>: the axis vector in absolute coordinates to rotate around</li>
<li><strong>axisPos</strong>: the position of the rotation axis in absolute coordinates</li>
<li><strong>angle</strong>: the amount of rotation to perform</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>poseOut/matrixOut</strong>: the transformed (rotated) pose (array of 7 values [x y z qx qy qz qw]) or matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.ruckigPos
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Executes a call to the <a href="https://github.com/pantor/ruckig#readme">Ruckig online trajectory generator</a>.
The Ruckig online trajectory generator provides instantaneous trajectory generation capabilities
for motion control systems. This function prepares a  position-based trajectory generation object,
that can then be calculated with <a href="simRuckigStep.htm">sim.ruckigStep</a>. When this object
is not needed anymore, remove it with <a href="simRuckigRemove.htm">sim.ruckigRemove</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.ruckigVel
sim.moveToPose
sim.moveToConfig
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRuckigPos(int dofs, double baseCycleTime, int flags, const double* currentPos,
                 const double* currentVel, const double* currentAccel, const double* maxVel,
                 const double* maxAccel, const double* maxJerk, const bool* selection,
                 const double* targetPos, const double* targetVe, double* reserved1, int* reserved2l)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>dofs</strong>: number of degrees of freedom (n).</li>
<li><strong>baseCycleTime</strong>: smallest expected cycle time. The cycle time should always be a multiple of baseCycleTime. Use a value of 0.0001 (0.1ms).</li>
<li><strong>flags</strong>: <a href="../apiConstants.htm#ruckigFunctions">Ruckig flags</a>. -1 for default flags.</li>
<li><strong>currentPos</strong>: current position (one value for each DoF)</li>
<li><strong>currentVel</strong>: current velocity (one value for each DoF)</li>
<li><strong>currentAccel</strong>: current acceleration (one value for each DoF)</li>
<li><strong>maxVel</strong>: maximum allowed velocity (one value for each DoF, i.e. [maxV_1 ... maxV_n]). If sim.ruckig_minvel is specified in flags, then maxVel should contain [maxV_1 ... maxV_n minV_1 ... minV_n]</li>
<li><strong>maxAccel</strong>: maximum allowed acceleration (one value for each DoF, i.e. [maxA_1 ... maxA_n]). If sim.ruckig_minaccel is specified in flags, then maxAccel should contain [maxA_1 ... maxA_n minA_1 ... minA_n]</li>
<li><strong>maxJerk</strong>: maximum allowed jerk (one value for each DoF)</li>
<li><strong>selection</strong>: selection vector (one value for each DoF). For a default behaviour, fill the vector with non-zero values.</li>
<li><strong>targetPos</strong>: target position (one value for each DoF)</li>
<li><strong>targetVel</strong>: target velocity (one value for each DoF)</li>
<li><strong>reserved1</strong>: reserved. Set to nullptr</li>
<li><strong>reserved2</strong>: reserved. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>A negative value in case of an error, otherwise the handle of the created object</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int handle = sim.ruckigPos(int dofs, float baseCycleTime, int flags, list currentPosVelAccel,
                           list maxVelAccelJerk, list selection, list targetPosVel)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int handle = sim.ruckigPos(int dofs, float baseCycleTime, int flags, float[] currentPosVelAccel,
                           float[] maxVelAccelJerk, int[] selection, float[] targetPosVel)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>dofs</strong>: number of degrees of freedom (n).</li>
<li><strong>baseCycleTime</strong>: smallest expected cycle time. The cycle time should always be a multiple of baseCycleTime. Use a value of 0.0001 (0.1ms).</li>
<li><strong>flags</strong>: <a href="../apiConstants.htm#ruckigFunctions">Ruckig flags</a>. -1 for default flags.</li>
<li><strong>currentPosVelAccel</strong>: current position, velocity and acceleration: [pos_1 ... pos_n vel_1 ... vel_n accel_1 ... accel_n] (one value for each DoF)</li>
<li><strong>maxVelAccelJerk</strong>: maximum allowed velocity, acceleration and jerk: [maxV_1 ... maxV_n maxA_1 ... maxA_n maxJ_1 ... maxJ_n]. If sim.ruckig_minvel is specified in flags, then maxVelAccelJerk should contain following additional values: [minV_1 ... minV_n]. If sim.ruckig_minaccel is specified in flags, then maxVelAccelJerk should contain following additional values: [minA_1 ... minA_n]</li>
<li><strong>selection</strong>: selection vector (one value for each DoF). For a default behaviour, fill the vector with non-zero values.</li>
<li><strong>targetPosVel</strong>: target position and velocity: [tPos_1 ... tPos_n tVel_1 ... tVel_n]</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>handle</strong>: the handle to the created object</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.ruckigRemove
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes an object previously created via <a href="simRuckigPos.htm">sim.ruckigPos</a>
or <a href="simRuckigVel.htm">sim.ruckigVel</a>.
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simRuckigRemove(int handle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>handle</strong>: handle of the object created via <a href="simRuckigPos.htm">simRuckigPos</a> or <a href="simRuckigVel.htm">simRuckigVel</a>.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 in case of success</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.ruckigRemove(int handle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.ruckigRemove(int handle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the object created via <a href="simRuckigPos.htm">sim.ruckigPos</a> or <a href="simRuckigVel.htm">sim.ruckigVel</a>.</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.ruckigStep
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Executes a call to the <a href="https://github.com/pantor/ruckig#readme">Ruckig online trajectory generator</a>.
The Ruckig online trajectory generator provides instantaneous trajectory generation capabilities for
motion control systems. This function steps forward a trajectory generation algorithm previously prepared
via <a href="simRuckigPos.htm">sim.ruckigPos</a> or <a href="simRuckigVel.htm">sim.ruckigVel</a>
==================== apiDescription ====================>

==================== apiSynopsisCpp ====================<
int simRuckigStep(int handle, double cycleTime, double* newPos, double* newVel, double* newAccel,
                  double* syncTime, double* reserved1, int* reserved2)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>handle</strong>: handle of the object created via <a href="simRuckigPos.htm">simRuckigPos</a> or <a href="simRuckigVel.htm">simRuckigVel</a>.</li>
<li><strong>cycleTime</strong>: cycle time or simulation step. Should always be a multiple of the base cycle time</li>
<li><strong>newPos</strong>: new position</li>
<li><strong>newVel</strong>: new velocity</li>
<li><strong>newAccel</strong>: new acceleration</li>
<li><strong>syncTime</strong>: synchronization time (output). This is the time needed to reach the desired state. This time does not include the cycle time of the current call to sim.RuckigStep)</li>
<li><strong>reserved1</strong>: reserved. Set to nullptr</li>
<li><strong>reserved2</strong>: reserved. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 or -2 in case of an immediate error, otherwise the return value of the update function in the motion library:
<ul>
<li>1: Finished (final state reached)</li>
<li>0: Working (final state not yet reached)</li>
<li>-100: ErrorInvalidInput</li>
<li>-101: ErrorTrajectoryDuration</li>
<li>-110: ErrorExecutionTimeCalculation</li>
<li>-111: ErrorSynchronizationCalculation</li>
</ul>
</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int result, list newPosVelAccel, float synchronizationTime = sim.ruckigStep(int handle,
                                                                            float cycleTime)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int result, float[] newPosVelAccel, float synchronizationTime = sim.ruckigStep(int handle,
                                                                               float cycleTime)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the object created via <a href="simRuckigPos.htm">sim.ruckigPos</a> or <a href="simRuckigVel.htm">sim.ruckigVel</a>.</li>
<li><strong>cycleTime</strong>: cycle time or simulation step. Should always be a multiple of the base cycle time</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: return value of the update function in the motion library:
<ul>
<li>1: Result::Finished (final state reached)</li>
<li>0: Result::Working (final state not yet reached)</li>
<li>-100: Result::ErrorInvalidInput</li>
<li>-101: Result::ErrorTrajectoryDuration</li>
<li>-110: Result::ErrorExecutionTimeCalculation</li>
<li>-111: Result::ErrorSynchronizationCalculation</li>
</ul>
</li>
<li><strong>newPosVelAccel</strong>: new positions, velocities and accelerations, i.e. [p0 ... pn v0 ... vn a0 ... an]</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.ruckigVel
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Executes a call to the <a href="https://github.com/pantor/ruckig#readme">Ruckig online trajectory generator</a>.
The Ruckig online trajectory generator provides instantaneous trajectory generation capabilities for
motion control systems. This function prepares a  velocity-based trajectory generation object,
that can then be calculated with <a href="simRuckigStep.htm">sim.ruckigStep</a>. When this object
is not needed anymore, remove it with <a href="simRuckigRemove.htm">sim.ruckigRemove</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.ruckigPos
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simRuckigVel(int dofs, double baseCycleTime, int flags, const double* currentPos,
                 const double* currentVel, const double* currentAccel, const double* maxAccel,
                 const double* maxJerk, const bool* selection, const double* targetVel,
                 double* reserved1, int* reserved2)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>dofs</strong>: number of degrees of freedom (n).</li>
<li><strong>baseCycleTime</strong>: smallest expected cycle time. The cycle time should always be a multiple of baseCycleTime. Use a value of 0.0001 (0.1ms).</li>
<li><strong>flags</strong>: <a href="../apiConstants.htm#ruckigFunctions">Ruckig flags</a>. -1 for default flags.</li>
<li><strong>currentPos</strong>: current position (one value for each DoF)</li>
<li><strong>currentVel</strong>: current velocity (one value for each DoF)</li>
<li><strong>currentAccel</strong>: current acceleration (one value for each DoF)</li>
<li><strong>maxAccel</strong>: maximum allowed acceleration (one value for each DoF, i.e. [maxA_1 ... maxA_n]). If sim.ruckig_minaccel is specified in flags, then maxAccel should contain [maxA_1 ... maxA_n minA_1 ... minA_n]</li>
<li><strong>maxJerk</strong>: maximum allowed jerk (one value for each DoF)</li>
<li><strong>selection</strong>: selection vector (one value for each DoF). For a default behaviour, fill the vector with non-zero values.</li>
<li><strong>targetVel</strong>: target velocity (one value for each DoF)</li>
<li><strong>reserved1</strong>: reserved. Set to nullptr</li>
<li><strong>reserved2</strong>: reserved. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>A negative value in case of an error, otherwise the handle of the created object</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int handle = sim.ruckigVel(int dofs, float baseCycleTime, int flags, list currentPosVelAccel,
                           list maxAccelJerk, list selection, list targetVel)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int handle = sim.ruckigVel(int dofs, float baseCycleTime, int flags, float[] currentPosVelAccel,
                           float[] maxAccelJerk, int[] selection, float[] targetVel)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>dofs</strong>: number of degrees of freedom (n).</li>
<li><strong>baseCycleTime</strong>: smallest expected cycle time. The cycle time should always be a multiple of baseCycleTime. Use a value of 0.0001 (0.1ms).</li>
<li><strong>flags</strong>: <a href="../apiConstants.htm#ruckigFunctions">Ruckig flags</a>. -1 for default flags.</li>
<li><strong>currentPosVelAccel</strong>: current position, velocity and acceleration: [pos_1 ... pos_n vel_1 ... vel_n accel_1 ... accel_n] (one value for each DoF)</li>
<li><strong>maxAccelJerk</strong>: maximum allowed acceleration and jerk: [maxA_1 ... maxA_n maxJ_1 ... maxJ_n]. If sim.ruckig_minaccel is specified in flags, then maxAccelJerk should contain following additional values: [minA_1 ... minA_n]</li>
<li><strong>selection</strong>: selection vector (one value for each DoF). For a default behaviour, fill the vector with non-zero values.</li>
<li><strong>targetVel</strong>: target velocity (one value for each DoF)</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>handle</strong>: the handle of the created object</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.saveImage
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Saves an image to file or to memory
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.loadImage
sim.getScaledImage
sim.getVisionSensorImg
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
simSaveImage(const unsigned char* image, const int* resolution, int options, const char* filename,
             int quality, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>image</strong>: a pointer to rgb, rgba or greyscale values.</li>
<li><strong>resolution</strong>: the x/y resolution of the provided image.</li>
<li><strong>options</strong>: bit-coded. If bit0 and bit1 represent the format of the provided image (0=rgb, 1=rgba, 2=greyscale).</li>
<li><strong>filename</strong>: the name of the file to write. The file extension indicates the format.</li>
<li><strong>quality</strong>: the quality of the written image: 0 for best compression, 100 for largest file. Use -1 for default behaviour.</li>
<li><strong>reserved</strong>: Reserved for future extension. Set to nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes imgBuffer = sim.saveImage(bytes image, list resolution, int options, string filename,
                                int quality)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer imgBuffer = sim.saveImage(buffer image, int[2] resolution, int options, string filename,
                                 int quality)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>image</strong>:  image (in rgb, rgba or greyscale format)</li>
<li><strong>resolution</strong>: x/y resolution of the provided image.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 - bit1:  format of the provided image (0=rgb, 1=rgba, 2=greyscale)</li>
</ul>
</li>
<li><strong>filename</strong>: name of the file to write. The file extension indicates the format. If the filename only contains '.xxx', where xxx represents the file format, then the image will be saved to memory</li>
<li><strong>quality</strong>: quality of the written image: 0 for best compression, 100 for largest file. Use -1 for default behaviour.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>imgBuffer</strong>: a buffer containing the image in packed format (e.g. png, jpg, etc.), if the image was specified to be saved to memory.</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.saveModel
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Saves a model (an object marked as &quot;Object is model base&quot; and all other
objects in its hierarchy tree). Any existing file with same name will be overwritten
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.loadModel
sim.saveScene
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSaveModel(int baseOfModelHandle, const char* filename)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>baseOfModelHandle</strong>: handle of an object marked as &quot;Object is model base&quot;</li>
<li><strong>filename</strong>: model filename. The filename extension is required (<em>ttm</em>, or <em>simmodel.xml</em>)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes buffer = sim.saveModel(int baseOfModelHandle, string filename = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer modelData = sim.saveModel(int baseOfModelHandle, string filename = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>baseOfModelHandle</strong>: handle of an object marked as &quot;Object is model base&quot;</li>
<li><strong>filename</strong>: model filename. The filename extension is required (<em>ttm</em>, or <em>simmodel.xml</em> ). If this argument is omitted, the model is saved to a buffer which is returned</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>modelData</strong>: a buffer containing the saved model, if the model was specified to be saved to memory</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.saveScene
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Saves a scene. Any existing file with same name will be overwritten
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.loadScene
sim.closeScene
sim.saveModel
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSaveScene(const char* filename)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>filename</strong>: scene filename. The filename extension is required</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
bytes buffer = sim.saveScene(string filename = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
buffer buffer = sim.saveScene(string filename = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>filename</strong>: scene filename. The filename extension is required. With None/nil, a buffer representing the serialized scene is returned</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>buffer</strong>: if filename is None/nil, a buffer representing the serialized scene</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.scaleObject
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Scales specified objects in a non-isometric fashion, if possible. Only non-compound shapes
can be non-isometrically scaled. Some primitive shapes can have some constraints between their axes
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#size">size and scaling functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simScaleObject(int objectHandle, double xScale, double yScale, double zScale, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object to scale</li>
<li><strong>xScale/yScale/zScale</strong>: scaling factors along the object's x, y and z-axis</li>
<li><strong>options</strong>: keep at 0</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.scaleObject(int objectHandle, float xScale, float yScale, float zScale, int options = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.scaleObject(int objectHandle, float xScale, float yScale, float zScale, int options = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object to scale</li>
<li><strong>xScale/yScale/zScale</strong>: scaling factors along the object's x, y and z-axis</li>
<li><strong>options</strong>: keep at 0</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.scaleObjects
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Scales specified objects. All related values are automatically scaled appropriately
(e.g. masses, forces, etc.)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#size">size and scaling functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simScaleObjects(const int* objectHandles, int objectCount, double scalingFactor,
                    bool scalePositionsToo)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandles</strong>: array containing the handles of the objects to scale. If an object is a model base, all its child objects will also be scaled.</li>
<li><strong>objectCount</strong>: number of handles in the objectHandles array.</li>
<li><strong>scalingFactor</strong>: scaling factor</li>
<li><strong>scalePositionsToo</strong>: if true, selected object's positions will also be scaled</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.scaleObjects(list objectHandles, float scalingFactor, bool scalePositionsToo)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.scaleObjects(int[] objectHandles, float scalingFactor, bool scalePositionsToo)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandles</strong>: array containing the handles of the objects to scale. If an object is a model base, all its child objects will also be scaled</li>
<li><strong>scalingFactor</strong>: scaling factor</li>
<li><strong>scalePositionsToo</strong>: if true, selected object's positions will also be scaled</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.serialCheck
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads how many bytes are waiting to be read on a serial port (RS-232)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.serialRead
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSerialCheck(int portHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>portHandle</strong>: the handle returned by the <a href="simSerialOpen.htm">simSerialOpen</a> function</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the number of bytes that are waiting to be read</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisLua ====================<
int result = sim.serialCheck(int portHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>portHandle</strong>: handle returned by the <a href="simSerialOpen.htm">simSerialOpen</a> function</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: the number of bytes that are waiting to be read</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.serialClose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Closes a serial port (RS-232)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.serialOpen
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSerialClose(int portHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>portHandle</strong>: handle returned by <a href="simSerialOpen.htm">simSerialOpen</a></li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisLua ====================<
sim.serialClose(int portHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>portHandle</strong>: handle returned by <a href="simSerialOpen.htm">sim.serialOpen</a></li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.serialOpen
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Opens a serial port (RS-232) for communication. When called from a script,
the function can only be called when the simulation is running (and in that case the port is
automatically closed at simulation stop)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.serialClose
sim.serialSend
sim.serialCheck
sim.serialRead
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSerialOpen(char* portString, int baudRate, void* reserved1, void* reserved2)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>portString</strong>: string specifying the port to open. Under Windows, use something similar to &quot;\\.\COM1&quot;. Under MacOS and Linux, use something similar to &quot;/dev/*&quot; (check the &quot;/dev&quot; folder to know what file to specify). Under Linux, you might have to launch CoppeliaSim with super user priviledges in order to access the serial port.</li>
<li><strong>baudRate</strong>: baudrate</li>
<li><strong>reserved1</strong>: reserved for future extension. Keep at nullptr.</li>
<li><strong>reserved2</strong>: reserved for future extension. Keep at nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise a port handle</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisLua ====================<
int result = sim.serialOpen(string portString, int baudRate)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>portString</strong>: string specifying the port to open. Under Windows, use something similar to &quot;\\.\COM1&quot;. Under MacOS and Linux, use something similar to &quot;/dev/*&quot; (check the &quot;/dev&quot; folder to know what file to specify). Under Linux, you might have to launch CoppeliaSim with super user priviledges in order to access the serial port</li>
<li><strong>baudRate</strong>: baudrate</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>result</strong>: the port handle</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.serialRead
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Reads from a previously opened serial port (RS-232). The C version of the function cannot
be blocking
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.serialCheck
sim.serialSend
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSerialRead(int portHandle, char* buffer, int dataLengthToRead)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>portHandle</strong>: handle returned by the <a href="simSerialOpen.htm">simSerialOpen</a> function</li>
<li><strong>buffer</strong>: buffer that will be filled with read data</li>
<li><strong>dataLengthToRead</strong>: maximum data length that should be read</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the effective data length that was read</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisLua ====================<
string data = sim.serialRead(int portHandle, int dataLengthToRead, bool blockingOperation,
                             string closingString = '', float timeout = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>portHandle</strong>: handle returned by the <a href="simSerialOpen.htm">sim.serialOpen</a> function</li>
<li><strong>dataLengthToRead</strong>: maximum data length that should be read</li>
<li><strong>blockingOperation</strong>: if true and the calling script is running in a thread, then the function only returns when the desired data length was read (or if the closingString was met, or if there was a timeout (see next arguments)</li>
<li><strong>closingString</strong>: string (containing any byte value) can be specified, that will break from the blocking operation if a match was found in the incoming data. Useful when you know that a data packet is always ended with a given signature. Can be an empty string for default operation.</li>
<li><strong>timeout</strong>: duration after which the blocking operation will be aborted, or 0 if the timeout is infinite</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>data</strong>: a string containing read data (excluding the closingString if it was specified and found)</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.serialSend
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Writes data to a previously opened serial port (RS-232)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.serialRead
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSerialSend(int portHandle, const char* data, int dataLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>portHandle</strong>: handle returned by the <a href="simSerialOpen.htm">simSerialOpen</a> function</li>
<li><strong>data</strong>: pointer to the data that should be sent</li>
<li><strong>dataLength</strong>: length of the data to be sent</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the effective data length that was written</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisLua ====================<
int charsSent = sim.serialSend(int portHandle, buffer data)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>portHandle</strong>: handle returned by the <a href="simSerialOpen.htm">sim.serialOpen</a> function</li>
<li><strong>data</strong>: pointer to the data that should be sent</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>charsSent</strong>: the effective data length that was written</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setArrayParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets 3 values of an <a href="../apiConstants.htm#arrayParameters">array parameter</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetArrayParam(int parameter, const double* parameterValues)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#arrayParameters">array parameter identifier</a></li>
<li><strong>parameterValues</strong>: array of 3 values related to the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setArrayParam(int parameter, list parameterValues)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setArrayParam(int parameter, float[] parameterValues)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#arrayParameters">array parameter identifier</a></li>
<li><strong>parameterValues</strong>: array of 3 values related to the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setAutoYieldDelay
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Allows specifying a thread interruption or yield delay, that will be
automatically enforced by the system (preemptive threading). By default this value is 2 ms
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#threads">thread related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.setAutoYieldDelay(float dt)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setAutoYieldDelay(float dt)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>dt</strong>: desired execution time, before an interruption or yield occurs</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setBoolParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a <a href="../apiConstants.htm#booleanParameters">bool parameter</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetBoolParam(int parameter, bool boolState)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#booleanParameters">bool parameter identifier</a></li>
<li><strong>boolState</strong>: new bool state for the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setBoolParam(int parameter, bool boolState)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setBoolParam(int parameter, bool boolState)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#booleanParameters">bool parameter identifier</a></li>
<li><strong>boolState</strong>: new bool state for the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setEngineBoolParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a bool-type physics engine property. You might have to call 
<a href="simResetDynamicObject.htm">sim.resetDynamicObject</a> for changes to take effect
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#engineParameters">engine properties setter and getter API functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetEngineBoolParam(int paramId, int objectHandle, const void* object, bool val)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to set a global engine parameter. If -1, then the <em>object</em> argument will be evaluated.</li>
<li><strong>object</strong>: pointer to a shape or joint objects, or nullptr to set a global engine parameter. If nullptr, then the <em>objectHandle</em> argument will be evaluated.</li>
<li><strong>val</strong>: the new property value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 in case of success. This function call doesn't generate any error message</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setEngineBoolParam(int paramId, int objectHandle, bool boolParam)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setEngineBoolParam(int paramId, int objectHandle, bool boolParam)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to set a global engine parameter</li>
<li><strong>boolParam</strong>: the new property value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setEngineFloatParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a double-type physics engine property. You might have to call 
<a href="simResetDynamicObject.htm">sim.resetDynamicObject</a> for changes to take effect
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#engineParameters">engine properties setter and getter API functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetEngineFloatParam(int paramId, int objectHandle, const void* object, double val)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to set a global engine parameter. If -1, then the <em>object</em> argument will be evaluated.</li>
<li><strong>object</strong>: pointer to a shape or joint objects, or nullptr to set a global engine parameter. If nullptr, then the <em>objectHandle</em> argument will be evaluated.</li>
<li><strong>val</strong>: the new property value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 in case of success. This function call doesn't generate any error message.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setEngineFloatParam(int paramId, int objectHandle, float floatParam)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setEngineFloatParam(int paramId, int objectHandle, float floatParam)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to set a global engine parameter</li>
<li><strong>floatParam</strong>: the new property value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setEngineInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets an int32-type physics engine property. You might have to call 
<a href="simResetDynamicObject.htm">sim.resetDynamicObject</a> for changes to take effect
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#engineParameters">engine properties setter and getter API functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetEngineInt32Param(int paramId, int objectHandle, const void* object, int val)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to set a global engine parameter. If -1, then the <em>object</em> argument will be evaluated.</li>
<li><strong>object</strong>: pointer to a shape or joint objects, or nullptr to set a global engine parameter. If nullptr, then the <em>objectHandle</em> argument will be evaluated.</li>
<li><strong>val</strong>: the new property value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 in case of success. This function call doesn't generate any error message.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setEngineInt32Param(int paramId, int objectHandle, int int32Param)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setEngineInt32Param(int paramId, int objectHandle, int int32Param)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramId</strong>: <a href="../apiConstants.htm#engineParameters">engine parameter identifier</a>.</li>
<li><strong>objectHandle</strong>: handle of the shape or joint, or -1 to set a global engine parameter</li>
<li><strong>int32Param</strong>: the new property value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setExplicitHandling
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the explicit handling flags for a scene object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getExplicitHandling
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetExplicitHandling(int objectHandle, int explicitFlags)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a scene object.</li>
<li><strong>explicitFlags</strong>: explicit handling flags. For now only bit 0 is used</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setExplicitHandling(int objectHandle, int explicitFlags)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setExplicitHandling(int objectHandle, int explicitFlags)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of a scene object.</li>
<li><strong>explicitFlags</strong>: explicit handling flags. For now only bit 0 is used</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setFloatParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a <a href="../apiConstants.htm#floatingParameters">floating point parameter</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetFloatParam(int parameter, double floatState)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#floatingParameters">floating parameter identifier</a></li>
<li><strong>floatState</strong>: new state for the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setFloatParam(int parameter, float floatState)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setFloatParam(int parameter, float floatState)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#floatingParameters">floating parameter identifier</a></li>
<li><strong>floatState</strong>: new state for the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setFloatSignal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the value of a double signal. A signal created in a <a href="../childScripts.htm">child script</a>,
a <a href="../customizationScripts.htm">customization script</a> or in the 
<a href="../mainScript.htm">main script</a> is automatically cleared when the script ends
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetFloatSignal(const char* signalName, double signalValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>signalValue</strong>: value of the signal</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setFloatSignal(string signalName, float signalValue)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setFloatSignal(string signalName, float signalValue)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>signalValue</strong>: value of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setGraphStreamTransformation
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Applies a transformation to a graph stream
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#graphs">functions related to graphs</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetGraphStreamTransformation(int graphHandle, int streamId, int trType, double mult,
                                    double off, int movingAvgPeriod)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>streamId</strong>: id of the stream</li>
<li><strong>trType</strong>: <a href="../apiConstants.htm#streamTransformations">stream transformation</a></li>
<li><strong>mult</strong>: multiplication factor</li>
<li><strong>off</strong>: an offset</li>
<li><strong>movingAvgPeriod</strong>: moving average period. Set to 1 for no moving average</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setGraphStreamTransformation(int graphHandle, int streamId, int trType, float mult = 1.0,
                                 float off = 0.0, int movingAvgPeriod = 1)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setGraphStreamTransformation(int graphHandle, int streamId, int trType, float mult = 1.0,
                                 float off = 0.0, int movingAvgPeriod = 1)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph</li>
<li><strong>streamId</strong>: id of the stream</li>
<li><strong>trType</strong>: <a href="../apiConstants.htm#streamTransformations">stream transformation</a></li>
<li><strong>mult</strong>: multiplication factor</li>
<li><strong>off</strong>: an offset</li>
<li><strong>movingAvgPeriod</strong>: moving average period. Set to 1 for no moving average</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setGraphStreamValue
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the next value to be recorded for a graph stream
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#graphs">functions related to graphs</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetGraphStreamValue(int graphHandle, int streamId, double value)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph object</li>
<li><strong>streamId</strong>: id of the stream</li>
<li><strong>value</strong>: value to set. Omitting to set a value for a corresponding <a href="simHandleGraph.htm">sim.handleGraph</a> call, then the data point will be missing.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setGraphStreamValue(int graphHandle, int streamId, float value)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setGraphStreamValue(int graphHandle, int streamId, float value)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>graphHandle</strong>: handle of the graph object</li>
<li><strong>streamId</strong>: id of the stream</li>
<li><strong>value</strong>: value to set. Omitting to set a value for a corresponding <a href="simHandleGraph.htm">sim.handleGraph</a> call, then the data point will be missing.</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets an <a href="../apiConstants.htm#integerParameters">integer parameter</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetInt32Param(int parameter, int intState)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#integerParameters">integer parameter identifier</a></li>
<li><strong>intState</strong>: new state for the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setInt32Param(int parameter, int intState)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setInt32Param(int parameter, int intState)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#integerParameters">integer parameter identifier</a></li>
<li><strong>intState</strong>: new state for the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setInt32Signal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the value of an integer signal. A signal created in a <a href="../childScripts.htm">child script</a>,
a <a href="../customizationScripts.htm">customization script</a> or in the <a href="../mainScript.htm">main script</a>
is automatically cleared when the script ends
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetInt32Signal(const char* signalName, int signalValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>signalValue</strong>: value of the signal</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setInt32Signal(string signalName, int signalValue)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setInt32Signal(string signalName, int signalValue)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>signalValue</strong>: value of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setJointDependency
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a joint dependent of another joint. The dependent joint should first be set
into dependent mode via <a href="simSetJointMode.htm">sim.setJointMode</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getJointDependency
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetJointDependency(int jointHandle, int masterJointHandle, double offset, double multCoeff)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint to become slave</li>
<li><strong>masterJointHandle</strong>: handle of the joint to become master, or -1 to free the slave joint from dependency</li>
<li><strong>offset</strong>: offset in equation slave = offset + master * multCoeff</li>
<li><strong>multCoeff</strong>: coeff in equation slave = offset + master * multCoeff</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setJointDependency(int jointHandle, int masterJointHandle, float offset, float multCoeff)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setJointDependency(int jointHandle, int masterJointHandle, float offset, float multCoeff)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint to become slave</li>
<li><strong>masterJointHandle</strong>: handle of the joint to become master, or -1 to free the slave joint from dependency</li>
<li><strong>offset</strong>: offset in equation slave = offset + master * multCoeff</li>
<li><strong>multCoeff</strong>: coeff in equation slave = offset + master * multCoeff</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setJointInterval
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the interval parameters of a joint (i.e. range values). The attributes or
interval parameters might have no effect, depending on the joint-type
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getJointInterval
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetJointInterval(int objectHandle, bool cyclic, const double* interval)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>cyclic</strong>: indicates whether the joint is cyclic. Only revolute joints with a lead of 0 can be cyclic</li>
<li><strong>interval</strong>: joint limits. The first value is the joint lower limit, the second value is the joint range (i.e. the upper limit is lower limit + range)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setJointInterval(int objectHandle, bool cyclic, list interval)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setJointInterval(int objectHandle, bool cyclic, float[2] interval)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>cyclic</strong>: indicates whether the joint is cyclic. Only revolute joints with a lead of 0 can be cyclic</li>
<li><strong>interval</strong>: joint limits. The first value is the joint lower limit, the second value is the joint range (i.e. the upper limit is lower limit + range)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setJointMode
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the operation mode of a joint
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getJointMode
sim.setJointDependency
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetJointMode(int jointHandle, int jointMode, int options)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint object</li>
<li><strong>jointMode</strong>: <a href="../apiConstants.htm#jointModes">joint mode</a> value</li>
<li><strong>options</strong>: not used. Set to 0.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setJointMode(int jointHandle, int jointMode)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setJointMode(int jointHandle, int jointMode)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>jointHandle</strong>: handle of the joint object</li>
<li><strong>jointMode</strong>: <a href="../apiConstants.htm#jointModes">joint mode</a> value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setJointPosition
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the linear/angular position of a joint. Cannot be used with spherical joints
(use <a href="simSetObjectChildPose.htm">sim.setObjectChildPose</a> instead)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getJointPosition
sim.setJointTargetPosition
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetJointPosition(int objectHandle, double position)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>position</strong>: linear/angular position of the joint</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setJointPosition(int objectHandle, float position)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setJointPosition(int objectHandle, float position)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>position</strong>: linear/angular position of the joint</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setJointTargetForce
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the force or torque that a joint can exert
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getJointTargetForce
sim.getJointForce
sim.setJointTargetVelocity
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetJointTargetForce(int objectHandle, double forceOrTorque, bool signedValue)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>forceOrTorque</strong>: maximum force or torque the joint can exert</li>
<li><strong>signedValue</strong>: if true, the sign of the force/torque indicates the desired movement direction</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setJointTargetForce(int objectHandle, float forceOrTorque)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setJointTargetForce(int objectHandle, float forceOrTorque, bool signedValue = true)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>forceOrTorque</strong>: maximum force or torque the joint can exert</li>
<li><strong>signedValue</strong>: if true, the sign of the force/torque indicates the desired movement direction</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setJointTargetPosition
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the target linear/angular position of a joint. When in kinematic mode,
the joint moves according to a motion profile that respects maximum velocity, acceleration and jerk values.
In dynamic and position/custom control mode, the controller is instructed about the desired position
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getJointTargetPosition
sim.setJointPosition
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetJointTargetPosition(int objectHandle, double targetPosition)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>targetPosition</strong>: target position of the joint</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setJointTargetPosition(int objectHandle, float targetPosition, float[] motionParams = [])
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setJointTargetPosition(int objectHandle, float targetPosition, float[] motionParams = {})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>targetPosition</strong>: target position of the joint</li>
<li><strong>motionParams</strong>: when in kinematic mode: the maximum allowed velocity, acceleration and jerk. When in dynamics mode with position control and motion profile enabled, the maximum allowed velocity, acceleration and jerk. Can be None/nil for default values. See also <a href="simGetObjectFloatParam.htm">sim.getObjectFloatParam</a> and <a href="../objectParameterIDs.htm#joints">sim.jointfloatparam_maxvel</a>, <a href="../objectParameterIDs.htm#joints">sim.jointfloatparam_maxvel</a> and <a href="../objectParameterIDs.htm#joints">sim.jointfloatparam_maxjerk</a></li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setJointTargetVelocity
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the target linear/angular velocity of a non-spherical joint. When in kinematic mode,
the joint moves according to a motion profile that respects maximum  acceleration and
jerk values. In dynamic and velocity control mode, the controller is instructed about the
desired velocity
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getJointTargetVelocity
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetJointTargetVelocity(int objectHandle, double targetVelocity)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>targetVelocity</strong>: target velocity of the joint</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setJointTargetVelocity(int objectHandle, float targetVelocity, float[] motionParams = [])
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setJointTargetVelocity(int objectHandle, float targetVelocity, float[] motionParams = {})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the joint object</li>
<li><strong>targetVelocity</strong>: target velocity of the joint</li>
<li><strong>motionParams</strong>: when the joint is in kinematic mode: the maximum allowed acceleration and jerk. When in dynamic mode with motion profile control enabled: the maximum allowed acceleration and jerk. Can be None/nil for default values. See also <a href="simGetObjectFloatParam.htm">sim.getObjectFloatParam</a> and <a href="../objectParameterIDs.htm#joints">sim.jointfloatparam_maxvel</a> and <a href="../objectParameterIDs.htm#joints">sim.jointfloatparam_maxjerk</a></li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simSetLastError
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a custom error message and possibly raises a script error
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simGetLastError
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetLastError(const char* setToNull, const char* errorMessage)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><span class="apiTableRightCSyn"><strong>setToNull</strong></span>: set to nullptr</li>
<li><strong>errorMessage</strong>: error message</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setLightParameters
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets various parameters of a light object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getLightParameters
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetLightParameters(int objectHandle, int state, const float* setToNULL,
                          const float* diffusePart, const float* specularPart)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the light</li>
<li><strong>state</strong>: bit-coded:
<ul>
<li>bit0 is set (1): light on</li>
</ul>
</li>
<li><strong>setToNULL</strong>: not used, set to nullptr</li>
<li><strong>diffusePart</strong>: red, green and blue component of the light's diffuse part. Can be nullptr</li>
<li><strong>specularPart</strong>: red, green and blue component of the light's specular part. Can be nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setLightParameters(int objectHandle, int state, None, list diffusePart, list specularPart)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setLightParameters(int objectHandle, int state, nil, float[3] diffusePart, float[3] specularPart)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the light</li>
<li><strong>state</strong>: bit-coded:
<ul>
<li>bit0 is set (1): light on</li>
</ul>
</li>
<li><strong>diffusePart</strong>: red, green and blue component of the light's diffuse part. Can be None/nil</li>
<li><strong>specularPart</strong>: red, green and blue component of the light's specular part. Can be None/nil</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setLinkDummy
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Defines (or breaks) a dummy-dummy link pair. Useful to create dynamic loop closure
constraints on the fly (among others)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getLinkDummy
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetLinkDummy(int dummyHandle, int linkedDummyHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>dummyHandle</strong>: handle of the first dummy in the dummy-dummy link pair</li>
<li><strong>linkedDummyHandle</strong>: handle of the second dummy in the dummy-dummy link pair. Set to -1 to unlink the first dummy</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setLinkDummy(int dummyHandle, int linkedDummyHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setLinkDummy(int dummyHandle, int linkedDummyHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>dummyHandle</strong>: handle of the first dummy in the dummy-dummy link pair</li>
<li><strong>linkedDummyHandle</strong>: handle of the second dummy in the dummy-dummy link pair. Set to -1 to unlink the first dummy</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setModelProperty
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the properties of a model
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getModelProperty
sim.setObjectProperty
sim.setObjectSpecialProperty
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetModelProperty(int objectHandle, int prop)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object that serves as the model base</li>
<li><strong>prop</strong>: model property. See the <a href="../apiConstants.htm#modelProperties">model property values</a>. Combine them with the &quot;or&quot;-operator</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setModelProperty(int objectHandle, int prop)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setModelProperty(int objectHandle, int prop)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object that serves as the model base</li>
<li><strong>prop</strong>: model property. See the <a href="../apiConstants.htm#modelProperties">model property values</a>. Combine them with the &quot;or&quot;-operator</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setNamedStringParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a named string or buffer parameter
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#namedParams">simulator named parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetNamedStringParam(const char* paramName, const char* stringParam, int paramLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>paramName</strong>: key or name of the parameter</li>
<li><strong>stringParam</strong>: string or buffer value</li>
<li><strong>paramLength</strong>: size of the string or buffer value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful. 0 if an existing parameter was replaced, 1 if the parameter was set</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setNamedStringParam(string paramName, bytes stringParam)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setNamedStringParam(string paramName, buffer stringParam)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>paramName</strong>: key or name of the parameter</li>
<li><strong>stringParam</strong>: string or buffer value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setNavigationMode
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the navigation and selection mode for the mouse
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getNavigationMode
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetNavigationMode(int navigationMode)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>navigationMode</strong>: <a href="../apiConstants.htm#navigationModes">mouse navigation mode</a></li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setNavigationMode(int navigationMode)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setNavigationMode(int navigationMode)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>navigationMode</strong>: <a href="../apiConstants.htm#navigationModes">mouse navigation mode</a></li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectAlias
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the alias of an object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectAlias
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectAlias(int objectHandle, const char* objectAlias, int options = 0)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>objectAlias</strong>: alias of the object. Allowed characters include 0-9, a-z, A-Z, and underscores. Illegal characters are replaced with underscores</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectAlias(int objectHandle, string objectAlias)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectAlias(int objectHandle, string objectAlias)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>objectAlias</strong>: alias of the object. Allowed characters include 0-9, a-z, A-Z, and underscores. Illegal characters are replaced with underscores</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectChildPose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Can be used to set a spherical joint's rotational transformation
(the translational part is ignored)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectChildPose
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectChildPose(int objectHandle, const double* pose)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>pose</strong>: pointer to the pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectChildPose(int objectHandle, list pose)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectChildPose(int objectHandle, float[7] pose)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>pose</strong>: the pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectColor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the color of a scene object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#rendering">rendering related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectColor(int objectHandle, int index, int colorComponent, float* rgbData)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>index</strong>: zero-based index of the color, if the object has several colors</li>
<li><strong>colorComponent</strong>: <a href="../apiConstants.htm#colorComponents">color component</a></li>
<li><strong>rgbData</strong>: red, green and blue components of the color (3 values)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, 0 if the index was not found in the object, 1 otherwise.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectColor(int objectHandle, int index, int colorComponent, list rgbData)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectColor(int objectHandle, int index, int colorComponent, float[3] rgbData)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>index</strong>: zero-based index of the color, if the object has several colors</li>
<li><strong>colorComponent</strong>: <a href="../apiConstants.htm#colorComponents">color component</a></li>
<li><strong>rgbData</strong>: red, green and blue components of the color (3 values)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectFloatArrayParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a floating-point array parameter of a <a href="../objects.htm">scene object</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#objectParameters">object parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectFloatArrayParam(int objectHandle, int parameterID, const double* params, int size)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>params</strong>: pointer to the double array</li>
<li><strong>size</strong>: size of the double array</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be set, or 1 if operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectFloatArrayParam(int objectHandle, int parameterID, list params)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectFloatArrayParam(int objectHandle, int parameterID, float[] params)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>params</strong>: pointer to the float array</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectFloatParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a floating-point parameter of a <a href="../objects.htm">scene object</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#objectParameters">object parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectFloatParam(int objectHandle, int parameterID, double parameter)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameter</strong>: parameter value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be set, or 1 if operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectFloatParam(int objectHandle, int parameterID, float parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectFloatParam(int objectHandle, int parameterID, float parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameter</strong>: parameter value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets an int32 parameter of a <a href="../objects.htm">scene object</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#objectParameters">object parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectInt32Param(int objectHandle, int parameterID, int parameter)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameter</strong>: parameter value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be set, or 1 if operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectInt32Param(int objectHandle, int parameterID, int parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectInt32Param(int objectHandle, int parameterID, int parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to retrieve. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameter</strong>: parameter value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectMatrix
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the transformation matrix of an object. Dynamically simulated objects,
together with their hierarchy tree, are dynamically reset (this however does not apply to static shapes)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectMatrix
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectMatrix(int objectHandle, int relativeToObjectHandle, const double* matrix)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the matrix is specified. Specify sim.handle_world to set the absolute transformation matrix, sim.handle_inverse to set the inverse of the  absolute transformation matrix, sim.handle_parent to set the transformation matrix relative to the object's parent, or an object handle relative to whose reference frame the transformation matrix is specified. If this handle is the handle of a joint, then the matrix is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the matrix is applied relative to the joint's base frame)</li>
<li><strong>matrix</strong>: the matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectMatrix(int objectHandle, list matrix, int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectMatrix(int objectHandle, float[12] matrix,
                    int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>matrix</strong>: the matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2])</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the matrix is specified. Specify sim.handle_world to set the absolute transformation matrix, sim.handle_inverse to set the inverse of the  absolute transformation matrix, sim.handle_parent to set the transformation matrix relative to the object's parent, or an object handle relative to whose reference frame the transformation matrix is specified. If this handle is the handle of a joint, then the matrix is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the matrix is applied relative to the joint's base frame)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectOrientation
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the orientation (<a href="../positionOrientationTransformation.htm#euler">Euler angles</a>) of an object.
Dynamically simulated objects, together with their hierarchy tree, are dynamically reset (this however does not
apply to static shapes)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectOrientation
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectOrientation(int objectHandle, int relativeToObjectHandle, const double* eulerAngles)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the orientation is specified. Specify sim.handle_world to set the absolute orientation, sim.handle_parent to set the orientation relative to the object's parent, or an object handle relative to whose reference frame the orientation is specified.  If this handle is the handle of a joint, then the orientation is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the orientation is applied relative to the joint's base frame)</li>
<li><strong>eulerAngles</strong>: Euler angles (alpha, beta and gamma)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectOrientation(int objectHandle, list eulerAngles,
                         int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectOrientation(int objectHandle, float[3] eulerAngles,
                         int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>eulerAngles</strong>: Euler angles (alpha, beta and gamma)</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the orientation is specified. Specify sim.handle_world to set the absolute orientation, sim.handle_parent to set the orientation relative to the object's parent, or an object handle relative to whose reference frame the orientation is specified.  If this handle is the handle of a joint, then the orientation is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the orientation is applied relative to the joint's base frame)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectParent
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets an object's parent object. Dynamically simulated objects, together with their
hierarchy tree, are dynamically reset (this however does not apply to static shapes)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectParent
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectParent(int objectHandle, int parentObjectHandle, bool keepInPlace)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object that will become child of the parent object. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_assembly</a> (simply add sim.handleflag_assembly to <strong>objectHandle</strong>), if the two objects can be assembled via a predefined assembly transformation (refer to the <strong>assembling</strong> option in the <a href="../commonPropertiesDialog.htm">object common properties</a>). In that case, <strong>parentObjectHandle</strong> can't be -1, and <strong>keepInPlace</strong> should be set to false</li>
<li><strong>parentObjectHandle</strong>: handle of the object that will become parent, or -1 if the object should become parentless</li>
<li><strong>keepInPlace</strong>: indicates whether the object's absolute position and orientation should stay same</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectParent(int objectHandle, int parentObjectHandle, bool keepInPlace)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectParent(int objectHandle, int parentObjectHandle, bool keepInPlace)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object that will become child of the parent object. Can be combined with <a href="../apiConstants.htm#specialHandleFlags">sim.handleflag_assembly</a> (simply add sim.handleflag_assembly to <strong>objectHandle</strong>), if the two objects can be assembled via a predefined assembly transformation (refer to the <strong>assembling</strong> option in the <a href="../commonPropertiesDialog.htm">object common properties</a>). In that case, <strong>parentObjectHandle</strong> can't be -1, and <strong>keepInPlace</strong> should be set to false</li>
<li><strong>parentObjectHandle</strong>: handle of the object that will become parent, or -1 if the object should become parentless</li>
<li><strong>keepInPlace</strong>: indicates whether the object's absolute position and orientation should stay same</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectPose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the pose of an object. Dynamically simulated objects, together with their hierarchy tree,
are dynamically reset (this however does not apply to static shapes)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectPose
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectPose(int objectHandle, int relativeToObjectHandle, const double* pose)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Combine with sim.handleflag_wxyzquat to provide the quaternion as [qw qx qy qz] order instead of [qx qy qz qw] order. Can also be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the pose is specified. Specify sim.handle_world to set the absolute pose, sim.handle_inverse to set the inverse of the  absolute pose, sim.handle_parent to set the pose relative to the object's parent, or an object handle relative to whose reference frame the pose is specified. If this handle is the handle of a joint, then the pose is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the pose is applied relative to the joint's base frame)</li>
<li><strong>pose</strong>: the pose (array of 7 values [x y z qx qy qz qw])</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectPose(int objectHandle, list pose, int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectPose(int objectHandle, float[7] pose, int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Combine with sim.handleflag_wxyzquat to provide the quaternion as [qw qx qy qz] order instead of [qx qy qz qw] order. Can also be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>pose</strong>: the pose (array of 7 values [x y z qx qy qz qw])</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the pose is specified. Specify sim.handle_world to set the absolute pose, sim.handle_inverse to set the inverse of the  absolute pose, sim.handle_parent to set the pose relative to the object's parent, or an object handle relative to whose reference frame the pose is specified. If this handle is the handle of a joint, then the pose is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the pose is applied relative to the joint's base frame)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectPosition
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the position (x, y and z-coordinates) of an object. Dynamically simulated objects, 
together with their hierarchy tree, are dynamically reset (this however does not apply
to static shapes)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectPosition
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectPosition(int objectHandle, int relativeToObjectHandle, const double* position)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the position is specified. Specify sim.handle_world to set the absolute position, sim.handle_parent to set the position relative to the object's parent, or an object handle relative to whose reference frame the position is specified.  If this handle is the handle of a joint, then the position is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the position is applied relative to the joint's base frame)</li>
<li><strong>position</strong>: coordinates of the object</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectPosition(int objectHandle, list position, int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectPosition(int objectHandle, float[3] position,
                      int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Can be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>position</strong>: coordinates of the object</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the position is specified. Specify sim.handle_world to set the absolute position, sim.handle_parent to set the position relative to the object's parent, or an object handle relative to whose reference frame the position is specified.  If this handle is the handle of a joint, then the position is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the position is applied relative to the joint's base frame)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectProperty
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the properties of a scene object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectProperty
sim.setObjectSpecialProperty
sim.setModelProperty
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectProperty(int objectHandle, int prop)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: object handle</li>
<li><strong>prop</strong>: object property. See the <a href="../apiConstants.htm#sceneObjectProperties">object property values</a>. Combine them with the &quot;or&quot;-operator</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectProperty(int objectHandle, int prop)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectProperty(int objectHandle, int prop)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: object handle</li>
<li><strong>prop</strong>: object property. See the <a href="../apiConstants.htm#sceneObjectProperties">object property values</a>. Combine them with the &quot;or&quot;-operator</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectQuaternion
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the quaternion of an object. Dynamically simulated objects, together with their
hierarchy tree, are dynamically reset (this however does not apply to static shapes)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectQuaternion
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectQuaternion(int objectHandle, int relativeToObjectHandle, const double* quaternion)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Combine with sim.handleflag_wxyzquat to provide the quaternion as [qw qx qy qz] order instead of [qx qy qz qw] order. Can also be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the orientation is specified. Specify sim.handle_world to set the absolute orientation, sim.handle_parent to set the orientation relative to the object's parent, or an object handle relative to whose reference frame the orientation is specified.  If this handle is the handle of a joint, then the quaternion is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the quaternion is applied relative to the joint's base frame)</li>
<li><strong>quaternion</strong>: the quaternion (array of 4 values [qx qy qz qw])
</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectQuaternion(int objectHandle, list quaternion,
                        int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectQuaternion(int objectHandle, float[4] quaternion,
                        int relativeToObjectHandle = sim.handle_world)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object. Combine with sim.handleflag_wxyzquat to provide the quaternion as [qw qx qy qz] order instead of [qx qy qz qw] order. Can also be combined with sim.handleflag_reljointbaseframe</li>
<li><strong>quaternion</strong>: the quaternion (array of 4 values [qx qy qz qw])
<li><strong>relativeToObjectHandle</strong>: indicates relative to which reference frame the orientation is specified. Specify sim.handle_world to set the absolute orientation, sim.handle_parent to set the orientation relative to the object's parent, or an object handle relative to whose reference frame the orientation is specified.  If this handle is the handle of a joint, then the quaternion is applied relative to the joint's moving frame (unless <strong>objectHandle</strong> is combined with sim.handleflag_reljointbaseframe, in which case the quaternion is applied relative to the joint's base frame)</li>
</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectSel
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the object selection state
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectSel
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectSel(const int* handles, int cnt)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>handles</strong>: the handles of objects, or nullptr</li>
<li><strong>cnt</strong>: the number of objects</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>The number of selected objects, or -1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.getObjectSel(list objectHandles)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectSel(int[] objectHandles)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandles</strong>: handles of objects to be selected</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectSpecialProperty
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the special properties of a scene object
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getObjectSpecialProperty
sim.setObjectProperty
sim.setModelProperty
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectSpecialProperty(int objectHandle, int prop)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: object handle</li>
<li><strong>prop</strong>: object special property. See the <a href="../apiConstants.htm#sceneObjectSpecialProperties">object special property values</a>. Combine them with the &quot;or&quot;-operator</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectSpecialProperty(int objectHandle, int prop)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectSpecialProperty(int objectHandle, int prop)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: object handle</li>
<li><strong>prop</strong>: object special property. See the <a href="../apiConstants.htm#sceneObjectSpecialProperties">object special property values</a>. Combine them with the &quot;or&quot;-operator</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setObjectStringParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a string parameter of a <a href="../objects.htm">scene object</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#objectParameters">object parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetObjectStringParam(int objectHandle, int parameterID, char* parameter, int parameterLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to set. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameter</strong>: parameter value (can contain embedded zeros)</li>
<li><strong>parameterLength</strong>: length of the parameter value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be set, or 1 if  operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setObjectStringParam(int objectHandle, int parameterID, string/bytes parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setObjectStringParam(int objectHandle, int parameterID, buffer parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object</li>
<li><strong>parameterID</strong>: identifier of the parameter to set. See the <a href="../objectParameterIDs.htm">list of all possible object parameters</a></li>
<li><strong>parameter</strong>: parameter value (can contain embedded zeros)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setPage
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Switches between pages (main scene views)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getPage
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetPage(int index)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>index</strong>: index of the page. Valid values are 0-7</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setPage(int index)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setPage(int index)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>index</strong>: index of the page. Valid values are 0-7</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simSetPluginInfo
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Attaches additional information to a loaded plugin
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getPluginInfo
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetPluginInfo(const char* pluginName, int infoType, const char* stringInfo, int intInfo)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pluginName</strong>: name of the plugin. See <a href="simGetPluginName.htm">sim.getPluginName</a>.</li>
<li><strong>infoType</strong>: <a href="../apiConstants.htm#pluginInfos">the type of information</a> to set</li>
<li><strong>stringInfo</strong>: string information value, in case the information type is for a string.</li>
<li><strong>intInfo</strong>: integer information value, in case the information type is for an integer.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setPluginInfo(string pluginName, int infoType, string/int info)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setPluginInfo(string pluginName, int infoType, string/int info)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pluginName</strong>: name of the plugin. See <a href="simGetPluginName.htm">sim.getPluginName</a></li>
<li><strong>infoType</strong>: <a href="../apiConstants.htm#pluginInfos">the type of information</a> to set</li>
<li><strong>info</strong>: string or integer information value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setPointCloudOptions
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets various properties of a <a href="../pointClouds.htm">point cloud</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getPointCloudOptions
<a href="../apiFunctions.htm#pointCloud">point cloud related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetPointCloudOptions(int pointCloudHandle, double maxVoxelSize, int maxPtCntPerVoxel,
                            int options, double pointSize, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>maxVoxelSize</strong>: maximum size of the OC tree voxels containing points</li>
<li><strong>maxPtCntPerVoxel</strong>: maximum number of points allowed in a same OC tree voxel</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): points have random colors</li>
<li>bit1 set (2): show OC tree structure</li>
<li>bit2 set (4): reserved. keep unset</li>
<li>bit3 set (8): do not use an OC tree structure. When enabled, point cloud operations are limited, and point clouds will not be <a href="../collidableObjects.htm">collidable</a>, <a href="../measurableObjects.htm">measurable</a> or <a href="../detectableObjects.htm">detectable</a> anymore, but adding points will be much faster</li>
<li>bit4 set (16): color is emissive</li>
</ul>
</li>
<li><strong>pointSize</strong>: size of the points, in pixels</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 if operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setPointCloudOptions(int pcHandle, float maxVoxelSize, int maxPtCntPerVoxel, int options,
                         float pointSize)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setPointCloudOptions(int pcHandle, float maxVoxelSize, int maxPtCntPerVoxel, int options,
                         float pointSize)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pcHandle</strong>: handle of the point cloud</li>
<li><strong>maxVoxelSize</strong>: maximum size of the OC tree voxels containing points</li>
<li><strong>maxPtCntPerVoxel</strong>: maximum number of points allowed in a same OC tree voxel</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): points have random colors</li>
<li>bit1 set (2): show OC tree structure</li>
<li>bit2 set (4): reserved. keep unset</li>
<li>bit3 set (8): do not use an OC tree structure. When enabled, point cloud operations are limited, and point clouds will not be <a href="../collidableObjects.htm">collidable</a>, <a href="../measurableObjects.htm">measurable</a> or <a href="../detectableObjects.htm">detectable</a> anymore, but adding points will be much faster</li>
<li>bit4 set (16): color is emissive</li>
</ul>
</li>
<li><strong>pointSize</strong>: size of the points, in pixels</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setReferencedHandles
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Attaches a list of custom handles to a given scene object. Those custom handles
are handles of other scene objects, that are linked to the given scene object (for whatever purpose).
The advantage of storing references to other objects with this function is that CoppeliaSim will take
care of correctly adjusting the references if needed: For instance, imagine <em>objectA</em> storing
the handle of <em>objectB</em> via this function. If <em>objectB</em> is deleted, then the stored
handle becomes -1. If <em>objectA</em> and <em>objectB</em> are duplicated at the same time, then the
duplicate of <em>objectA</em> stores the handle of the duplicate of <em>objectB</em>. Optionally, if
<em>sim.handleflag_keeporiginal </em>is specified, then linking to original objects is guaranteed, e.g. in above example,
after a duplication of <em>objectA</em>, the duplicate of <em>objectA</em> will store the handle of the
original <em>objectB</em> (if <em>objectB</em> still exists)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getReferencedHandles
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetReferencedHandles(int objectHandle, int count, const int* referencedHandles,
                            const int* reserved1, const int* reserved2)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the scene object that will store the list of handles. Can be optionally combined with <em>sim.handleflag_keeporiginal</em>, in which case the handles that link to originals are retrieved</li>
<li><strong>count</strong>: number of handles to store</li>
<li><strong>referencedHandles</strong>: list of scene object handles.</li>
<li><strong>reserved1</strong>: reserved for future extensions</li>
<li><strong>reserved2</strong>: reserved for future extensions</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setReferencedHandles(int objectHandle, list referencedHandles)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setReferencedHandles(int objectHandle, int[] referencedHandles)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the scene object that will store the list of handles. Can be optionally combined with <em>sim.handleflag_keeporiginal</em>, in which case the handles that link to originals are retrieved</li>
<li><strong>referencedHandles</strong>: list of scene object handles.</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setScriptInt32Param
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets an int32 parameter of a script
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#scriptParameters">functions related to script parameters</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetScriptInt32Param(int scriptHandle, int parameterID, int parameter)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script</li>
<li><strong>parameterID</strong>: identifier of the parameter to set. See the <a href="../apiConstants.htm#scriptParameters">list of all possible script parameters</a></li>
<li><strong>parameter</strong>: parameter value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be set, or 1 if  operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setScriptInt32Param(int scriptHandle, int parameterID, int parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setScriptInt32Param(int scriptHandle, int parameterID, int parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script, or sim.handle_self</li>
<li><strong>parameterID</strong>: identifier of the parameter to set. See the <a href="../apiConstants.htm#scriptParameters">list of all possible script parameters</a></li>
<li><strong>parameter</strong>: parameter value</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setScriptStringParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a string parameter of a script
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#scriptParameters">functions related to script parameters</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetScriptStringParam(int scriptHandle, int parameterID, char* parameter, int parameterLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script</li>
<li><strong>parameterID</strong>: identifier of the parameter to set. See the <a href="../apiConstants.htm#scriptParameters">list of all possible script parameters</a></li>
<li><strong>parameter</strong>: parameter value (can contain embedded zeros)</li>
<li><strong>parameterLength</strong>: length of the parameter value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the parameter could not be set, or 1 if  operation was successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setScriptStringParam(int scriptHandle, int parameterID, string/bytes parameter)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setScriptStringParam(int scriptHandle, int parameterID, buffer parameter)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>scriptHandle</strong>: handle of the script, or sim.handle_self</li>
<li><strong>parameterID</strong>: identifier of the parameter to set. See the <a href="../apiConstants.htm#scriptParameters">list of all possible script parameters</a></li>
<li><strong>parameter</strong>: parameter value (can contain embedded zeros)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setShapeBB
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the size of a shape's bounding box, effectively scaling the shape.
Non-isometric scaling is not always possible
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#size">size and scaling functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.setShapeBB(int shapeHandle, list size)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setShapeBB(int shapeHandle, float[3] size)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>size</strong>: size of the bounding box</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setShapeColor
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the color of a shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#rendering">rendering related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetShapeColor(int shapeHandle, char* colorName, int colorComponent, float* rgbData)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>colorName</strong>: name of a color. Can be nullptr, but if a name is provided, only shapes (or sub-entities of them) with a same color name will be modified. If colorName is <em>@compound</em>, then all individual colors of a compound shape can be set at once.</li>
<li><strong>colorComponent</strong>: <a href="../apiConstants.htm#colorComponents">color component</a></li>
<li><strong>rgbData</strong>: red, green and blue components of the color (3 values), or the transparency value (1 value)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setShapeColor(int shapeHandle, string colorName, int colorComponent, list rgbData)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setShapeColor(int shapeHandle, string colorName, int colorComponent, float[3] rgbData)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape</li>
<li><strong>colorName</strong>: name of a color. Can be an empty string, but if a name is provided, only shapes (or sub-entities of them) with a same color name will be modified. If colorName is <em>@compound</em>, then all individual colors of a compound shape can be set at once</li>
<li><strong>colorComponent</strong>: <a href="../apiConstants.htm#colorComponents">color component</a></li>
<li><strong>rgbData</strong>: red, green and blue components of the color (3 values), or the transparency value (1 value)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setShapeInertia
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Applies a new inertia matrix to a shape. If simulation is running, the shape is
dynamically reset (similar to calling <a href="simResetDynamicObject.htm">sim.resetDynamicObject</a> right after)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getShapeInertia
sim.setShapeMass
sim.computeMassAndInertia
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetShapeInertia(int shapeHandle, const double* inertiaMatrix,
                       const double* transformationMatrix)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the <a href="../shapes.htm">shape object</a></li>
<li><strong>inertiaMatrix</strong>: new inertia matrix (9 values), expressed relative to <em>transformationMatrix</em> (itself expressed relative to the shape's reference frame)</li>
<li><strong>transformationMatrix</strong>: a transformation matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]) expressed relative to the shape's reference frame. The matrix indicates the center of mass of the shape, and is the frame relative to which <em>inertiaMatrix</em> is expressed</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setShapeInertia(int shapeHandle, list inertiaMatrix, list transformationMatrix)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setShapeInertia(int shapeHandle, float[9] inertiaMatrix, float[12] transformationMatrix)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the <a href="../shapes.htm">shape object</a></li>
<li><strong>inertiaMatrix</strong>: new inertia matrix (9 values), expressed relative to <em>transformationMatrix</em> (itself expressed relative to the shape's reference frame)</li>
<li><strong>transformationMatrix</strong>: a transformation matrix (array of 12 values [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]) expressed relative to the shape's reference frame. The matrix indicates the center of mass of the shape, and is the frame relative to which <em>inertiaMatrix</em> is expressed</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setShapeMass
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Applies a new mass value to a shape. If simulation is running, the shape is dynamically reset
(similar to calling <a href="simResetDynamicObject.htm">sim.resetDynamicObject</a> right after)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getShapeMass
sim.setShapeInertia
sim.computeMassAndInertia
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetShapeMass(int shapeHandle, double mass)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the <a href="../shapes.htm">shape object</a></li>
<li><strong>mass</strong>: new mass of the shape</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setShapeMass(int shapeHandle, float mass)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setShapeMass(int shapeHandle, float mass)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the <a href="../shapes.htm">shape object</a></li>
<li><strong>mass</strong>: new mass of the shape</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setShapeTexture
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Applies/removes a texture to/from a shape
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getTextureId
sim.getShapeTextureId
sim.createTexture
simApplyTexture
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetShapeTexture(int h, int tId, int mode, int opt, const double* uvScaling, const double* pos,
                       const double* orient)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>h</strong>: handle of the shape.</li>
<li><strong>tId</strong>: ID of the texture or -1 to remove any existing texture. See also <a href="simGetTextureId.htm">simGetTextureId</a>, <a href="simGetShapeTextureId.htm">simGetShapeTextureId</a> and <a href="simCreateTexture.htm">simCreateTexture</a>.</li>
<li><strong>mode</strong>: <a href="../apiConstants.htm#textureMappingModes">texture mapping mode</a>.</li>
<li><strong>opt</strong>: bit-coded:
<ul>
<li>bit0: if set (1), then adjacent texture pixels are not interpolated.</li>
<li>bit1:  if set (2), then the texture is applied as a decal (its appearance won't be influenced by light conditions).</li>
<li>bit2: if set (4), then the texture will be repeated along the U direction.</li>
<li>bit3: if set (8), then the texture will be repeated along the V direction.</li>
</ul>
</li>
<li><strong>uvScaling</strong>: pointer to 2 values that indicate the texture scaling factors along the U and V directions.</li>
<li><strong>pos</strong>: pointer to 3 values (x,y,z) that indicate the texture position on the shape. Can be nullptr for default values.</li>
<li><strong>orient</strong>: pointer to 3 values (Euler angles) that indicate the texture orientation on the shape. Can be nullptr for default values.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setShapeTexture(int shapeHandle, int textureId, int mappingMode, int options, list uvScaling,
                    list position = None, list orientation = None)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setShapeTexture(int shapeHandle, int textureId, int mappingMode, int options, float[2] uvScaling,
                    float[3] position = nil, float[3] orientation = nil)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handle of the shape.</li>
<li><strong>textureId</strong>: ID of the texture or -1 to remove any existing texture. See also <a href="simGetTextureId.htm">sim.getTextureId</a>, <a href="simGetShapeTextureId.htm">sim.getShapeTextureId</a> and <a href="simCreateTexture.htm">sim.createTexture</a></li>
<li><strong>mappingMode</strong>: <a href="../apiConstants.htm#textureMappingModes">texture mapping mode</a>.</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0: if set (1), then adjacent texture pixels are not interpolated.</li>
<li>bit1:  if set (2), then the texture is applied as a decal (its appearance won't be influenced by light conditions).</li>
<li>bit2: if set (4), then the texture will be repeated along the U direction.</li>
<li>bit3: if set (8), then the texture will be repeated along the V direction.</li>
</ul>
</li>
<li><strong>uvScaling</strong>: array of 2 values indicating the texture scaling factors along the U and V directions</li>
<li><strong>position</strong>: array of 3 values x/y/z indicating the texture position on the shape. Can be None/nil for default values</li>
<li><strong>orientation</strong>: array of 3 values (Euler angles) indicating the texture orientation on the shape. Can be None/nil for default values</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setStepping
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Enables or disables the stepping operation mode for a threaded script. If enabled, then the current script has
to trigger each simulation step explicitly, via <a href="simStep.htm">sim.step</a>. Is applied
cumulatively, i.e. if the stepping operation mode is enabled n times, it needs to be disabled n times to return
to the initial state
<br><br>
(Lua specific: in stepping operation mode, automatic thread interruptions, i.e. preemptive threading, is supressed)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#threads">thread related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
int prevStepLevel = sim.setStepping(bool enable)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int prevStepLevel = sim.setStepping(bool enable / int desiredStepLevel)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>enable</strong> / <strong>desiredStepLevel</strong>: enable state, or the desired level of thread interruption</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>prevStepLevel</strong>: previous level of thread interruption. When 0, thread interruption was not enabled previously
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setStringParam
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets a <a href="../apiConstants.htm#stringParameters">string parameter</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#params">simulator parameter related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetStringParam(int parameter, const char* stringState)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#stringParameters">string parameter identifier</a></li>
<li><strong>stringState</strong>: new state for the parameter</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>1 if operation was successful. -1 if parameter is not known</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setStringParam(int parameter, string stringState)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setStringParam(int parameter, string stringState)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>parameter</strong>: <a href="../apiConstants.htm#stringParameters">string parameter identifier</a></li>
<li><strong>stringState</strong>: new state for the parameter</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setStringSignal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Sets the value of a string signal. A signal created in a <a href="../childScripts.htm">child script</a>,
a <a href="../customizationScripts.htm">customization script</a> or in the 
<a href="../mainScript.htm">main script</a> is automatically cleared when the script ends
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetStringSignal(const char* signalName, const char* signalValue, int stringLength)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>signalValue</strong>: value of the signal (which may contain any value, including embedded zeros)</li>
<li><strong>stringLength</strong>: size of the string value</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setStringSignal(string signalName, string/bytes signalValue)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setStringSignal(string signalName, buffer signalValue)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
<li><strong>signalValue</strong>: value of the signal (which may contain any value, including embedded zeros)</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.setVisionSensorImg
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Writes the image of a vision sensor (and applies any image processing via the
<a href="../visionCallbackFunctions.htm">vision callback functions</a>). Make sure the vision
sensor is flagged as <strong>external input</strong>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#visionSensor">vision sensor related API functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSetVisionSensorImg(int sensorHandle, const unsigned char* img, int options, const int* pos,
                          const int* size)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor object</li>
<li><strong>img</strong>: buffer containing the image</li>
<li><strong>options</strong>: options, bit-coded:
<ul>
<li>bit0 set (1): the provided image is a greyscale image (1 byte per pixel), otherwise an RGB image (3 bytes per pixel)</li>
<li>bit1 set (2): the provided image has one additional byte per pixel, as alpha channel (RGBA or greyscale+A)</li>
</ul>
</li>
<li><strong>pos</strong>: position of the image portion to write. Can be nullptr, which defaults to [0 0]</li>
<li><strong>size</strong>: size of the image portion to write. Can be nullptr which defaults to [0 0], which corresponds to [resolutionX resolutionY]</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.setVisionSensorImg(int sensorHandle, bytes image, int options = 0, list pos = [0, 0],
                       list size = [0, 0])
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.setVisionSensorImg(int sensorHandle, buffer image, int options, int[2] pos = {0, 0},
                       int[2] size = {0, 0})
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>sensorHandle</strong>: handle of the vision sensor object</li>
<li><strong>img</strong>: buffer containing the image</li>
<li><strong>options</strong>: options, bit-coded:
<ul>
<li>bit0 set (1): the provided image is a greyscale image (1 byte per pixel), otherwise an RGB image (3 bytes per pixel)</li>
<li>bit1 set (2): the provided image has one additional byte per pixel, as alpha channel (RGBA or greyscale+A)</li>
</ul>
</li>
<li><strong>pos</strong>: position of the image portion to write, defaults to [0 0]</li>
<li><strong>size</strong>: size of the image portion to write, defaults to [0 0], which corresponds to [resolutionX resolutionY]</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.startSimulation
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Requests a start of a simulation (or a resume of a paused simulation)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.pauseSimulation
sim.stopSimulation
sim.getSimulationState
<a href="../simulation.htm">simulation state diagram</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simStartSimulation()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the operation could not be performed. &gt;0 in case of success.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.startSimulation()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.startSimulation()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.step
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Triggers the next simulation step, when in stepping operation mode. When simulation is running, then sim.step
only returns once the simulation time has changed
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setStepping
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.step()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.step()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.stopSimulation
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Requests a stop of the running simulation
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.startSimulation
sim.pauseSimulation
sim.getSimulationState
<a href="../simulation.htm">simulation state diagram</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simStopSimulation()
==================== apiSynopsisCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error, 0 if the operation could not be performed. &gt;0 in case of success.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.stopSimulation()
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.stopSimulation()
==================== apiSynopsisLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.subtractObjectFromOctree
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes an object from an <a href="../octrees.htm">OC tree</a>, as voxel subtractions
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.insertObjectIntoOctree
sim.removeVoxelsFromOctree
<a href="../apiFunctions.htm#octree">OC tree related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSubtractObjectFromOctree(int octreeHandle, int objectHandle, int options, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>objectHandle</strong>: handle of the object to subtract. Only potentially <a href="../collidableObjects.htm">collidable objects</a> are supported</li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of voxels in the OC tree</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalVoxelCnt = sim.subtractObjectFromOctree(int octreeHandle, int objectHandle, int options)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalVoxelCnt = sim.subtractObjectFromOctree(int octreeHandle, int objectHandle, int options)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>octreeHandle</strong>: handle of the OC tree</li>
<li><strong>objectHandle</strong>: handle of the object to subtract. Only potentially <a href="../collidableObjects.htm">collidable objects</a> are supported</li>
<li><strong>options</strong>: reserved. Set to 0</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalVoxelCnt</strong>: total number of voxels in the OC tree</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.subtractObjectFromPointCloud
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Removes an object from a <a href="../pointClouds.htm">point cloud</a>, as a subtraction
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.insertPointsIntoPointCloud
sim.insertObjectIntoPointCloud
sim.removePointsFromPointCloud
<a href="../apiFunctions.htm#pointCloud">point cloud related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simSubtractObjectFromPointCloud(int pointCloudHandle, int objectHandle, int options,
                                    double tolerance, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>pointCloudHandle</strong>: handle of the point cloud</li>
<li><strong>objectHandle</strong>:  handle of the object to subtract. Only potentially <a href="../measurableObjects.htm">measurable objects</a> are supported</li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>tolerance</strong>: distance used as a tolerance value</li>
<li><strong>reserved</strong>: reserved for future extensions. Set to nullptr</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful, otherwise the total number of points in the point cloud</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
int totalPointCnt = sim.subtractObjectFromPointCloud(int pcHandle, int objectHandle, int options,
                                                     float tolerance)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int totalPointCnt = sim.subtractObjectFromPointCloud(int pcHandle, int objectHandle, int options,
                                                     float tolerance)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>pcHandle</strong>: handle of the point cloud</li>
<li><strong>objectHandle</strong>:  handle of the object to subtract. Only potentially <a href="../measurableObjects.htm">measurable objects</a> are supported</li>
<li><strong>options</strong>: reserved. Set to 0</li>
<li><strong>tolerance</strong>: distance used as a tolerance value</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>totalPointCnt</strong>: total number of points in the point cloud</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.textEditorClose
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Closes a  text edition window previously opened with <a href="simTextEditorOpen.htm">sim.textEditorOpen</a>
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
string text, list pos, list size = sim.textEditorClose(int handle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string text, int[2] pos, int[2] size = sim.textEditorClose(int handle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the text editor window</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>text</strong>: text of the editor</li>
<li><strong>pos</strong>: size of the editor</li>
<li><strong>size</strong>: absolute position the editor</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.textEditorGetInfo
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Retieves information from a text edition window previously opened with <a href="simTextEditorOpen.htm">sim.textEditorOpen</a>
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
string text, list pos, list size, bool visible = sim.textEditorGetInfo(int handle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
string text, int[2] pos, int[2] size, bool visible = sim.textEditorGetInfo(int handle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the text editor window</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>text</strong>: text of the editor, or None/nil if the given handle is not associated with any text editor window (or the window was already closed)</li>
<li><strong>pos</strong>: size of the editor</li>
<li><strong>size</strong>: absolute position the editor</li>
<li><strong>visible</strong>: visible state the editor</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.textEditorOpen
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Opens a text edition window
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.textEditorClose
sim.textEditorShow
sim.textEditorGetInfo
simOpenTextEditor
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
int handle = sim.textEditorOpen(string initText, string properties)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int handle = sim.textEditorOpen(string initText, string properties)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>initText</strong>: initial text to be displayed.</li>
<li><strong>xml</strong>: XML description of the text editor's properties. Can be an empty string for default properties</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the text editor</li>
</ul>
==================== apiOutputPythonLua ====================>

==================== apiMorePythonLua ====================<
<h3>XML Example</h3>
<code class="hljs language-xml coppelia-coppeliasim-script">&lt;editor
title=&quot;Window title&quot; editable=&quot;true&quot; searchable=&quot;true&quot;
tab-width=&quot;4&quot; toolbar=&quot;false&quot; statusbar=&quot;false&quot; resizable=&quot;true&quot; modal=&quot;false&quot;
on-close=&quot;callbackFunction&quot; closeable=&quot;true&quot; position=&quot;100 100&quot; size=&quot;800 600&quot;
placement=&quot;absolute&quot; font=&quot;Courier&quot; font-size=&quot;14&quot; activate=&quot;false&quot; editable=&quot;true&quot;
line-numbers=&quot;true&quot; max-lines=&quot;0&quot; is-lua=&quot;true&quot; wrap-word=&quot;false&quot;
text-col=&quot;50 50 50&quot; background-col=&quot;190 190 190&quot; selectionColor=&quot;128 128 255&quot;
comment-col=&quot;0 140 0&quot; number-col=&quot;220 0 220&quot; string-col=&quot;255 255 0&quot;
character-col=&quot;255 255 0&quot; operator-col=&quot;0 0 0&quot; identifier-col=&quot;64 64 64&quot;
preprocessor-col=&quot;0 128 128&quot; keyword1-col=&quot;152 0 0&quot; keyword2-col=&quot;220 80 20&quot;
keyword3-col=&quot;0 0 255&quot; keyword4-col=&quot;152 64 0&quot;&gt;

&lt;keywords1&gt;
  &lt;item word=&quot;sim.getObject&quot; autocomplete=&quot;true&quot;
    calltip=&quot;int handle=sim.getObject(string path)&quot; /&gt;
  &lt;item word=&quot;sim.getObjectPosition&quot; autocomplete=&quot;true&quot;
    calltip=&quot;float[3] pos=sim.getObjectPosition(int handle,
      int relHandle)&quot; /&gt;
&lt;/keywords1&gt;

&lt;keywords2&gt;
  &lt;item word=&quot;sim.getObjectOrientation&quot; autocomplete=&quot;true&quot;
    calltip=&quot;float[3] euler=sim.getObjectOrientation(int handle,
      int relHandle)&quot; /&gt;
&lt;/keywords2&gt;

&lt;/editor&gt;

<comment>placement attribute recognizes following values: center, absolute and relative</comment></code>
==================== apiMorePythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.textEditorShow
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Shows or hides a  text edition window previously opened with <a href="simTextEditorOpen.htm">sim.textEditorOpen</a>
==================== apiDescription ====================>

==================== apiSynopsisPython ====================<
sim.textEditorShow(int handle, bool showState)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.textEditorShow(int handle, bool showState)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>handle</strong>: handle of the text editor window</li>
<li><strong>showState</strong>: desired show state of the text editor window</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.transformBuffer
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Modifies a buffer than contains packed data
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#packing">data packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
a) bytes outBuff = sim.transformBuffer(bytes inBuff, int inFormat, float mult, float off, int outFormat)
b) list outBuff = sim.transformBuffer(bytes inBuff, sim.buffer_uint8, 0, int splitSize, sim.buffer_split)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
a) buffer outBuff = sim.transformBuffer(buffer inBuffer, int inFormat, float mult, float off, int outFormat)
b) buffer[] outBuff = sim.transformBuffer(buffer inBuffer, sim.buffer_uint8, 0, int splitSize, sim.buffer_split)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>inBuff</strong>: input buffer that contains packed data</li>
<li><strong>inFormat</strong>: <a href="../apiConstants.htm#bufferTypes">buffer type</a></li>
<li><strong>mult</strong>: multiplier value. We have out = offset + multiplier * in</li>
<li><strong>off/splitSize</strong>: offset or split size value. We have out = offset + multiplier * in</li>
<li><strong>outFormat</strong>: desired <a href="../apiConstants.htm#bufferTypes">buffer type</a> for the returned buffer</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li>a) <strong>outBuff</strong>: the modified buffer</li>
<li>b) <strong>outBuff</strong>: the various split buffers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.transformImage
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Transforms an image in various ways
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.loadImage
sim.getScaledImage
sim.transformBuffer
sim.combineRgbImages
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simTransformImage(unsigned char* image, const int* resolution, int options,
                      const double* floatParams, const int* intParams, void* reserved)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>image</strong>: pointer to rgb or rgba values of the image</li>
<li><strong>resolution</strong>: resolution of the image</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): the provided image is rgba (or a depth buffer, i.e. one double per image pixel), otherwise it is rgb</li>
<li>bit1 set (2): the image will be flipped on its x-axis</li>
<li>bit2 set (4): the image will be flipped on its y-axis</li>
</ul>
</li>
<li><strong>floatParams</strong>: Reserved for future extension. Set to nullptr.</li>
<li><strong>intParams</strong>: Reserved for future extension. Set to nullptr.</li>
<li><strong>reserved</strong>: Reserved for future extension. Set to nullptr.</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.transformImage(bytes image, list resolution, int options)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.transformImage(buffer image, int[2] resolution, int options)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>image</strong>: buffer to rgb or rgba values of the image</li>
<li><strong>resolution</strong>: resolution of the image</li>
<li><strong>options</strong>: bit-coded:
<ul>
<li>bit0 set (1): the provided image is rgba (or a depth buffer, i.e. one double per image pixel), otherwise it is rgb</li>
<li>bit1 set (2): the image will be flipped on its x-axis</li>
<li>bit2 set (4): the image will be flipped on its y-axis</li>
</ul>
</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simTransformVector
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Multiplies a vector with a transformation matrix (v = m * v)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#coordinatesAndTransformations">matrix/transformation functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simTransformVector(const double* matrix, double* vect)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>matrix</strong>: the transformation matrix: [Vx0 Vy0 Vz0 P0 Vx1 Vy1 Vz1 P1 Vx2 Vy2 Vz2 P2]</li>
<li><strong>vect</strong>: the vector to be transformed (a pointer to 3 values)</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
simUnfoldStackTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Extracts all key-value pairs from the table at the top of the stack, and removes the table
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
simGetStackSize
<a href="../apiFunctions.htm#stacks">stack functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simUnfoldStackTable(int stackHandle)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a></li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error</li>
</ul>
==================== apiOutputCpp ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.ungroupShape
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Ungroups a compound shape into several <a href="../shapes.htm">shapes</a>
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.groupShapes
sim.convexDecompose
sim.getQHull
sim.getDecimatedMesh
sim.alignShapeBB
sim.relocateShapeFrame
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int* simUngroupShape(int shapeHandle, int* shapeCount)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>shapeHandle</strong>: handles of the shape you wish to ungroup. If you specify for this argument (-2-handleOfShape), then the shape will be divided instead of ungrouped</li>
<li><strong>shapeCount</strong> (output): size of the returned buffer</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>a pointer to an array holding the handles of the resulting shapes, or nullptr in case of an error. The user is in charge of releasing the array buffer with <a href="simReleaseBuffer_cpp.htm">simReleaseBuffer</a>.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list shapeHandles = sim.ungroupShape(int shapeHandle)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] shapeHandles = sim.ungroupShape(int shapeHandle)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>shapeHandle</strong>: handles of the shape you wish to ungroup. If you specify for this argument (-2-handleOfShape), then the shape will be divided instead of ungrouped</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>shapeHandles</strong>: array holding the handles of the resulting shapes</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.unpackDoubleTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Unpacks a string (or part of it) into an array of double floating-point numbers
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.packDoubleTable
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list doubleNumbers = sim.unpackDoubleTable(bytes data, int startDoubleIndex = 0, int doubleCount = 0,
                                           int additionalByteOffset = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] doubleNumbers = sim.unpackDoubleTable(buffer data, int startDoubleIndex = 0,
                                              int doubleCount = 0, int additionalByteOffset = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>data</strong>: string (values between 0 and 255) that contains packed floating-point numbers</li>
<li><strong>startDoubleIndex</strong>: zero-based index from which on data should be unpacked (from data[8*startDoubleIndex+1+additionalByteOffset]). Can be omitted in which case 0 is used</li>
<li><strong>doubleCount</strong>: amount of doubles that should be unpacked. Can be omitted in which case 0 is used (which indicates that the maximum of doubles should be unpacked from the indicated startIndex)</li>
<li><strong>additionalByteOffset</strong>: byte offset that will be added before reading the doubless. Can be omitted, in which case 0 is used.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>doubleNumbers</strong>: array containing unpacked double floating-point numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.unpackFloatTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Unpacks a string (or part of it) into an array of floating-point numbers
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.packFloatTable
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list floatingNumbers = sim.unpackFloatTable(bytes data, int startFloatIndex = 0, int floatCount = 0,
                                            int additionalByteOffset = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float[] floatingNumbers = sim.unpackFloatTable(buffer data, int startFloatIndex = 0,
                                               int floatCount = 0, int additionalByteOffset = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>data</strong>: string (values between 0 and 255) that contains packed floating-point numbers</li>
<li><strong>startFloatIndex</strong>: zero-based index from which on data should be unpacked (from data[4*startFloatIndex+1+additionalByteOffset]). Can be omitted in which case 0 is used</li>
<li><strong>floatCount</strong>: amount of floats that should be unpacked. Can be omitted in which case 0 is used (which indicates that the maximum of floats should be unpacked from the indicated startFloatIndex)</li>
<li><strong>additionalByteOffset</strong>: byte offset that will be added before reading the floats. Can be omitted, in which case 0 is used.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>floatingNumbers</strong>: array containing unpacked floating-point numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.unpackInt32Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Unpacks a string (or part of it) into an array of int32 numbers
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.packInt32Table
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list int32Numbers = sim.unpackInt32Table(bytes data, int startInt32Index = 0, int int32Count = 0,
                                         int additionalByteOffset = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] int32Numbers = sim.unpackInt32Table(buffer data, int startInt32Index = 0, int int32Count = 0,
                                          int additionalByteOffset = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>data</strong>: string (values between 0 and 255) that contains packed int32 numbers</li>
<li><strong>startInt32Index</strong>: zero-based index from which on data should be unpacked (from data[4*startInt32Index+1+additionalByteOffset]). Can be omitted in which case 0 is used</li>
<li><strong>int32Count</strong>: amount of int32s that should be unpacked. Can be omitted in which case 0 is used (which indicates that the maximum of int32s should be unpacked from the indicated startInt32Index)</li>
<li><strong>additionalByteOffset</strong>: byte offset that will be added before reading the int32s. Can be omitted, in which case 0 is used.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>int32Numbers</strong>: array containing unpacked int32 numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.unpackTable
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Unpacks a buffer into a table
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.packTable
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simUnpackTable(int stackHandle, const char* buffer, int bufferSize)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>stackHandle</strong>: stack handle obtained with <a href="simCreateStack_cpp.htm">simCreateStack</a>. The unpacked table will be pushed onto the stack.</li>
<li><strong>buffer</strong>: packed table (buffer)</li>
<li><strong>bufferSize</strong>: size of the buffer</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
list/dict aTable = sim.unpackTable(bytes buffer)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
any[]/map aTable = sim.unpackTable(buffer buffer)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>buffer</strong>: an input buffer</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>aTable</strong>: the unpacked buffer</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.unpackUInt16Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Unpacks a string (or part of it) into an array of uint16 numbers
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.packUInt16Table
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list uint16Numbers = sim.unpackUInt16Table(bytes data, int starUint16Index = 0, int uint16Count = 0,
                                           int additionalByteOffset)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] uint16Numbers = sim.unpackUInt16Table(buffer data, int starUint16Index = 0,
                                            int uint16Count = 0, int additionalByteOffset)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>data</strong>: string (values between 0 and 255) that contains packed uint16 numbers</li>
<li><strong>starUint16Index</strong>: zero-based index from which on data should be unpacked (from data[2*starUint16Index+1+additionalByteOffset]). Can be omitted in which case 0 is used.</li>
<li><strong>uint16Count</strong>: amount of uint16s that should be unpacked. Can be omitted in which case 0 is used (which indicates that the maximum of uint16s should be unpacked from the indicated starUint16Index).</li>
<li><strong>additionalByteOffset</strong>: byte offset that will be added before reading the uint16s. Can be omitted, in which case 0 is used.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>uint16Numbers</strong>: array containing unpacked uint16 numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.unpackUInt32Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Unpacks a string (or part of it) into an array of uint32 numbers
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.packUInt32Table
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list uint32Numbers = sim.unpackUInt32Table(bytes data, int startUint32Index = 0, int uint32Count = 0,
                                           int additionalByteOffset = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] uint32Numbers = sim.unpackUInt32Table(buffer data, int startUint32Index = 0,
                                            int uint32Count = 0, int additionalByteOffset = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>data</strong>: string (values between 0 and 255) that contains packed uint32 numbers</li>
<li><strong>startUint32Index</strong>: zero-based index from which on data should be unpacked (from data[4*startUint32Index+1+additionalByteOffset]). Can be omitted in which case 0 is used</li>
<li><strong>uint32Count</strong>: amount of uint32s that should be unpacked. Can be omitted in which case 0 is used (which indicates that the maximum of uint32s should be unpacked from the indicated startUint32Index)</li>
<li><strong>additionalByteOffset</strong>: byte offset that will be added before reading the uint32s. Can be omitted, in which case 0 is used.</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>integerNumbers</strong>: array containing unpacked uint32 numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.unpackUInt8Table
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Unpacks a string (or part of it) into an array of uint8 numbers
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.packUInt8Table
<a href="../apiFunctions.htm#packing">packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
list uint8Numbers = sim.unpackUInt8Table(bytes data, int startUint8Index = 0, int uint8Count = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
int[] uint8Numbers = sim.unpackUInt8Table(buffer data, int startUint8Index = 0, int uint8Count = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>data</strong>: string (values between 0 and 255) that contains uint8 numbers</li>
<li><strong>startUint8Index</strong>: zero-based index from which on data should be unpacked (from data[startUint8Index]). Can be omitted in which case 0 is used.</li>
<li><strong>uint8Count</strong>: amount of uint8s that should be unpacked. Can be omitted in which case 0 is used (which indicates that the maximum of uint8s should be unpacked from the indicated startUint8Index).</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>uint8Numbers</strong>: array containing uint8 numbers</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.wait
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Waits for a certain amount of time
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.waitForSignal
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
float deltaTimeLeft = sim.wait(float deltaTime, bool simulationTime = True)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float deltaTimeLeft = sim.wait(float deltaTime, bool simulationTime = true)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>deltaTime</strong>: minimum time duration to wait</li>
<li><strong>simulationTime</strong>: indicates whether we want to wait in terms of simulation- or real-time</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>deltaTimeLeft</strong>: &quot;wait resolution&quot; of this function is the simulation time step, and the sim.wait command may overshoot the requested waiting time. deltaTimeLeft is the negative overshoot time. If the function was called at simulation time X, and the function returned at simulation time Y, then deltaTimeLeft is deltaTime-(Y-X). deltaTimeLeft is also memorized internally on a thread-basis and used as compensation or correction factor in subsequent blocking commands. deltaTimeLeft is 0 if the simulationTime argument was false</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.waitForSignal
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Waits for a signal. This function first checks whether an integer, float, double or string signal with that name is present
(in that order). The function only returns when the signal is present (defined)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.wait
<a href="../apiFunctions.htm#signals">signal functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
number/bytes signalValue = sim.waitForSignal(string signalName)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
number/buffer signalValue = sim.waitForSignal(string signalName)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>signalName</strong>: name of the signal</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>signalValue</strong>: value of the signal</li>
</ul>
==================== apiOutputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.writeCustomDataBlock
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds or removes custom data to be stored and saved together with an object, or the scene.
If the tag name ends with the string &quot;@tmp&quot;, then the data is not saved during a scene or model save operation.
The data can also be saved globally for the application (for the current CoppeliaSim session)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.setReferencedHandles
<a href="../apiFunctions.htm#customDataBlocks">custom data block related functions</a>
<a href="../apiFunctions.htm#packing">data packing/unpacking functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simWriteCustomDataBlock(int objectHandle, const char* tagName, const char* data, int dataSize)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object where you want to store your data, or sim.handle_scene if you wish to store the data with the scene, or sim.handle_app if you wish to store the data with the application's current session.</li>
<li><strong>tagName</strong>: string that identifies the data. An empty string will remove all custom data blocks</li>
<li><strong>data</strong>: your custom data. If nullptr or empty, the current data under the specified dataName will be removed</li>
<li><strong>dataSize</strong>: size of your custom data</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 if operation was not successful</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.writeCustomDataBlock(int objectHandle, string tagName, string/bytes data)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.writeCustomDataBlock(int objectHandle, string tagName, buffer data)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object where you want to store your data, or sim.handle_scene if you wish to store the data with the scene, or sim.handle_app if you wish to store the data with the application's current session</li>
<li><strong>tagName</strong>: string that identifies the data. An empty string removes all custom data blocks</li>
<li><strong>data</strong>: your custom data. If empty, the current data under the specified dataName is removed</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.writeCustomTableData
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Adds or removes custom table data to be stored and saved together with an object, or the scene.
If the tag name ends with the string &quot;@tmp&quot;, then the data is not saved during a scene or model save operation.
The data can also be saved globally for the application (for the current CoppeliaSim session)
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
<a href="../apiFunctions.htm#customDataBlocks">custom data block related functions</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
sim.writeCustomTableData(int objectHandle, string tagName, dict/list tableData)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.writeCustomTableData(int objectHandle, string tagName, table tableData)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>objectHandle</strong>: handle of the object where the data has to be stored, or sim.handle_scene if you wish to store the data with the scene, or sim.handle_app if you wish to store the data with the application's current session.</li>
<li><strong>tagName</strong>: string that identifies the data. An empty string will remove all custom data blocks</li>
<li><strong>tableData</strong>: data to store. An empty array effectively removes the custom data from the object</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.writeTexture
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Overwrites a specific texture (or a portion of it) with RGB data
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.getTextureId
sim.readTexture
sim.createTexture
==================== apiSeeAlso ====================>

==================== apiSynopsisCpp ====================<
int simWriteTexture(int textureId, int options, const char* textureData, int posX, int posY,
                    int sizeX, int sizeY, double interpolation)
==================== apiSynopsisCpp ====================>

==================== apiInputCpp ====================<
<ul>
<li><strong>textureId</strong>: ID of the texture. See also <a href="simGetTextureId.htm">simGetTextureId</a></li>
<li><strong>options</strong>: bit-coded:
<ul>
<li><strong>bit0</strong> reserved. Do not set</li>
<li><strong>bit1</strong> reserved. Do not set</li>
<li><strong>bit2</strong> set (4)=only an elliptical/circular portion of the texture data will be written</li>
</ul>
</li>
<li><strong>textureData</strong>: RGB data to write onto the texture. Each pixel is represented with 3 bytes (0-255)</li>
<li><strong>posX / posY</strong>: x/y position where to copy the RGB data. Set to 0/0 to overwrite the full texture</li>
<li><strong>sizeX / sizeY</strong>: x/y size of the RGB data. Set to 0/0 to overwrite the full texture</li>
<li><strong>interpolation</strong>: fade or interpolation factor. 0 for no fade</li>
</ul>
==================== apiInputCpp ====================>

==================== apiOutputCpp ====================<
<ul>
<li>-1 in case of an error.</li>
</ul>
==================== apiOutputCpp ====================>

==================== apiSynopsisPython ====================<
sim.writeTexture(int textureId, int options, bytes textureData, int posX = 0, int posY = 0,
                 int sizeX = 0, int sizeY = 0, float interpolation = 0)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
sim.writeTexture(int textureId, int options, buffer textureData, int posX = 0, int posY = 0,
                 int sizeX = 0, int sizeY = 0, float interpolation = 0)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>textureId</strong>: ID of the texture. See also <a href="simGetTextureId.htm">sim.getTextureId</a></li>
<li><strong>options</strong>: bit-coded:
<ul>
<li><strong>bit0</strong> reserved. Do not set</li>
<li><strong>bit1</strong> reserved. Do not set</li>
<li><strong>bit2</strong> set (4)=only an elliptical/circular portion of the texture data will be written</li>
</ul>
</li>
<li><strong>textureData</strong>: RGB data to write onto the texture. Each pixel is represented with 3 bytes (0-255)</li>
<li><strong>posX / posY</strong>: x/y position where to copy the RGB data. Set to 0/0 to overwrite the full texture</li>
<li><strong>sizeX / sizeY</strong>: x/y size of the RGB data. Set to 0/0 to overwrite the full texture</li>
<li><strong>interpolation</strong>: fade or interpolation factor. 0 for no fade</li>
</ul>
==================== apiInputPythonLua ====================>

************************************************************************************
************************************************************************************

==================== apiFunctionName ====================<
sim.yawPitchRollToAlphaBetaGamma
==================== apiFunctionName ====================>

==================== apiDescription ====================<
Converts Yaw-Pitch-Roll angles to CoppeliaSim's alpha-beta-gamma angles
==================== apiDescription ====================>

==================== apiSeeAlso ====================<
sim.alphaBetaGammaToYawPitchRoll
<a href="../positionOrientationTransformation.htm">positions, orientations and transformations</a>
==================== apiSeeAlso ====================>

==================== apiSynopsisPython ====================<
float alpha, float beta, float gamma = sim.yawPitchRollToAlphaBetaGamma(float yaw, float pitch,
                                                                        float roll)
==================== apiSynopsisPython ====================>

==================== apiSynopsisLua ====================<
float alpha, float beta, float gamma = sim.yawPitchRollToAlphaBetaGamma(float yaw, float pitch,
                                                                        float roll)
==================== apiSynopsisLua ====================>

==================== apiInputPythonLua ====================<
<ul>
<li><strong>yaw</strong>: the yaw angle</li>
<li><strong>pitch</strong>: the pitch angle</li>
<li><strong>roll</strong>: the roll angle</li>
</ul>
==================== apiInputPythonLua ====================>

==================== apiOutputPythonLua ====================<
<ul>
<li><strong>alpha</strong>: the alpha angle</li>
<li><strong>beta</strong>: the beta angle</li>
<li><strong>gamma</strong>: the gamma angle</li>
</ul>
==================== apiOutputPythonLua ====================>
