<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Forward/backward compatibility</title>
<link rel="stylesheet" type="text/css" href="../style.css">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>
Forward/backward compatibility
</h1>

<p>
CoppeliaSim is developed by a small team. Unlike larger entities, we embrace an agile development methodology, which means a more frequent update cycle and rapid deployment of fixes. This approach may lead to occasional issues, but allows for swift resolution and the introduction of new features. User feedback, particularly through bug reports on the <a href="https://forum.coppeliarobotics.com/" target="_blank">CoppeliaSim forum</a>, is crucial to this process and is an important means of identifying and addressing problems. </p>

<br>

<h2>
<a name="buffers" id="buffers"></a>Introduction of buffers in CoppeliaSim V4.7
</h2>

<h3>Forward compatibility</h3>
<p>There are potentially two problematic situations with existing code:</p>

<ul>
  <li>Comparison between a string and a buffer always resolves to <em>false</em>. This can break code where API functions previously returning a string, now return a buffer, as in e.g.:</li>
<code class="hljs language-lua coppelia-coppeliasim-script">local data = sim.getCustomDataBlock(gripperHandle, 'openCloseState')
if data == 'open' then
    -- this never executes
end</code>

<li>Code that relies on the usage of the <em>type</em>-function will break with buffers,  e.g.:</li>
<code class="hljs language-lua coppelia-coppeliasim-script">function sendData(data)
    if type(data) == 'string' then
        -- this does not execute when data is a buffer
    end
end</code>
</ul>

<p>Workarounds:</p>
<ul>
<li>Converting a buffer to string via <em>tostring</em>, before handing it to a code base that is not aware of buffers, is the best way to avoid potential problems </li>
<li>Where a buffer is compared to a string (and vice-versa), convert one or the other via <em>tostring</em> or <em>tobuffer</em>, otherwise comparison always resolves to <em>false</em></li>
<li>In particular, pay close attention to following API functions that previously returned ambiguous data (text/binary data): <a href="regularApi/simReadCustomDataBlock.htm">sim.readCustomDataBlock</a>, <a href="regularApi/simGetStringSignal.htm">sim.getStringSignal</a>, <a href="regularApi/simGetNamedStringParam.htm">sim.getNamedStringParam</a> or <a href="regularApi/simGetScriptStringParam.htm">sim.getScriptStringParam</a>.</li>
<li>Usage of buffers can be disabled in the <a href="commandLine.htm#settingsFile">user settings file</a> with variable <em>useBuffers</em>. Usage of buffers with <a href="regularApi/simReadCustomDataBlock.htm">sim.readCustomDataBlock</a> in particular can be disabled in the same file with variable <em>noBuffersWithSimReadCustomDataBlock</em></li>
</ul>

<h3>Backward compatibility</h3>
<p><em>isbuffer</em> and <em>tobuffer</em> are not recognized functions. Workaround:</p>

<ul>
  <li>Add following functions to <em>lua/base.lua</em> (alternatively to <em>lua/sim.lua</em>, or to a specific script code):</li>
<code class="hljs language-lua coppelia-coppeliasim-script">function tobuffer(a)
    return a
end

function isbuffer(a)
    return false
end</code>
</ul>

<br>
<br>

<h2>
<a name="sim.readCustomDataBlockTags" id="sim.readCustomDataBlockTags"></a>sim.readCustomDataBlockTags in CoppeliaSim V4.7
</h2>

<p><a href="regularApi/simReadCustomDataBlockTags.htm">sim.readCustomDataBlockTags</a> now returns an empty array, instead of nil/None, when there is no custom data blocks attached to the object.</p>

<h3>Forward compatibility</h3>

<p>Workaround: do not compare the return value of sim.readCustomDataBlockTags with nil/None anymore</p>

<h3>Backward compatibility</h3>

<p>Workaround: the return value nil/None of sim.readCustomDataBlockTags should be interpreted as an empty array</p>


 <br> 
 <br> 

  
  </td>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
