<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>sim.registerScriptVariable</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1>Regular API function</h1>
<p class=subsectionBar><a name="simRegisterScriptVariable" id="simRegisterScriptVariable"></a>simRegisterScriptVariable</p>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr><div>Registers a script variable. Should be called inside of simInit entry point. See also <a href="simRegisterScriptCallbackFunction.htm">simRegisterScriptCallbackFunction</a>.</div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C/C++<br>synopsis
</td> 
<td class=apiTableRightCSyn>int simRegisterScriptVariable(const char* var,const char* val,int stackhandle)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C/C++<br>parameters</td> 
<td class=apiTableRightCParam>
<div><strong>var</strong>: name of the variable, without namespace</div>
<div><strong>val</strong>: value of the variable. Can be nullptr, in which case the value of the variable will be the top item of the provided stack</div>
<div><strong>stackHandle</strong>: a stack handle obtained with <a href="simCreateStack.htm">simCreateStack</a>. Set to 0 if <em>varValue</em> is not nullptr. If a stack is provided, it will be released at a later point by CoppeliaSim.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C/C++<br>return value
</td> 
<td class=apiTableRightCRet>
<div>1 if the variable was registered, 0 if the variable was replaced because it already existed, -1 in case of an error</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua<br>synopsis
</td> 
<td class=apiTableRightLSyn></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua<br>parameters</td> 
<td class=apiTableRightLParam>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua<br>return values
</td> 
<td class=apiTableRightLRet>

</td> 
</tr> 

<tr class=apiTableTr> 
<td class=apiTableLeftPSyn>
Python<br>synopsis
</td> 
<td class=apiTableRightPSyn></td> 
</tr> 

</table> 


<br>
</td>
</tr>
</table>
</div>
</body>
</html>
